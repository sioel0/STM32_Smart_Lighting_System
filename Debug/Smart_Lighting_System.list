
Smart_Lighting_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005844  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080059dc  080059dc  000069dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059f4  080059f4  00007020  2**0
                  CONTENTS
  4 .ARM          00000008  080059f4  080059f4  000069f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059fc  080059fc  00007020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059fc  080059fc  000069fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a00  08005a00  00006a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08005a04  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000020  08005a24  00007020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08005a24  000071d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd2f  00000000  00000000  00007050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028f0  00000000  00000000  00016d7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00019670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c57  00000000  00000000  0001a668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018394  00000000  00000000  0001b2bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014dbd  00000000  00000000  00033653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aa47  00000000  00000000  00048410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2e57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004150  00000000  00000000  000e2e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000e6fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000020 	.word	0x20000020
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080059c4 	.word	0x080059c4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000024 	.word	0x20000024
 80001d4:	080059c4 	.word	0x080059c4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_GPIO_EXTI_Callback>:
/**
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == PANIC_BUTTON_PIN) {
 80004d2:	88fb      	ldrh	r3, [r7, #6]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d101      	bne.n	80004dc <HAL_GPIO_EXTI_Callback+0x14>
		panic_button_set();
 80004d8:	f000 ff3e 	bl	8001358 <panic_button_set>
	}
	if(GPIO_Pin == MOVEMENT_SENSOR_PIN) {
 80004dc:	88fb      	ldrh	r3, [r7, #6]
 80004de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80004e2:	d101      	bne.n	80004e8 <HAL_GPIO_EXTI_Callback+0x20>
		sensors_movement_detected();
 80004e4:	f001 f828 	bl	8001538 <sensors_movement_detected>
	}
}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <HAL_TIM_PeriodElapsedCallback>:

/*
 * @brief This function is the callback triggered when timer elapsed interrupt is managed
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) {
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a0f      	ldr	r2, [pc, #60]	@ (800053c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d101      	bne.n	8000506 <HAL_TIM_PeriodElapsedCallback+0x16>
		panic_timer_elapsed();
 8000502:	f000 ffd1 	bl	80014a8 <panic_timer_elapsed>
	}
	if(htim->Instance == TIM4) {
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a0d      	ldr	r2, [pc, #52]	@ (8000540 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d101      	bne.n	8000514 <HAL_TIM_PeriodElapsedCallback+0x24>
		light_level_check();
 8000510:	f000 fda6 	bl	8001060 <light_level_check>
	}
	if(htim->Instance == TIM9) {
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0a      	ldr	r2, [pc, #40]	@ (8000544 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d109      	bne.n	8000532 <HAL_TIM_PeriodElapsedCallback+0x42>
		sensors_movement_detected_reset();
 800051e:	f001 f823 	bl	8001568 <sensors_movement_detected_reset>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000522:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000526:	4808      	ldr	r0, [pc, #32]	@ (8000548 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000528:	f001 ff6d 	bl	8002406 <HAL_GPIO_TogglePin>
		HAL_TIM_Base_Stop_IT(&htim9);
 800052c:	4807      	ldr	r0, [pc, #28]	@ (800054c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800052e:	f004 fe59 	bl	80051e4 <HAL_TIM_Base_Stop_IT>
	}
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40000400 	.word	0x40000400
 8000540:	40000800 	.word	0x40000800
 8000544:	40014000 	.word	0x40014000
 8000548:	40020c00 	.word	0x40020c00
 800054c:	20000168 	.word	0x20000168

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000554:	f001 f814 	bl	8001580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000558:	f000 f81a 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055c:	f000 f9d6 	bl	800090c <MX_GPIO_Init>
  MX_TIM3_Init();
 8000560:	f000 f8fe 	bl	8000760 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000564:	f000 f87c 	bl	8000660 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000568:	f000 f8cc 	bl	8000704 <MX_I2C1_Init>
  MX_TIM9_Init();
 800056c:	f000 f994 	bl	8000898 <MX_TIM9_Init>
  MX_TIM4_Init();
 8000570:	f000 f944 	bl	80007fc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  light_init();
 8000574:	f000 fcac 	bl	8000ed0 <light_init>
  light_default_state(10);
 8000578:	200a      	movs	r0, #10
 800057a:	f000 fc7a 	bl	8000e72 <light_default_state>
  light_activate();
 800057e:	f000 fd51 	bl	8001024 <light_activate>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	panic_main();
 8000582:	f000 fea9 	bl	80012d8 <panic_main>
	light_main();
 8000586:	f000 fd77 	bl	8001078 <light_main>
	panic_main();
 800058a:	bf00      	nop
 800058c:	e7f9      	b.n	8000582 <main+0x32>
	...

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	@ 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	@ 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f005 f9d6 	bl	8005950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b27      	ldr	r3, [pc, #156]	@ (8000658 <SystemClock_Config+0xc8>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005bc:	4a26      	ldr	r2, [pc, #152]	@ (8000658 <SystemClock_Config+0xc8>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c4:	4b24      	ldr	r3, [pc, #144]	@ (8000658 <SystemClock_Config+0xc8>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b21      	ldr	r3, [pc, #132]	@ (800065c <SystemClock_Config+0xcc>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a20      	ldr	r2, [pc, #128]	@ (800065c <SystemClock_Config+0xcc>)
 80005da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b1e      	ldr	r3, [pc, #120]	@ (800065c <SystemClock_Config+0xcc>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ec:	2301      	movs	r3, #1
 80005ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000600:	2304      	movs	r3, #4
 8000602:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000604:	23c0      	movs	r3, #192	@ 0xc0
 8000606:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000608:	2304      	movs	r3, #4
 800060a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800060c:	2308      	movs	r3, #8
 800060e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0320 	add.w	r3, r7, #32
 8000614:	4618      	mov	r0, r3
 8000616:	f004 f8af 	bl	8004778 <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000620:	f000 fa32 	bl	8000a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000628:	2302      	movs	r3, #2
 800062a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000630:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000634:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	2103      	movs	r1, #3
 8000640:	4618      	mov	r0, r3
 8000642:	f004 fb11 	bl	8004c68 <HAL_RCC_ClockConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800064c:	f000 fa1c 	bl	8000a88 <Error_Handler>
  }
}
 8000650:	bf00      	nop
 8000652:	3750      	adds	r7, #80	@ 0x50
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000666:	463b      	mov	r3, r7
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000672:	4b21      	ldr	r3, [pc, #132]	@ (80006f8 <MX_ADC1_Init+0x98>)
 8000674:	4a21      	ldr	r2, [pc, #132]	@ (80006fc <MX_ADC1_Init+0x9c>)
 8000676:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000678:	4b1f      	ldr	r3, [pc, #124]	@ (80006f8 <MX_ADC1_Init+0x98>)
 800067a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800067e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000680:	4b1d      	ldr	r3, [pc, #116]	@ (80006f8 <MX_ADC1_Init+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000686:	4b1c      	ldr	r3, [pc, #112]	@ (80006f8 <MX_ADC1_Init+0x98>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800068c:	4b1a      	ldr	r3, [pc, #104]	@ (80006f8 <MX_ADC1_Init+0x98>)
 800068e:	2200      	movs	r2, #0
 8000690:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000692:	4b19      	ldr	r3, [pc, #100]	@ (80006f8 <MX_ADC1_Init+0x98>)
 8000694:	2200      	movs	r2, #0
 8000696:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800069a:	4b17      	ldr	r3, [pc, #92]	@ (80006f8 <MX_ADC1_Init+0x98>)
 800069c:	2200      	movs	r2, #0
 800069e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a0:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <MX_ADC1_Init+0x98>)
 80006a2:	4a17      	ldr	r2, [pc, #92]	@ (8000700 <MX_ADC1_Init+0xa0>)
 80006a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a6:	4b14      	ldr	r3, [pc, #80]	@ (80006f8 <MX_ADC1_Init+0x98>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006ac:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <MX_ADC1_Init+0x98>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006b2:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <MX_ADC1_Init+0x98>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ba:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <MX_ADC1_Init+0x98>)
 80006bc:	2201      	movs	r2, #1
 80006be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c0:	480d      	ldr	r0, [pc, #52]	@ (80006f8 <MX_ADC1_Init+0x98>)
 80006c2:	f000 ffcf 	bl	8001664 <HAL_ADC_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006cc:	f000 f9dc 	bl	8000a88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80006d8:	2307      	movs	r3, #7
 80006da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006dc:	463b      	mov	r3, r7
 80006de:	4619      	mov	r1, r3
 80006e0:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <MX_ADC1_Init+0x98>)
 80006e2:	f001 f983 	bl	80019ec <HAL_ADC_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006ec:	f000 f9cc 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	2000003c 	.word	0x2000003c
 80006fc:	40012000 	.word	0x40012000
 8000700:	0f000001 	.word	0x0f000001

08000704 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000708:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <MX_I2C1_Init+0x50>)
 800070a:	4a13      	ldr	r2, [pc, #76]	@ (8000758 <MX_I2C1_Init+0x54>)
 800070c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800070e:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000710:	4a12      	ldr	r2, [pc, #72]	@ (800075c <MX_I2C1_Init+0x58>)
 8000712:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000714:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <MX_I2C1_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000720:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000722:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000726:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000728:	4b0a      	ldr	r3, [pc, #40]	@ (8000754 <MX_I2C1_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800072e:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000734:	4b07      	ldr	r3, [pc, #28]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800073a:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <MX_I2C1_Init+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000742:	f001 fe93 	bl	800246c <HAL_I2C_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800074c:	f000 f99c 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000084 	.word	0x20000084
 8000758:	40005400 	.word	0x40005400
 800075c:	00061a80 	.word	0x00061a80

08000760 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000766:	f107 0308 	add.w	r3, r7, #8
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000774:	463b      	mov	r3, r7
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800077c:	4b1d      	ldr	r3, [pc, #116]	@ (80007f4 <MX_TIM3_Init+0x94>)
 800077e:	4a1e      	ldr	r2, [pc, #120]	@ (80007f8 <MX_TIM3_Init+0x98>)
 8000780:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47999;
 8000782:	4b1c      	ldr	r3, [pc, #112]	@ (80007f4 <MX_TIM3_Init+0x94>)
 8000784:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8000788:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078a:	4b1a      	ldr	r3, [pc, #104]	@ (80007f4 <MX_TIM3_Init+0x94>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000790:	4b18      	ldr	r3, [pc, #96]	@ (80007f4 <MX_TIM3_Init+0x94>)
 8000792:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000796:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000798:	4b16      	ldr	r3, [pc, #88]	@ (80007f4 <MX_TIM3_Init+0x94>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079e:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <MX_TIM3_Init+0x94>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007a4:	4813      	ldr	r0, [pc, #76]	@ (80007f4 <MX_TIM3_Init+0x94>)
 80007a6:	f004 fc6b 	bl	8005080 <HAL_TIM_Base_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80007b0:	f000 f96a 	bl	8000a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007ba:	f107 0308 	add.w	r3, r7, #8
 80007be:	4619      	mov	r1, r3
 80007c0:	480c      	ldr	r0, [pc, #48]	@ (80007f4 <MX_TIM3_Init+0x94>)
 80007c2:	f004 fe2e 	bl	8005422 <HAL_TIM_ConfigClockSource>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80007cc:	f000 f95c 	bl	8000a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d0:	2300      	movs	r3, #0
 80007d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007d8:	463b      	mov	r3, r7
 80007da:	4619      	mov	r1, r3
 80007dc:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <MX_TIM3_Init+0x94>)
 80007de:	f005 f835 	bl	800584c <HAL_TIMEx_MasterConfigSynchronization>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80007e8:	f000 f94e 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	3718      	adds	r7, #24
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200000d8 	.word	0x200000d8
 80007f8:	40000400 	.word	0x40000400

080007fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000802:	f107 0308 	add.w	r3, r7, #8
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000810:	463b      	mov	r3, r7
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000818:	4b1d      	ldr	r3, [pc, #116]	@ (8000890 <MX_TIM4_Init+0x94>)
 800081a:	4a1e      	ldr	r2, [pc, #120]	@ (8000894 <MX_TIM4_Init+0x98>)
 800081c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47999;
 800081e:	4b1c      	ldr	r3, [pc, #112]	@ (8000890 <MX_TIM4_Init+0x94>)
 8000820:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8000824:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000826:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <MX_TIM4_Init+0x94>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 800082c:	4b18      	ldr	r3, [pc, #96]	@ (8000890 <MX_TIM4_Init+0x94>)
 800082e:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000832:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000834:	4b16      	ldr	r3, [pc, #88]	@ (8000890 <MX_TIM4_Init+0x94>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083a:	4b15      	ldr	r3, [pc, #84]	@ (8000890 <MX_TIM4_Init+0x94>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000840:	4813      	ldr	r0, [pc, #76]	@ (8000890 <MX_TIM4_Init+0x94>)
 8000842:	f004 fc1d 	bl	8005080 <HAL_TIM_Base_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800084c:	f000 f91c 	bl	8000a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000850:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000854:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000856:	f107 0308 	add.w	r3, r7, #8
 800085a:	4619      	mov	r1, r3
 800085c:	480c      	ldr	r0, [pc, #48]	@ (8000890 <MX_TIM4_Init+0x94>)
 800085e:	f004 fde0 	bl	8005422 <HAL_TIM_ConfigClockSource>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000868:	f000 f90e 	bl	8000a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800086c:	2300      	movs	r3, #0
 800086e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000874:	463b      	mov	r3, r7
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	@ (8000890 <MX_TIM4_Init+0x94>)
 800087a:	f004 ffe7 	bl	800584c <HAL_TIMEx_MasterConfigSynchronization>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000884:	f000 f900 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	3718      	adds	r7, #24
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000120 	.word	0x20000120
 8000894:	40000800 	.word	0x40000800

08000898 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089e:	463b      	mov	r3, r7
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80008aa:	4b16      	ldr	r3, [pc, #88]	@ (8000904 <MX_TIM9_Init+0x6c>)
 80008ac:	4a16      	ldr	r2, [pc, #88]	@ (8000908 <MX_TIM9_Init+0x70>)
 80008ae:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 19999;
 80008b0:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <MX_TIM9_Init+0x6c>)
 80008b2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80008b6:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <MX_TIM9_Init+0x6c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 47999;
 80008be:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <MX_TIM9_Init+0x6c>)
 80008c0:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80008c4:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <MX_TIM9_Init+0x6c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000904 <MX_TIM9_Init+0x6c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80008d2:	480c      	ldr	r0, [pc, #48]	@ (8000904 <MX_TIM9_Init+0x6c>)
 80008d4:	f004 fbd4 	bl	8005080 <HAL_TIM_Base_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 80008de:	f000 f8d3 	bl	8000a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008e6:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80008e8:	463b      	mov	r3, r7
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	@ (8000904 <MX_TIM9_Init+0x6c>)
 80008ee:	f004 fd98 	bl	8005422 <HAL_TIM_ConfigClockSource>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 80008f8:	f000 f8c6 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000168 	.word	0x20000168
 8000908:	40014000 	.word	0x40014000

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08c      	sub	sp, #48	@ 0x30
 8000910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
 8000926:	4b54      	ldr	r3, [pc, #336]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a53      	ldr	r2, [pc, #332]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b51      	ldr	r3, [pc, #324]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	61bb      	str	r3, [r7, #24]
 800093c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
 8000942:	4b4d      	ldr	r3, [pc, #308]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	4a4c      	ldr	r2, [pc, #304]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 8000948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800094c:	6313      	str	r3, [r2, #48]	@ 0x30
 800094e:	4b4a      	ldr	r3, [pc, #296]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	4b46      	ldr	r3, [pc, #280]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a45      	ldr	r2, [pc, #276]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b43      	ldr	r3, [pc, #268]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	4b3f      	ldr	r3, [pc, #252]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	4a3e      	ldr	r2, [pc, #248]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 8000980:	f043 0310 	orr.w	r3, r3, #16
 8000984:	6313      	str	r3, [r2, #48]	@ 0x30
 8000986:	4b3c      	ldr	r3, [pc, #240]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	f003 0310 	and.w	r3, r3, #16
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	4b38      	ldr	r3, [pc, #224]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	4a37      	ldr	r2, [pc, #220]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a2:	4b35      	ldr	r3, [pc, #212]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b31      	ldr	r3, [pc, #196]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	4a30      	ldr	r2, [pc, #192]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009be:	4b2e      	ldr	r3, [pc, #184]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Panic_Buzzer_GPIO_Port, Panic_Buzzer_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2180      	movs	r1, #128	@ 0x80
 80009ce:	482b      	ldr	r0, [pc, #172]	@ (8000a7c <MX_GPIO_Init+0x170>)
 80009d0:	f001 fd00 	bl	80023d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009da:	4829      	ldr	r0, [pc, #164]	@ (8000a80 <MX_GPIO_Init+0x174>)
 80009dc:	f001 fcfa 	bl	80023d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Panic_Buzzer_Pin */
  GPIO_InitStruct.Pin = Panic_Buzzer_Pin;
 80009e0:	2380      	movs	r3, #128	@ 0x80
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Panic_Buzzer_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	4821      	ldr	r0, [pc, #132]	@ (8000a7c <MX_GPIO_Init+0x170>)
 80009f8:	f001 fb68 	bl	80020cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80009fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	481a      	ldr	r0, [pc, #104]	@ (8000a80 <MX_GPIO_Init+0x174>)
 8000a16:	f001 fb59 	bl	80020cc <HAL_GPIO_Init>

  /*Configure GPIO pin : Movement_Sensors_Pin */
  GPIO_InitStruct.Pin = Movement_Sensors_Pin;
 8000a1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a20:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Movement_Sensors_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4814      	ldr	r0, [pc, #80]	@ (8000a84 <MX_GPIO_Init+0x178>)
 8000a32:	f001 fb4b 	bl	80020cc <HAL_GPIO_Init>

  /*Configure GPIO pin : Panic_Button_Pin */
  GPIO_InitStruct.Pin = Panic_Button_Pin;
 8000a36:	2301      	movs	r3, #1
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a3a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a40:	2302      	movs	r3, #2
 8000a42:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Panic_Button_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480d      	ldr	r0, [pc, #52]	@ (8000a80 <MX_GPIO_Init+0x174>)
 8000a4c:	f001 fb3e 	bl	80020cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2100      	movs	r1, #0
 8000a54:	2006      	movs	r0, #6
 8000a56:	f001 fad2 	bl	8001ffe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a5a:	2006      	movs	r0, #6
 8000a5c:	f001 faeb 	bl	8002036 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2100      	movs	r1, #0
 8000a64:	2017      	movs	r0, #23
 8000a66:	f001 faca 	bl	8001ffe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a6a:	2017      	movs	r0, #23
 8000a6c:	f001 fae3 	bl	8002036 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a70:	bf00      	nop
 8000a72:	3730      	adds	r7, #48	@ 0x30
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40020c00 	.word	0x40020c00
 8000a84:	40020800 	.word	0x40020800

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8c:	b672      	cpsid	i
}
 8000a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <Error_Handler+0x8>

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa2:	4a0f      	ldr	r2, [pc, #60]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000aa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abe:	4a08      	ldr	r2, [pc, #32]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac6:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ad2:	2007      	movs	r0, #7
 8000ad4:	f001 fa88 	bl	8001fe8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40023800 	.word	0x40023800

08000ae4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	@ 0x28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a17      	ldr	r2, [pc, #92]	@ (8000b60 <HAL_ADC_MspInit+0x7c>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d127      	bne.n	8000b56 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4b16      	ldr	r3, [pc, #88]	@ (8000b64 <HAL_ADC_MspInit+0x80>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0e:	4a15      	ldr	r2, [pc, #84]	@ (8000b64 <HAL_ADC_MspInit+0x80>)
 8000b10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b16:	4b13      	ldr	r3, [pc, #76]	@ (8000b64 <HAL_ADC_MspInit+0x80>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b0f      	ldr	r3, [pc, #60]	@ (8000b64 <HAL_ADC_MspInit+0x80>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b64 <HAL_ADC_MspInit+0x80>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b32:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <HAL_ADC_MspInit+0x80>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b42:	2303      	movs	r3, #3
 8000b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4805      	ldr	r0, [pc, #20]	@ (8000b68 <HAL_ADC_MspInit+0x84>)
 8000b52:	f001 fabb 	bl	80020cc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b56:	bf00      	nop
 8000b58:	3728      	adds	r7, #40	@ 0x28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40012000 	.word	0x40012000
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020000 	.word	0x40020000

08000b6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	@ 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a21      	ldr	r2, [pc, #132]	@ (8000c10 <HAL_I2C_MspInit+0xa4>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d13b      	bne.n	8000c06 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	4b20      	ldr	r3, [pc, #128]	@ (8000c14 <HAL_I2C_MspInit+0xa8>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a1f      	ldr	r2, [pc, #124]	@ (8000c14 <HAL_I2C_MspInit+0xa8>)
 8000b98:	f043 0302 	orr.w	r3, r3, #2
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c14 <HAL_I2C_MspInit+0xa8>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000baa:	23c0      	movs	r3, #192	@ 0xc0
 8000bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bae:	2312      	movs	r3, #18
 8000bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bba:	2304      	movs	r3, #4
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4814      	ldr	r0, [pc, #80]	@ (8000c18 <HAL_I2C_MspInit+0xac>)
 8000bc6:	f001 fa81 	bl	80020cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <HAL_I2C_MspInit+0xa8>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd2:	4a10      	ldr	r2, [pc, #64]	@ (8000c14 <HAL_I2C_MspInit+0xa8>)
 8000bd4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bda:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <HAL_I2C_MspInit+0xa8>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	201f      	movs	r0, #31
 8000bec:	f001 fa07 	bl	8001ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000bf0:	201f      	movs	r0, #31
 8000bf2:	f001 fa20 	bl	8002036 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2020      	movs	r0, #32
 8000bfc:	f001 f9ff 	bl	8001ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c00:	2020      	movs	r0, #32
 8000c02:	f001 fa18 	bl	8002036 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c06:	bf00      	nop
 8000c08:	3728      	adds	r7, #40	@ 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40005400 	.word	0x40005400
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020400 	.word	0x40020400

08000c1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a2a      	ldr	r2, [pc, #168]	@ (8000cd4 <HAL_TIM_Base_MspInit+0xb8>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d116      	bne.n	8000c5c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	4b29      	ldr	r3, [pc, #164]	@ (8000cd8 <HAL_TIM_Base_MspInit+0xbc>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c36:	4a28      	ldr	r2, [pc, #160]	@ (8000cd8 <HAL_TIM_Base_MspInit+0xbc>)
 8000c38:	f043 0302 	orr.w	r3, r3, #2
 8000c3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3e:	4b26      	ldr	r3, [pc, #152]	@ (8000cd8 <HAL_TIM_Base_MspInit+0xbc>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	201d      	movs	r0, #29
 8000c50:	f001 f9d5 	bl	8001ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c54:	201d      	movs	r0, #29
 8000c56:	f001 f9ee 	bl	8002036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8000c5a:	e036      	b.n	8000cca <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a1e      	ldr	r2, [pc, #120]	@ (8000cdc <HAL_TIM_Base_MspInit+0xc0>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d116      	bne.n	8000c94 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd8 <HAL_TIM_Base_MspInit+0xbc>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6e:	4a1a      	ldr	r2, [pc, #104]	@ (8000cd8 <HAL_TIM_Base_MspInit+0xbc>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c76:	4b18      	ldr	r3, [pc, #96]	@ (8000cd8 <HAL_TIM_Base_MspInit+0xbc>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2100      	movs	r1, #0
 8000c86:	201e      	movs	r0, #30
 8000c88:	f001 f9b9 	bl	8001ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c8c:	201e      	movs	r0, #30
 8000c8e:	f001 f9d2 	bl	8002036 <HAL_NVIC_EnableIRQ>
}
 8000c92:	e01a      	b.n	8000cca <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM9)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a11      	ldr	r2, [pc, #68]	@ (8000ce0 <HAL_TIM_Base_MspInit+0xc4>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d115      	bne.n	8000cca <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd8 <HAL_TIM_Base_MspInit+0xbc>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca6:	4a0c      	ldr	r2, [pc, #48]	@ (8000cd8 <HAL_TIM_Base_MspInit+0xbc>)
 8000ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cae:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <HAL_TIM_Base_MspInit+0xbc>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2018      	movs	r0, #24
 8000cc0:	f001 f99d 	bl	8001ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000cc4:	2018      	movs	r0, #24
 8000cc6:	f001 f9b6 	bl	8002036 <HAL_NVIC_EnableIRQ>
}
 8000cca:	bf00      	nop
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40000400 	.word	0x40000400
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40000800 	.word	0x40000800
 8000ce0:	40014000 	.word	0x40014000

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <NMI_Handler+0x4>

08000cec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3a:	f000 fc73 	bl	8001624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Panic_Button_Pin);
 8000d46:	2001      	movs	r0, #1
 8000d48:	f001 fb78 	bl	800243c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Movement_Sensors_Pin);
 8000d54:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d58:	f001 fb70 	bl	800243c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000d64:	4802      	ldr	r0, [pc, #8]	@ (8000d70 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000d66:	f004 fa6c 	bl	8005242 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000168 	.word	0x20000168

08000d74 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d78:	4802      	ldr	r0, [pc, #8]	@ (8000d84 <TIM3_IRQHandler+0x10>)
 8000d7a:	f004 fa62 	bl	8005242 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200000d8 	.word	0x200000d8

08000d88 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d8c:	4802      	ldr	r0, [pc, #8]	@ (8000d98 <TIM4_IRQHandler+0x10>)
 8000d8e:	f004 fa58 	bl	8005242 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000120 	.word	0x20000120

08000d9c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000da0:	4802      	ldr	r0, [pc, #8]	@ (8000dac <I2C1_EV_IRQHandler+0x10>)
 8000da2:	f001 fdbb 	bl	800291c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000084 	.word	0x20000084

08000db0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000db4:	4802      	ldr	r0, [pc, #8]	@ (8000dc0 <I2C1_ER_IRQHandler+0x10>)
 8000db6:	f001 ff04 	bl	8002bc2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000084 	.word	0x20000084

08000dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <SystemInit+0x20>)
 8000dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dce:	4a05      	ldr	r2, [pc, #20]	@ (8000de4 <SystemInit+0x20>)
 8000dd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000de8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dec:	f7ff ffea 	bl	8000dc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df0:	480c      	ldr	r0, [pc, #48]	@ (8000e24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000df2:	490d      	ldr	r1, [pc, #52]	@ (8000e28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000df4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df8:	e002      	b.n	8000e00 <LoopCopyDataInit>

08000dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfe:	3304      	adds	r3, #4

08000e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e04:	d3f9      	bcc.n	8000dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e06:	4a0a      	ldr	r2, [pc, #40]	@ (8000e30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e08:	4c0a      	ldr	r4, [pc, #40]	@ (8000e34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e0c:	e001      	b.n	8000e12 <LoopFillZerobss>

08000e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e10:	3204      	adds	r2, #4

08000e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e14:	d3fb      	bcc.n	8000e0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e16:	f004 fda3 	bl	8005960 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1a:	f7ff fb99 	bl	8000550 <main>
  bx  lr    
 8000e1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e28:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000e2c:	08005a04 	.word	0x08005a04
  ldr r2, =_sbss
 8000e30:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000e34:	200001d4 	.word	0x200001d4

08000e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC_IRQHandler>

08000e3a <light_power_on>:
};

static uint8_t light_on = 0;
static uint8_t check_light_level = 0;

void light_power_on() {
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	af00      	add	r7, sp, #0
	if(light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER, SHUTDOWN_REGISTER, TURN_ON) == HAL_BUSY) {
 8000e3e:	2201      	movs	r2, #1
 8000e40:	210a      	movs	r1, #10
 8000e42:	200b      	movs	r0, #11
 8000e44:	f000 f9c2 	bl	80011cc <light_i2c_write_single_register>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d101      	bne.n	8000e52 <light_power_on+0x18>
		Error_Handler();
 8000e4e:	f7ff fe1b 	bl	8000a88 <Error_Handler>
	}
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <light_shutdown>:

void light_shutdown() {
 8000e56:	b580      	push	{r7, lr}
 8000e58:	af00      	add	r7, sp, #0
	if(light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER, SHUTDOWN_REGISTER, SHUTDOWN) == HAL_BUSY) {
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	210a      	movs	r1, #10
 8000e5e:	200b      	movs	r0, #11
 8000e60:	f000 f9b4 	bl	80011cc <light_i2c_write_single_register>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d101      	bne.n	8000e6e <light_shutdown+0x18>
		Error_Handler();
 8000e6a:	f7ff fe0d 	bl	8000a88 <Error_Handler>
	}
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <light_default_state>:

void light_default_state(uint8_t intensity) {
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	71fb      	strb	r3, [r7, #7]
	if (light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER,
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2100      	movs	r1, #0
 8000e80:	200b      	movs	r0, #11
 8000e82:	f000 f9a3 	bl	80011cc <light_i2c_write_single_register>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d101      	bne.n	8000e90 <light_default_state+0x1e>
			CONFIGURATION_REGISTER, PICTURE_MODE) == HAL_BUSY) {
		Error_Handler();
 8000e8c:	f7ff fdfc 	bl	8000a88 <Error_Handler>
	}
	if (light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER,
 8000e90:	2200      	movs	r2, #0
 8000e92:	2101      	movs	r1, #1
 8000e94:	200b      	movs	r0, #11
 8000e96:	f000 f999 	bl	80011cc <light_i2c_write_single_register>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d101      	bne.n	8000ea4 <light_default_state+0x32>
			PICTURE_DISPLAY_REGISTER, MATRIX_FRAME1) == HAL_BUSY) {
		Error_Handler();
 8000ea0:	f7ff fdf2 	bl	8000a88 <Error_Handler>
	}
	if (light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER,
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2105      	movs	r1, #5
 8000ea8:	200b      	movs	r0, #11
 8000eaa:	f000 f98f 	bl	80011cc <light_i2c_write_single_register>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d101      	bne.n	8000eb8 <light_default_state+0x46>
			DISPLAY_OPTION_REGISTER,
			DISPLAY_OPTIONS(INDEPENDENT_INTENSITY, BLINK_DISABLED, 0))
			== HAL_BUSY) {
		Error_Handler();
 8000eb4:	f7ff fde8 	bl	8000a88 <Error_Handler>
	}
	// setup frame1 to be all on but without outputting light
	light_turn_on_frame(MATRIX_FRAME1);
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f000 f847 	bl	8000f4c <light_turn_on_frame>
	light_set_intensity(MATRIX_FRAME1, intensity);
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f000 f86e 	bl	8000fa4 <light_set_intensity>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <light_init>:

void light_init() {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	light_default_state(DEFAULT_LIGHT_INTENSITY);
 8000ed4:	2064      	movs	r0, #100	@ 0x64
 8000ed6:	f7ff ffcc 	bl	8000e72 <light_default_state>
	light_turn_off_frame(MATRIX_FRAME1);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f000 f84c 	bl	8000f78 <light_turn_off_frame>

	// initialize frames 2-8 to have a smooth transition when someone is passing by
	light_turn_on_frame(MATRIX_FRAME2);
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f000 f833 	bl	8000f4c <light_turn_on_frame>
	light_turn_on_frame(MATRIX_FRAME3);
 8000ee6:	2002      	movs	r0, #2
 8000ee8:	f000 f830 	bl	8000f4c <light_turn_on_frame>
	light_turn_on_frame(MATRIX_FRAME4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 f82d 	bl	8000f4c <light_turn_on_frame>
	light_turn_on_frame(MATRIX_FRAME5);
 8000ef2:	2004      	movs	r0, #4
 8000ef4:	f000 f82a 	bl	8000f4c <light_turn_on_frame>
	light_turn_on_frame(MATRIX_FRAME6);
 8000ef8:	2005      	movs	r0, #5
 8000efa:	f000 f827 	bl	8000f4c <light_turn_on_frame>
	light_turn_on_frame(MATRIX_FRAME7);
 8000efe:	2006      	movs	r0, #6
 8000f00:	f000 f824 	bl	8000f4c <light_turn_on_frame>
	light_turn_on_frame(MATRIX_FRAME8);
 8000f04:	2007      	movs	r0, #7
 8000f06:	f000 f821 	bl	8000f4c <light_turn_on_frame>
	light_set_intensity(MATRIX_FRAME2, 105);
 8000f0a:	2169      	movs	r1, #105	@ 0x69
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f000 f849 	bl	8000fa4 <light_set_intensity>
	light_set_intensity(MATRIX_FRAME3, 130);
 8000f12:	2182      	movs	r1, #130	@ 0x82
 8000f14:	2002      	movs	r0, #2
 8000f16:	f000 f845 	bl	8000fa4 <light_set_intensity>
	light_set_intensity(MATRIX_FRAME4, 155);
 8000f1a:	219b      	movs	r1, #155	@ 0x9b
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f000 f841 	bl	8000fa4 <light_set_intensity>
	light_set_intensity(MATRIX_FRAME5, 180);
 8000f22:	21b4      	movs	r1, #180	@ 0xb4
 8000f24:	2004      	movs	r0, #4
 8000f26:	f000 f83d 	bl	8000fa4 <light_set_intensity>
	light_set_intensity(MATRIX_FRAME6, 205);
 8000f2a:	21cd      	movs	r1, #205	@ 0xcd
 8000f2c:	2005      	movs	r0, #5
 8000f2e:	f000 f839 	bl	8000fa4 <light_set_intensity>
	light_set_intensity(MATRIX_FRAME7, 230);
 8000f32:	21e6      	movs	r1, #230	@ 0xe6
 8000f34:	2006      	movs	r0, #6
 8000f36:	f000 f835 	bl	8000fa4 <light_set_intensity>
	light_set_intensity(MATRIX_FRAME8, MAX_LIGHT_INTENSITY);
 8000f3a:	21ff      	movs	r1, #255	@ 0xff
 8000f3c:	2007      	movs	r0, #7
 8000f3e:	f000 f831 	bl	8000fa4 <light_set_intensity>
	light_power_on();
 8000f42:	f7ff ff7a 	bl	8000e3a <light_power_on>
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <light_turn_on_frame>:

void light_turn_on_frame(uint8_t frame) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
	if(light_i2c_send_data(frame, LED_CONTROL_START, all_on, sizeof(all_on)) == HAL_BUSY) {
 8000f56:	79f8      	ldrb	r0, [r7, #7]
 8000f58:	2312      	movs	r3, #18
 8000f5a:	4a06      	ldr	r2, [pc, #24]	@ (8000f74 <light_turn_on_frame+0x28>)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	f000 f95d 	bl	800121c <light_i2c_send_data>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d101      	bne.n	8000f6c <light_turn_on_frame+0x20>
			Error_Handler();
 8000f68:	f7ff fd8e 	bl	8000a88 <Error_Handler>
	}
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000004 	.word	0x20000004

08000f78 <light_turn_off_frame>:

void light_turn_off_frame(uint8_t frame) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
	if(light_i2c_send_data(MATRIX_FRAME1, LED_CONTROL_START, all_off, sizeof(all_off)) == HAL_BUSY) {
 8000f82:	2312      	movs	r3, #18
 8000f84:	4a06      	ldr	r2, [pc, #24]	@ (8000fa0 <light_turn_off_frame+0x28>)
 8000f86:	2100      	movs	r1, #0
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f000 f947 	bl	800121c <light_i2c_send_data>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d101      	bne.n	8000f98 <light_turn_off_frame+0x20>
		Error_Handler();
 8000f94:	f7ff fd78 	bl	8000a88 <Error_Handler>
	}
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200001b0 	.word	0x200001b0

08000fa4 <light_set_intensity>:

void light_set_intensity(uint8_t frame, uint8_t intensity) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b0a6      	sub	sp, #152	@ 0x98
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	460a      	mov	r2, r1
 8000fae:	71fb      	strb	r3, [r7, #7]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	71bb      	strb	r3, [r7, #6]
	if(intensity <= MAX_LIGHT_INTENSITY) {
		uint8_t pwm[144];
		memset(pwm, intensity, 144);
 8000fb4:	79b9      	ldrb	r1, [r7, #6]
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	2290      	movs	r2, #144	@ 0x90
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f004 fcc7 	bl	8005950 <memset>
		light_i2c_send_data(frame, PWM_CONTROL_START, pwm, sizeof(pwm));
 8000fc2:	f107 0208 	add.w	r2, r7, #8
 8000fc6:	79f8      	ldrb	r0, [r7, #7]
 8000fc8:	2390      	movs	r3, #144	@ 0x90
 8000fca:	2124      	movs	r1, #36	@ 0x24
 8000fcc:	f000 f926 	bl	800121c <light_i2c_send_data>
	}
}
 8000fd0:	bf00      	nop
 8000fd2:	3798      	adds	r7, #152	@ 0x98
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <light_transition_to_max>:

void light_transition_to_max() {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	light_shutdown();
 8000fdc:	f7ff ff3b 	bl	8000e56 <light_shutdown>
	// enable auto play mode
	if(light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER, CONFIGURATION_REGISTER, AUTOPLAY_MODE(AUTOFRAME_MODE, MATRIX_FRAME1)) == HAL_BUSY) {
 8000fe0:	2208      	movs	r2, #8
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	200b      	movs	r0, #11
 8000fe6:	f000 f8f1 	bl	80011cc <light_i2c_write_single_register>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d101      	bne.n	8000ff4 <light_transition_to_max+0x1c>
		Error_Handler();
 8000ff0:	f7ff fd4a 	bl	8000a88 <Error_Handler>
	}
	// set number of loops
	if(light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER, AUTOPLAY_CONTROL_REGISTER1, AUTOPLAY_MODE_CONFIG(LOOPS_FRAMES1, LOOPS_FRAMES7)) == HAL_BUSY) {
 8000ff4:	2217      	movs	r2, #23
 8000ff6:	2102      	movs	r1, #2
 8000ff8:	200b      	movs	r0, #11
 8000ffa:	f000 f8e7 	bl	80011cc <light_i2c_write_single_register>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b02      	cmp	r3, #2
 8001002:	d101      	bne.n	8001008 <light_transition_to_max+0x30>
		Error_Handler();
 8001004:	f7ff fd40 	bl	8000a88 <Error_Handler>
	}
	// setup loop delay
	if(light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER, AUTOPLAY_CONTROL_REGISTER2, AUTOPLAY_DELAY_CONFIG(30)) == HAL_BUSY) { // ~330 ms per step
 8001008:	221e      	movs	r2, #30
 800100a:	2103      	movs	r1, #3
 800100c:	200b      	movs	r0, #11
 800100e:	f000 f8dd 	bl	80011cc <light_i2c_write_single_register>
 8001012:	4603      	mov	r3, r0
 8001014:	2b02      	cmp	r3, #2
 8001016:	d101      	bne.n	800101c <light_transition_to_max+0x44>
		Error_Handler();
 8001018:	f7ff fd36 	bl	8000a88 <Error_Handler>
	}
	light_power_on();
 800101c:	f7ff ff0d 	bl	8000e3a <light_power_on>
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}

08001024 <light_activate>:

uint8_t light_is_on() {
	return light_on;
}

void light_activate() {
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	light_on = 1;
 8001028:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <light_activate+0x30>)
 800102a:	2201      	movs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
	sensors_light_sensor_start();
 800102e:	f000 fa77 	bl	8001520 <sensors_light_sensor_start>
	check_light_level = 1;
 8001032:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <light_activate+0x34>)
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]
	htim4.Instance->SR &= ~TIM_SR_UIF;
 8001038:	4b08      	ldr	r3, [pc, #32]	@ (800105c <light_activate+0x38>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	691a      	ldr	r2, [r3, #16]
 800103e:	4b07      	ldr	r3, [pc, #28]	@ (800105c <light_activate+0x38>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 0201 	bic.w	r2, r2, #1
 8001046:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim4);
 8001048:	4804      	ldr	r0, [pc, #16]	@ (800105c <light_activate+0x38>)
 800104a:	f004 f869 	bl	8005120 <HAL_TIM_Base_Start_IT>
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200001c2 	.word	0x200001c2
 8001058:	200001c3 	.word	0x200001c3
 800105c:	20000120 	.word	0x20000120

08001060 <light_level_check>:
void light_deactivate() {
	light_on = 0;
	HAL_TIM_Base_Stop_IT(&htim4);
}

void light_level_check() {
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
	check_light_level = 1;
 8001064:	4b03      	ldr	r3, [pc, #12]	@ (8001074 <light_level_check+0x14>)
 8001066:	2201      	movs	r2, #1
 8001068:	701a      	strb	r2, [r3, #0]
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	200001c3 	.word	0x200001c3

08001078 <light_main>:

void light_main() {
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
	static uint8_t default_state = 1;
	static uint8_t current_light = 0;
	static uint8_t movement_detection_reacted = 0;
	if(light_on) {
 800107e:	4b40      	ldr	r3, [pc, #256]	@ (8001180 <light_main+0x108>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d078      	beq.n	8001178 <light_main+0x100>
		if(sensors_movement_is_detected()) {
 8001086:	f000 fa63 	bl	8001550 <sensors_movement_is_detected>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d026      	beq.n	80010de <light_main+0x66>
			if(!movement_detection_reacted) {
 8001090:	4b3c      	ldr	r3, [pc, #240]	@ (8001184 <light_main+0x10c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d110      	bne.n	80010ba <light_main+0x42>
				light_transition_to_max();
 8001098:	f7ff ff9e 	bl	8000fd8 <light_transition_to_max>
				movement_detection_reacted = 1;
 800109c:	4b39      	ldr	r3, [pc, #228]	@ (8001184 <light_main+0x10c>)
 800109e:	2201      	movs	r2, #1
 80010a0:	701a      	strb	r2, [r3, #0]
				htim9.Instance->SR &= ~TIM_SR_UIF;
 80010a2:	4b39      	ldr	r3, [pc, #228]	@ (8001188 <light_main+0x110>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	691a      	ldr	r2, [r3, #16]
 80010a8:	4b37      	ldr	r3, [pc, #220]	@ (8001188 <light_main+0x110>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f022 0201 	bic.w	r2, r2, #1
 80010b0:	611a      	str	r2, [r3, #16]
				HAL_TIM_Base_Start_IT(&htim9);
 80010b2:	4835      	ldr	r0, [pc, #212]	@ (8001188 <light_main+0x110>)
 80010b4:	f004 f834 	bl	8005120 <HAL_TIM_Base_Start_IT>
 80010b8:	e00d      	b.n	80010d6 <light_main+0x5e>
			} else { // reset the timer
				HAL_TIM_Base_Stop_IT(&htim9);
 80010ba:	4833      	ldr	r0, [pc, #204]	@ (8001188 <light_main+0x110>)
 80010bc:	f004 f892 	bl	80051e4 <HAL_TIM_Base_Stop_IT>
				htim9.Instance->SR &= ~TIM_SR_UIF;
 80010c0:	4b31      	ldr	r3, [pc, #196]	@ (8001188 <light_main+0x110>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	691a      	ldr	r2, [r3, #16]
 80010c6:	4b30      	ldr	r3, [pc, #192]	@ (8001188 <light_main+0x110>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 0201 	bic.w	r2, r2, #1
 80010ce:	611a      	str	r2, [r3, #16]
				HAL_TIM_Base_Start_IT(&htim9);
 80010d0:	482d      	ldr	r0, [pc, #180]	@ (8001188 <light_main+0x110>)
 80010d2:	f004 f825 	bl	8005120 <HAL_TIM_Base_Start_IT>
			}
			default_state = 0;
 80010d6:	4b2d      	ldr	r3, [pc, #180]	@ (800118c <light_main+0x114>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
				light_set_current_intensity(current_light);
			}
			movement_detection_reacted = 0;
		}
	}
}
 80010dc:	e04c      	b.n	8001178 <light_main+0x100>
			if(check_light_level){
 80010de:	4b2c      	ldr	r3, [pc, #176]	@ (8001190 <light_main+0x118>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d032      	beq.n	800114c <light_main+0xd4>
				uint32_t ambient_light = sensors_light_get_ambient_light_level();
 80010e6:	f000 f9f7 	bl	80014d8 <sensors_light_get_ambient_light_level>
 80010ea:	6078      	str	r0, [r7, #4]
				if(ambient_light <= 500) {
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80010f2:	d803      	bhi.n	80010fc <light_main+0x84>
					current_light = DEFAULT_LIGHT_INTENSITY;
 80010f4:	4b27      	ldr	r3, [pc, #156]	@ (8001194 <light_main+0x11c>)
 80010f6:	2264      	movs	r2, #100	@ 0x64
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	e024      	b.n	8001146 <light_main+0xce>
				} else if (ambient_light <= 1000) {
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001102:	d803      	bhi.n	800110c <light_main+0x94>
					current_light = 80;
 8001104:	4b23      	ldr	r3, [pc, #140]	@ (8001194 <light_main+0x11c>)
 8001106:	2250      	movs	r2, #80	@ 0x50
 8001108:	701a      	strb	r2, [r3, #0]
 800110a:	e01c      	b.n	8001146 <light_main+0xce>
				} else if (ambient_light <= 1500) {
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001112:	4293      	cmp	r3, r2
 8001114:	d803      	bhi.n	800111e <light_main+0xa6>
					current_light = 60;
 8001116:	4b1f      	ldr	r3, [pc, #124]	@ (8001194 <light_main+0x11c>)
 8001118:	223c      	movs	r2, #60	@ 0x3c
 800111a:	701a      	strb	r2, [r3, #0]
 800111c:	e013      	b.n	8001146 <light_main+0xce>
				} else if (ambient_light <= 2000) {
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001124:	d803      	bhi.n	800112e <light_main+0xb6>
					current_light = 40;
 8001126:	4b1b      	ldr	r3, [pc, #108]	@ (8001194 <light_main+0x11c>)
 8001128:	2228      	movs	r2, #40	@ 0x28
 800112a:	701a      	strb	r2, [r3, #0]
 800112c:	e00b      	b.n	8001146 <light_main+0xce>
				} else if (ambient_light <= 2500) {
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001134:	4293      	cmp	r3, r2
 8001136:	d803      	bhi.n	8001140 <light_main+0xc8>
					current_light = 20;
 8001138:	4b16      	ldr	r3, [pc, #88]	@ (8001194 <light_main+0x11c>)
 800113a:	2214      	movs	r2, #20
 800113c:	701a      	strb	r2, [r3, #0]
 800113e:	e002      	b.n	8001146 <light_main+0xce>
					current_light = 10;
 8001140:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <light_main+0x11c>)
 8001142:	220a      	movs	r2, #10
 8001144:	701a      	strb	r2, [r3, #0]
				check_light_level = 0;
 8001146:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <light_main+0x118>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
			if(!default_state) {
 800114c:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <light_main+0x114>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d108      	bne.n	8001166 <light_main+0xee>
				light_default_state(current_light);
 8001154:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <light_main+0x11c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fe8a 	bl	8000e72 <light_default_state>
				default_state = 1;
 800115e:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <light_main+0x114>)
 8001160:	2201      	movs	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]
 8001164:	e005      	b.n	8001172 <light_main+0xfa>
				light_set_current_intensity(current_light);
 8001166:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <light_main+0x11c>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	4619      	mov	r1, r3
 800116c:	2000      	movs	r0, #0
 800116e:	f7ff ff19 	bl	8000fa4 <light_set_intensity>
			movement_detection_reacted = 0;
 8001172:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <light_main+0x10c>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200001c2 	.word	0x200001c2
 8001184:	200001c4 	.word	0x200001c4
 8001188:	20000168 	.word	0x20000168
 800118c:	20000016 	.word	0x20000016
 8001190:	200001c3 	.word	0x200001c3
 8001194:	200001c5 	.word	0x200001c5

08001198 <light_i2c_select_page>:
#include <stdint.h>
#include <string.h>
#include "light_i2c.h"
#include "stm32f4xx_hal.h"

HAL_StatusTypeDef light_i2c_select_page(uint8_t page) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af02      	add	r7, sp, #8
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2] = {COMMAND_REGISTER, page};
 80011a2:	23fd      	movs	r3, #253	@ 0xfd
 80011a4:	733b      	strb	r3, [r7, #12]
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(LIGHT_I2C_INTERFACE, LIGHT_MATRIX_ADDR, data, 2, 100);
 80011aa:	f107 020c 	add.w	r2, r7, #12
 80011ae:	2364      	movs	r3, #100	@ 0x64
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2302      	movs	r3, #2
 80011b4:	21e8      	movs	r1, #232	@ 0xe8
 80011b6:	4804      	ldr	r0, [pc, #16]	@ (80011c8 <light_i2c_select_page+0x30>)
 80011b8:	f001 fab2 	bl	8002720 <HAL_I2C_Master_Transmit>
 80011bc:	4603      	mov	r3, r0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000084 	.word	0x20000084

080011cc <light_i2c_write_single_register>:

HAL_StatusTypeDef light_i2c_write_single_register(uint8_t page, uint8_t reg, uint8_t value) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af02      	add	r7, sp, #8
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
 80011d6:	460b      	mov	r3, r1
 80011d8:	71bb      	strb	r3, [r7, #6]
 80011da:	4613      	mov	r3, r2
 80011dc:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef page_selected = light_i2c_select_page(page);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ffd9 	bl	8001198 <light_i2c_select_page>
 80011e6:	4603      	mov	r3, r0
 80011e8:	73fb      	strb	r3, [r7, #15]
	if(page_selected != HAL_BUSY) {
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d00e      	beq.n	800120e <light_i2c_write_single_register+0x42>
		uint8_t data[2] = {reg, value};
 80011f0:	79bb      	ldrb	r3, [r7, #6]
 80011f2:	733b      	strb	r3, [r7, #12]
 80011f4:	797b      	ldrb	r3, [r7, #5]
 80011f6:	737b      	strb	r3, [r7, #13]
		return HAL_I2C_Master_Transmit(LIGHT_I2C_INTERFACE, LIGHT_MATRIX_ADDR, data, 2, 100);
 80011f8:	f107 020c 	add.w	r2, r7, #12
 80011fc:	2364      	movs	r3, #100	@ 0x64
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2302      	movs	r3, #2
 8001202:	21e8      	movs	r1, #232	@ 0xe8
 8001204:	4804      	ldr	r0, [pc, #16]	@ (8001218 <light_i2c_write_single_register+0x4c>)
 8001206:	f001 fa8b 	bl	8002720 <HAL_I2C_Master_Transmit>
 800120a:	4603      	mov	r3, r0
 800120c:	e000      	b.n	8001210 <light_i2c_write_single_register+0x44>
	}
	return page_selected;
 800120e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000084 	.word	0x20000084

0800121c <light_i2c_send_data>:

HAL_StatusTypeDef light_i2c_send_data(uint8_t page, uint8_t reg, uint8_t *data, uint8_t data_len) {
 800121c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001220:	b089      	sub	sp, #36	@ 0x24
 8001222:	af02      	add	r7, sp, #8
 8001224:	603a      	str	r2, [r7, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	4603      	mov	r3, r0
 800122a:	71fb      	strb	r3, [r7, #7]
 800122c:	460b      	mov	r3, r1
 800122e:	71bb      	strb	r3, [r7, #6]
 8001230:	4613      	mov	r3, r2
 8001232:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef page_selected = light_i2c_select_page(page);
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ffae 	bl	8001198 <light_i2c_select_page>
 800123c:	4603      	mov	r3, r0
 800123e:	75fb      	strb	r3, [r7, #23]
	if(page_selected != HAL_BUSY) {
 8001240:	7dfb      	ldrb	r3, [r7, #23]
 8001242:	2b02      	cmp	r3, #2
 8001244:	d040      	beq.n	80012c8 <light_i2c_send_data+0xac>
 8001246:	466b      	mov	r3, sp
 8001248:	461e      	mov	r6, r3
		uint8_t buff[data_len+1];
 800124a:	797b      	ldrb	r3, [r7, #5]
 800124c:	1c59      	adds	r1, r3, #1
 800124e:	1e4b      	subs	r3, r1, #1
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	460a      	mov	r2, r1
 8001254:	2300      	movs	r3, #0
 8001256:	4690      	mov	r8, r2
 8001258:	4699      	mov	r9, r3
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	f04f 0300 	mov.w	r3, #0
 8001262:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001266:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800126a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800126e:	460a      	mov	r2, r1
 8001270:	2300      	movs	r3, #0
 8001272:	4614      	mov	r4, r2
 8001274:	461d      	mov	r5, r3
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	f04f 0300 	mov.w	r3, #0
 800127e:	00eb      	lsls	r3, r5, #3
 8001280:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001284:	00e2      	lsls	r2, r4, #3
 8001286:	460b      	mov	r3, r1
 8001288:	3307      	adds	r3, #7
 800128a:	08db      	lsrs	r3, r3, #3
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	ebad 0d03 	sub.w	sp, sp, r3
 8001292:	ab02      	add	r3, sp, #8
 8001294:	3300      	adds	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
		buff[0] = reg;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	79ba      	ldrb	r2, [r7, #6]
 800129c:	701a      	strb	r2, [r3, #0]
		memcpy(buff+1, data, data_len);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	3301      	adds	r3, #1
 80012a2:	797a      	ldrb	r2, [r7, #5]
 80012a4:	6839      	ldr	r1, [r7, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f004 fb7e 	bl	80059a8 <memcpy>
		return HAL_I2C_Master_Transmit(LIGHT_I2C_INTERFACE, LIGHT_MATRIX_ADDR, buff, data_len + 1, 100);
 80012ac:	797b      	ldrb	r3, [r7, #5]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	3301      	adds	r3, #1
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	2264      	movs	r2, #100	@ 0x64
 80012b6:	9200      	str	r2, [sp, #0]
 80012b8:	68fa      	ldr	r2, [r7, #12]
 80012ba:	21e8      	movs	r1, #232	@ 0xe8
 80012bc:	4805      	ldr	r0, [pc, #20]	@ (80012d4 <light_i2c_send_data+0xb8>)
 80012be:	f001 fa2f 	bl	8002720 <HAL_I2C_Master_Transmit>
 80012c2:	4603      	mov	r3, r0
 80012c4:	46b5      	mov	sp, r6
 80012c6:	e000      	b.n	80012ca <light_i2c_send_data+0xae>
	}
	return page_selected;
 80012c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	371c      	adds	r7, #28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012d4:	20000084 	.word	0x20000084

080012d8 <panic_main>:

/*
 * @brief Main actions performed each main loop cycle by the panic module
 * @retval None
 */
void panic_main() {
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	if(panic_button_is_pressed()) {
 80012dc:	f000 f854 	bl	8001388 <panic_button_is_pressed>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d018      	beq.n	8001318 <panic_main+0x40>
		if(panic_buzzer_is_active()) { // panic_button pressed with buzzer active
 80012e6:	f000 f883 	bl	80013f0 <panic_buzzer_is_active>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d004      	beq.n	80012fa <panic_main+0x22>
			panic_buzzer_stop();
 80012f0:	f000 f86e 	bl	80013d0 <panic_buzzer_stop>
			panic_timer_stop();
 80012f4:	f000 f8b0 	bl	8001458 <panic_timer_stop>
			panic_timer_is_elapsed_reset();
		}
	} else {
		// do nothing
	}
}
 80012f8:	e02c      	b.n	8001354 <panic_main+0x7c>
		} else if(panic_timer_is_active()) { // panic_button pressed with timer active but buzzer inactive
 80012fa:	f000 f8bd 	bl	8001478 <panic_timer_is_active>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d002      	beq.n	800130a <panic_main+0x32>
			panic_timer_stop();
 8001304:	f000 f8a8 	bl	8001458 <panic_timer_stop>
}
 8001308:	e024      	b.n	8001354 <panic_main+0x7c>
			panic_timer_start();
 800130a:	f000 f895 	bl	8001438 <panic_timer_start>
			panic_buzzer_start();
 800130e:	f000 f847 	bl	80013a0 <panic_buzzer_start>
			panic_button_reset();
 8001312:	f000 f82d 	bl	8001370 <panic_button_reset>
}
 8001316:	e01d      	b.n	8001354 <panic_main+0x7c>
	} else if(panic_timer_is_active()) { // turn on and off the buzzer (normal mode)
 8001318:	f000 f8ae 	bl	8001478 <panic_timer_is_active>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d018      	beq.n	8001354 <panic_main+0x7c>
		if(panic_timer_is_elapsed()) {
 8001322:	f000 f8b5 	bl	8001490 <panic_timer_is_elapsed>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d013      	beq.n	8001354 <panic_main+0x7c>
			if(panic_buzzer_is_active()) {
 800132c:	f000 f860 	bl	80013f0 <panic_buzzer_is_active>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d002      	beq.n	800133c <panic_main+0x64>
				panic_buzzer_stop();
 8001336:	f000 f84b 	bl	80013d0 <panic_buzzer_stop>
 800133a:	e009      	b.n	8001350 <panic_main+0x78>
				if(panic_buzzer_get_counter() == 5) {
 800133c:	f000 f864 	bl	8001408 <panic_buzzer_get_counter>
 8001340:	4603      	mov	r3, r0
 8001342:	2b05      	cmp	r3, #5
 8001344:	d102      	bne.n	800134c <panic_main+0x74>
					panic_timer_stop();
 8001346:	f000 f887 	bl	8001458 <panic_timer_stop>
 800134a:	e001      	b.n	8001350 <panic_main+0x78>
					panic_buzzer_start();
 800134c:	f000 f828 	bl	80013a0 <panic_buzzer_start>
			panic_timer_is_elapsed_reset();
 8001350:	f000 f8b6 	bl	80014c0 <panic_timer_is_elapsed_reset>
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}

08001358 <panic_button_set>:
 * All this function does is setting the button_pressed global
 * variable to true to trigger the reaction of the other modules
 * that need this information
 * @retval None
 */
void panic_button_set() {
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
	panic_button_pressed = 1;
 800135c:	4b03      	ldr	r3, [pc, #12]	@ (800136c <panic_button_set+0x14>)
 800135e:	2201      	movs	r2, #1
 8001360:	701a      	strb	r2, [r3, #0]
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	200001c6 	.word	0x200001c6

08001370 <panic_button_reset>:
 * @brief This function is used to reset the panic button interrupt request variable, this means that the interrupt has been managed
 * This function resets the button_pressed global variable to stop
 * the panic procedure execution
 * @retval None
 */
void panic_button_reset() {
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
	panic_button_pressed = 0;
 8001374:	4b03      	ldr	r3, [pc, #12]	@ (8001384 <panic_button_reset+0x14>)
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	200001c6 	.word	0x200001c6

08001388 <panic_button_is_pressed>:

/*
 * @brief This function is used to check if an panic button interrupt has been triggered
 * @retval panic_button_pressed variable value which tells if an interrupt on button's EXTI line has been triggered
 */
uint8_t panic_button_is_pressed() {
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
	return panic_button_pressed;
 800138c:	4b03      	ldr	r3, [pc, #12]	@ (800139c <panic_button_is_pressed+0x14>)
 800138e:	781b      	ldrb	r3, [r3, #0]
}
 8001390:	4618      	mov	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	200001c6 	.word	0x200001c6

080013a0 <panic_buzzer_start>:
/*
 * @brief Starts the panic buzzer
 * This function is used to turn on the panic buzzer and make it sound
 * @retval None
 */
void panic_buzzer_start() {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PANIC_BUZZER, GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	2180      	movs	r1, #128	@ 0x80
 80013a8:	4806      	ldr	r0, [pc, #24]	@ (80013c4 <panic_buzzer_start+0x24>)
 80013aa:	f001 f813 	bl	80023d4 <HAL_GPIO_WritePin>
	panic_buzzer_active = 1;
 80013ae:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <panic_buzzer_start+0x28>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	701a      	strb	r2, [r3, #0]
	panic_buzzer_counter++;
 80013b4:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <panic_buzzer_start+0x2c>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	3301      	adds	r3, #1
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	4b03      	ldr	r3, [pc, #12]	@ (80013cc <panic_buzzer_start+0x2c>)
 80013be:	701a      	strb	r2, [r3, #0]
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40021000 	.word	0x40021000
 80013c8:	200001c7 	.word	0x200001c7
 80013cc:	200001c8 	.word	0x200001c8

080013d0 <panic_buzzer_stop>:
/*
 * @brief Stops the panic buzzer
 * This function is used to stop any sound make by the panic buzzer
 * @retval None
 */
void panic_buzzer_stop() {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PANIC_BUZZER, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2180      	movs	r1, #128	@ 0x80
 80013d8:	4803      	ldr	r0, [pc, #12]	@ (80013e8 <panic_buzzer_stop+0x18>)
 80013da:	f000 fffb 	bl	80023d4 <HAL_GPIO_WritePin>
	panic_buzzer_active = 0;
 80013de:	4b03      	ldr	r3, [pc, #12]	@ (80013ec <panic_buzzer_stop+0x1c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40021000 	.word	0x40021000
 80013ec:	200001c7 	.word	0x200001c7

080013f0 <panic_buzzer_is_active>:
/*
 * @brief Yells the panic buzzer status
 * This function is a getter for the panic_buzzer_active variable
 * @retval the panic_buzzer_active current value
 */
uint8_t panic_buzzer_is_active() {
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
	return panic_buzzer_active;
 80013f4:	4b03      	ldr	r3, [pc, #12]	@ (8001404 <panic_buzzer_is_active+0x14>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	200001c7 	.word	0x200001c7

08001408 <panic_buzzer_get_counter>:
/*
 * @brief Yells how many times the buzzer has been activated
 * This function is a getter for the panic_buzzer_counter variable
 * @retval the panic_buzzer_counter current value
 */
uint8_t panic_buzzer_get_counter() {
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
	return panic_buzzer_counter;
 800140c:	4b03      	ldr	r3, [pc, #12]	@ (800141c <panic_buzzer_get_counter+0x14>)
 800140e:	781b      	ldrb	r3, [r3, #0]
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	200001c8 	.word	0x200001c8

08001420 <panic_buzzer_reset_counter>:
 * @brief Sets the panic buzzer counter to 0
 * This function resets the panic_buzzer_counter to zero, this is used to restart the emergency sound sequence
 * a complete sequence lasts 5 sounds.
 * @retval None
 */
void panic_buzzer_reset_counter() {
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
	panic_buzzer_counter = 0;
 8001424:	4b03      	ldr	r3, [pc, #12]	@ (8001434 <panic_buzzer_reset_counter+0x14>)
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	200001c8 	.word	0x200001c8

08001438 <panic_timer_start>:
/*
 * @brief This function make the panic timer start
 * All this function does is making the panic timer start and activate its interrupt triggering
 * @retval None
 */
void panic_timer_start() {
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(PANIC_TIMER);
 800143c:	4804      	ldr	r0, [pc, #16]	@ (8001450 <panic_timer_start+0x18>)
 800143e:	f003 fe6f 	bl	8005120 <HAL_TIM_Base_Start_IT>
	timer_active = 1;
 8001442:	4b04      	ldr	r3, [pc, #16]	@ (8001454 <panic_timer_start+0x1c>)
 8001444:	2201      	movs	r2, #1
 8001446:	701a      	strb	r2, [r3, #0]
	panic_buzzer_reset_counter();
 8001448:	f7ff ffea 	bl	8001420 <panic_buzzer_reset_counter>
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200000d8 	.word	0x200000d8
 8001454:	200001c9 	.word	0x200001c9

08001458 <panic_timer_stop>:
/*
 * @brief This function makes the panic timer stop
 * All this function does is making the panic timer stop and deactivates timer's interrupt triggering
 * @retval None
 */
void panic_timer_stop() {
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(PANIC_TIMER);
 800145c:	4804      	ldr	r0, [pc, #16]	@ (8001470 <panic_timer_stop+0x18>)
 800145e:	f003 fec1 	bl	80051e4 <HAL_TIM_Base_Stop_IT>
	timer_active = 0;
 8001462:	4b04      	ldr	r3, [pc, #16]	@ (8001474 <panic_timer_stop+0x1c>)
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
	panic_buzzer_reset_counter();
 8001468:	f7ff ffda 	bl	8001420 <panic_buzzer_reset_counter>
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	200000d8 	.word	0x200000d8
 8001474:	200001c9 	.word	0x200001c9

08001478 <panic_timer_is_active>:

/*
 * @brief Yells if the panic timer is active
 * @retval panic_timer_active variable value
 */
uint8_t panic_timer_is_active() {
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
	return timer_active;
 800147c:	4b03      	ldr	r3, [pc, #12]	@ (800148c <panic_timer_is_active+0x14>)
 800147e:	781b      	ldrb	r3, [r3, #0]
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	200001c9 	.word	0x200001c9

08001490 <panic_timer_is_elapsed>:

/*
 * @brief Tells if a interrupt request has been triggered by timer elapsed event
 * @retval panic_timer_elapsed variable value
 */
uint8_t panic_timer_is_elapsed() {
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
	return timer_elapsed;
 8001494:	4b03      	ldr	r3, [pc, #12]	@ (80014a4 <panic_timer_is_elapsed+0x14>)
 8001496:	781b      	ldrb	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	200001ca 	.word	0x200001ca

080014a8 <panic_timer_elapsed>:

void panic_timer_elapsed() {
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
	timer_elapsed = 1;
 80014ac:	4b03      	ldr	r3, [pc, #12]	@ (80014bc <panic_timer_elapsed+0x14>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	701a      	strb	r2, [r3, #0]
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	200001ca 	.word	0x200001ca

080014c0 <panic_timer_is_elapsed_reset>:
/*
 * @brief Resets the panic_timer_elapsed variable
 * This function sets panic_timer_elapsed variable back to 0 meaning that the interrupt request has been managed
 * @retval None
 */
void panic_timer_is_elapsed_reset() {
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
	timer_elapsed = 0;
 80014c4:	4b03      	ldr	r3, [pc, #12]	@ (80014d4 <panic_timer_is_elapsed_reset+0x14>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	200001ca 	.word	0x200001ca

080014d8 <sensors_light_get_ambient_light_level>:

/*
 * @brief Reads current ambient light level from the sensor
 * @retval current ambient light level
 */
uint32_t sensors_light_get_ambient_light_level() {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
	uint32_t ambient_light = SENSORS_LIGHT_SENSOR_INACTIVE;
 80014de:	f04f 3311 	mov.w	r3, #286331153	@ 0x11111111
 80014e2:	607b      	str	r3, [r7, #4]
	if(light_sensor_active) {
 80014e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001518 <sensors_light_get_ambient_light_level+0x40>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d010      	beq.n	800150e <sensors_light_get_ambient_light_level+0x36>
		HAL_ADC_Start(SENSORS_LIGHT_SENSOR_ADC);
 80014ec:	480b      	ldr	r0, [pc, #44]	@ (800151c <sensors_light_get_ambient_light_level+0x44>)
 80014ee:	f000 f8fd 	bl	80016ec <HAL_ADC_Start>
		if(HAL_ADC_PollForConversion(SENSORS_LIGHT_SENSOR_ADC, 10) == HAL_OK) {
 80014f2:	210a      	movs	r1, #10
 80014f4:	4809      	ldr	r0, [pc, #36]	@ (800151c <sensors_light_get_ambient_light_level+0x44>)
 80014f6:	f000 f9e0 	bl	80018ba <HAL_ADC_PollForConversion>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d106      	bne.n	800150e <sensors_light_get_ambient_light_level+0x36>
			ambient_light = HAL_ADC_GetValue(SENSORS_LIGHT_SENSOR_ADC);
 8001500:	4806      	ldr	r0, [pc, #24]	@ (800151c <sensors_light_get_ambient_light_level+0x44>)
 8001502:	f000 fa65 	bl	80019d0 <HAL_ADC_GetValue>
 8001506:	6078      	str	r0, [r7, #4]
			HAL_ADC_Stop(SENSORS_LIGHT_SENSOR_ADC);
 8001508:	4804      	ldr	r0, [pc, #16]	@ (800151c <sensors_light_get_ambient_light_level+0x44>)
 800150a:	f000 f9a3 	bl	8001854 <HAL_ADC_Stop>
		}
	}
	return ambient_light;
 800150e:	687b      	ldr	r3, [r7, #4]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	200001cb 	.word	0x200001cb
 800151c:	2000003c 	.word	0x2000003c

08001520 <sensors_light_sensor_start>:

/*
 * @brief Sets the light_sensor_active variable to 1 telling that it is possible to check the light intensity value
 * @retval None
 */
void sensors_light_sensor_start() {
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
	light_sensor_active = 1;
 8001524:	4b03      	ldr	r3, [pc, #12]	@ (8001534 <sensors_light_sensor_start+0x14>)
 8001526:	2201      	movs	r2, #1
 8001528:	701a      	strb	r2, [r3, #0]
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	200001cb 	.word	0x200001cb

08001538 <sensors_movement_detected>:
 * @brief Routine executed when movement is detected
 * This function sets the movement_sensor_detected variable to 1 to trigger
 * a reaction to the interrupted generated by the movement detection
 * @retval None
 */
void sensors_movement_detected() {
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
	movement_sensor_detected = 1;
 800153c:	4b03      	ldr	r3, [pc, #12]	@ (800154c <sensors_movement_detected+0x14>)
 800153e:	2201      	movs	r2, #1
 8001540:	701a      	strb	r2, [r3, #0]
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	200001cc 	.word	0x200001cc

08001550 <sensors_movement_is_detected>:
/*
 * @brief Yells the movement_sensor_detected variable value
 * This function is used to check if there has been any movement
 * @retval movement_sensor_detected current value
 */
uint8_t sensors_movement_is_detected() {
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
	return movement_sensor_detected;
 8001554:	4b03      	ldr	r3, [pc, #12]	@ (8001564 <sensors_movement_is_detected+0x14>)
 8001556:	781b      	ldrb	r3, [r3, #0]
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	200001cc 	.word	0x200001cc

08001568 <sensors_movement_detected_reset>:
 * @brief Resets movement_sensor_detected to 0
 * This function is used to tell that the interrupt has been correctly served
 * by resetting the associated variable
 * @retval None
 */
void sensors_movement_detected_reset() {
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
	movement_sensor_detected = 0;
 800156c:	4b03      	ldr	r3, [pc, #12]	@ (800157c <sensors_movement_detected_reset+0x14>)
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	200001cc 	.word	0x200001cc

08001580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001584:	4b0e      	ldr	r3, [pc, #56]	@ (80015c0 <HAL_Init+0x40>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0d      	ldr	r2, [pc, #52]	@ (80015c0 <HAL_Init+0x40>)
 800158a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800158e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001590:	4b0b      	ldr	r3, [pc, #44]	@ (80015c0 <HAL_Init+0x40>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0a      	ldr	r2, [pc, #40]	@ (80015c0 <HAL_Init+0x40>)
 8001596:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800159a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800159c:	4b08      	ldr	r3, [pc, #32]	@ (80015c0 <HAL_Init+0x40>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a07      	ldr	r2, [pc, #28]	@ (80015c0 <HAL_Init+0x40>)
 80015a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a8:	2003      	movs	r0, #3
 80015aa:	f000 fd1d 	bl	8001fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ae:	2000      	movs	r0, #0
 80015b0:	f000 f808 	bl	80015c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b4:	f7ff fa6e 	bl	8000a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40023c00 	.word	0x40023c00

080015c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015cc:	4b12      	ldr	r3, [pc, #72]	@ (8001618 <HAL_InitTick+0x54>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b12      	ldr	r3, [pc, #72]	@ (800161c <HAL_InitTick+0x58>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4619      	mov	r1, r3
 80015d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015da:	fbb3 f3f1 	udiv	r3, r3, r1
 80015de:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 fd35 	bl	8002052 <HAL_SYSTICK_Config>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00e      	b.n	8001610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b0f      	cmp	r3, #15
 80015f6:	d80a      	bhi.n	800160e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f8:	2200      	movs	r2, #0
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f000 fcfd 	bl	8001ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001604:	4a06      	ldr	r2, [pc, #24]	@ (8001620 <HAL_InitTick+0x5c>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	e000      	b.n	8001610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000000 	.word	0x20000000
 800161c:	2000001c 	.word	0x2000001c
 8001620:	20000018 	.word	0x20000018

08001624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001628:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <HAL_IncTick+0x20>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <HAL_IncTick+0x24>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4413      	add	r3, r2
 8001634:	4a04      	ldr	r2, [pc, #16]	@ (8001648 <HAL_IncTick+0x24>)
 8001636:	6013      	str	r3, [r2, #0]
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	2000001c 	.word	0x2000001c
 8001648:	200001d0 	.word	0x200001d0

0800164c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return uwTick;
 8001650:	4b03      	ldr	r3, [pc, #12]	@ (8001660 <HAL_GetTick+0x14>)
 8001652:	681b      	ldr	r3, [r3, #0]
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	200001d0 	.word	0x200001d0

08001664 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800166c:	2300      	movs	r3, #0
 800166e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e033      	b.n	80016e2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167e:	2b00      	cmp	r3, #0
 8001680:	d109      	bne.n	8001696 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff fa2e 	bl	8000ae4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169a:	f003 0310 	and.w	r3, r3, #16
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d118      	bne.n	80016d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016aa:	f023 0302 	bic.w	r3, r3, #2
 80016ae:	f043 0202 	orr.w	r2, r3, #2
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 faca 	bl	8001c50 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c6:	f023 0303 	bic.w	r3, r3, #3
 80016ca:	f043 0201 	orr.w	r2, r3, #1
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80016d2:	e001      	b.n	80016d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d101      	bne.n	8001706 <HAL_ADC_Start+0x1a>
 8001702:	2302      	movs	r3, #2
 8001704:	e097      	b.n	8001836 <HAL_ADC_Start+0x14a>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b01      	cmp	r3, #1
 800171a:	d018      	beq.n	800174e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f042 0201 	orr.w	r2, r2, #1
 800172a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800172c:	4b45      	ldr	r3, [pc, #276]	@ (8001844 <HAL_ADC_Start+0x158>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a45      	ldr	r2, [pc, #276]	@ (8001848 <HAL_ADC_Start+0x15c>)
 8001732:	fba2 2303 	umull	r2, r3, r2, r3
 8001736:	0c9a      	lsrs	r2, r3, #18
 8001738:	4613      	mov	r3, r2
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4413      	add	r3, r2
 800173e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001740:	e002      	b.n	8001748 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	3b01      	subs	r3, #1
 8001746:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f9      	bne.n	8001742 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	2b01      	cmp	r3, #1
 800175a:	d15f      	bne.n	800181c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001760:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001764:	f023 0301 	bic.w	r3, r3, #1
 8001768:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800177a:	2b00      	cmp	r3, #0
 800177c:	d007      	beq.n	800178e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001782:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001786:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001792:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800179a:	d106      	bne.n	80017aa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a0:	f023 0206 	bic.w	r2, r3, #6
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	645a      	str	r2, [r3, #68]	@ 0x44
 80017a8:	e002      	b.n	80017b0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017b8:	4b24      	ldr	r3, [pc, #144]	@ (800184c <HAL_ADC_Start+0x160>)
 80017ba:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80017c4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 031f 	and.w	r3, r3, #31
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10f      	bne.n	80017f2 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d129      	bne.n	8001834 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	e020      	b.n	8001834 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a16      	ldr	r2, [pc, #88]	@ (8001850 <HAL_ADC_Start+0x164>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d11b      	bne.n	8001834 <HAL_ADC_Start+0x148>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d114      	bne.n	8001834 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	e00b      	b.n	8001834 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001820:	f043 0210 	orr.w	r2, r3, #16
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182c:	f043 0201 	orr.w	r2, r3, #1
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000000 	.word	0x20000000
 8001848:	431bde83 	.word	0x431bde83
 800184c:	40012300 	.word	0x40012300
 8001850:	40012000 	.word	0x40012000

08001854 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001862:	2b01      	cmp	r3, #1
 8001864:	d101      	bne.n	800186a <HAL_ADC_Stop+0x16>
 8001866:	2302      	movs	r3, #2
 8001868:	e021      	b.n	80018ae <HAL_ADC_Stop+0x5a>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0201 	bic.w	r2, r2, #1
 8001880:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b00      	cmp	r3, #0
 800188e:	d109      	bne.n	80018a4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001894:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001898:	f023 0301 	bic.w	r3, r3, #1
 800189c:	f043 0201 	orr.w	r2, r3, #1
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b084      	sub	sp, #16
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018d6:	d113      	bne.n	8001900 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80018e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018e6:	d10b      	bne.n	8001900 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ec:	f043 0220 	orr.w	r2, r3, #32
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e063      	b.n	80019c8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001900:	f7ff fea4 	bl	800164c <HAL_GetTick>
 8001904:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001906:	e021      	b.n	800194c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190e:	d01d      	beq.n	800194c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d007      	beq.n	8001926 <HAL_ADC_PollForConversion+0x6c>
 8001916:	f7ff fe99 	bl	800164c <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d212      	bcs.n	800194c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b02      	cmp	r3, #2
 8001932:	d00b      	beq.n	800194c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001938:	f043 0204 	orr.w	r2, r3, #4
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e03d      	b.n	80019c8 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b02      	cmp	r3, #2
 8001958:	d1d6      	bne.n	8001908 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f06f 0212 	mvn.w	r2, #18
 8001962:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001968:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d123      	bne.n	80019c6 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001982:	2b00      	cmp	r3, #0
 8001984:	d11f      	bne.n	80019c6 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800198c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001990:	2b00      	cmp	r3, #0
 8001992:	d006      	beq.n	80019a2 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d111      	bne.n	80019c6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d105      	bne.n	80019c6 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019be:	f043 0201 	orr.w	r2, r3, #1
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80019de:	4618      	mov	r0, r3
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d101      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x1c>
 8001a04:	2302      	movs	r3, #2
 8001a06:	e113      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x244>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b09      	cmp	r3, #9
 8001a16:	d925      	bls.n	8001a64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68d9      	ldr	r1, [r3, #12]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	461a      	mov	r2, r3
 8001a26:	4613      	mov	r3, r2
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3b1e      	subs	r3, #30
 8001a2e:	2207      	movs	r2, #7
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43da      	mvns	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	400a      	ands	r2, r1
 8001a3c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68d9      	ldr	r1, [r3, #12]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	4618      	mov	r0, r3
 8001a50:	4603      	mov	r3, r0
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4403      	add	r3, r0
 8001a56:	3b1e      	subs	r3, #30
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	e022      	b.n	8001aaa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6919      	ldr	r1, [r3, #16]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	461a      	mov	r2, r3
 8001a72:	4613      	mov	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	4413      	add	r3, r2
 8001a78:	2207      	movs	r2, #7
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43da      	mvns	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	400a      	ands	r2, r1
 8001a86:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6919      	ldr	r1, [r3, #16]
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	4618      	mov	r0, r3
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4403      	add	r3, r0
 8001aa0:	409a      	lsls	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b06      	cmp	r3, #6
 8001ab0:	d824      	bhi.n	8001afc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3b05      	subs	r3, #5
 8001ac4:	221f      	movs	r2, #31
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43da      	mvns	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	3b05      	subs	r3, #5
 8001aee:	fa00 f203 	lsl.w	r2, r0, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001afa:	e04c      	b.n	8001b96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b0c      	cmp	r3, #12
 8001b02:	d824      	bhi.n	8001b4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	3b23      	subs	r3, #35	@ 0x23
 8001b16:	221f      	movs	r2, #31
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43da      	mvns	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	400a      	ands	r2, r1
 8001b24:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	4618      	mov	r0, r3
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3b23      	subs	r3, #35	@ 0x23
 8001b40:	fa00 f203 	lsl.w	r2, r0, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b4c:	e023      	b.n	8001b96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	3b41      	subs	r3, #65	@ 0x41
 8001b60:	221f      	movs	r2, #31
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43da      	mvns	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	400a      	ands	r2, r1
 8001b6e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	4613      	mov	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	3b41      	subs	r3, #65	@ 0x41
 8001b8a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b96:	4b29      	ldr	r3, [pc, #164]	@ (8001c3c <HAL_ADC_ConfigChannel+0x250>)
 8001b98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a28      	ldr	r2, [pc, #160]	@ (8001c40 <HAL_ADC_ConfigChannel+0x254>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d10f      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x1d8>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b12      	cmp	r3, #18
 8001baa:	d10b      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8001c40 <HAL_ADC_ConfigChannel+0x254>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d12b      	bne.n	8001c26 <HAL_ADC_ConfigChannel+0x23a>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a1c      	ldr	r2, [pc, #112]	@ (8001c44 <HAL_ADC_ConfigChannel+0x258>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d003      	beq.n	8001be0 <HAL_ADC_ConfigChannel+0x1f4>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b11      	cmp	r3, #17
 8001bde:	d122      	bne.n	8001c26 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a11      	ldr	r2, [pc, #68]	@ (8001c44 <HAL_ADC_ConfigChannel+0x258>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d111      	bne.n	8001c26 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c02:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <HAL_ADC_ConfigChannel+0x25c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a11      	ldr	r2, [pc, #68]	@ (8001c4c <HAL_ADC_ConfigChannel+0x260>)
 8001c08:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0c:	0c9a      	lsrs	r2, r3, #18
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c18:	e002      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f9      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	40012300 	.word	0x40012300
 8001c40:	40012000 	.word	0x40012000
 8001c44:	10000012 	.word	0x10000012
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	431bde83 	.word	0x431bde83

08001c50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c58:	4b79      	ldr	r3, [pc, #484]	@ (8001e40 <ADC_Init+0x1f0>)
 8001c5a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	431a      	orrs	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6859      	ldr	r1, [r3, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	021a      	lsls	r2, r3, #8
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ca8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6859      	ldr	r1, [r3, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6899      	ldr	r1, [r3, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce2:	4a58      	ldr	r2, [pc, #352]	@ (8001e44 <ADC_Init+0x1f4>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d022      	beq.n	8001d2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001cf6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6899      	ldr	r1, [r3, #8]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	430a      	orrs	r2, r1
 8001d08:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6899      	ldr	r1, [r3, #8]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	e00f      	b.n	8001d4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d4c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0202 	bic.w	r2, r2, #2
 8001d5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6899      	ldr	r1, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	7e1b      	ldrb	r3, [r3, #24]
 8001d68:	005a      	lsls	r2, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d01b      	beq.n	8001db4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d8a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001d9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6859      	ldr	r1, [r3, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da6:	3b01      	subs	r3, #1
 8001da8:	035a      	lsls	r2, r3, #13
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	e007      	b.n	8001dc4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dc2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001dd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	051a      	lsls	r2, r3, #20
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001df8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6899      	ldr	r1, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e06:	025a      	lsls	r2, r3, #9
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6899      	ldr	r1, [r3, #8]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	029a      	lsls	r2, r3, #10
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	609a      	str	r2, [r3, #8]
}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	40012300 	.word	0x40012300
 8001e44:	0f000001 	.word	0x0f000001

08001e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e58:	4b0c      	ldr	r3, [pc, #48]	@ (8001e8c <__NVIC_SetPriorityGrouping+0x44>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e64:	4013      	ands	r3, r2
 8001e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e7a:	4a04      	ldr	r2, [pc, #16]	@ (8001e8c <__NVIC_SetPriorityGrouping+0x44>)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	60d3      	str	r3, [r2, #12]
}
 8001e80:	bf00      	nop
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e94:	4b04      	ldr	r3, [pc, #16]	@ (8001ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	f003 0307 	and.w	r3, r3, #7
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	db0b      	blt.n	8001ed6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	f003 021f 	and.w	r2, r3, #31
 8001ec4:	4907      	ldr	r1, [pc, #28]	@ (8001ee4 <__NVIC_EnableIRQ+0x38>)
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	095b      	lsrs	r3, r3, #5
 8001ecc:	2001      	movs	r0, #1
 8001ece:	fa00 f202 	lsl.w	r2, r0, r2
 8001ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000e100 	.word	0xe000e100

08001ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	6039      	str	r1, [r7, #0]
 8001ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	db0a      	blt.n	8001f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	490c      	ldr	r1, [pc, #48]	@ (8001f34 <__NVIC_SetPriority+0x4c>)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	0112      	lsls	r2, r2, #4
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f10:	e00a      	b.n	8001f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	4908      	ldr	r1, [pc, #32]	@ (8001f38 <__NVIC_SetPriority+0x50>)
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	3b04      	subs	r3, #4
 8001f20:	0112      	lsls	r2, r2, #4
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	440b      	add	r3, r1
 8001f26:	761a      	strb	r2, [r3, #24]
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000e100 	.word	0xe000e100
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b089      	sub	sp, #36	@ 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f1c3 0307 	rsb	r3, r3, #7
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	bf28      	it	cs
 8001f5a:	2304      	movcs	r3, #4
 8001f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3304      	adds	r3, #4
 8001f62:	2b06      	cmp	r3, #6
 8001f64:	d902      	bls.n	8001f6c <NVIC_EncodePriority+0x30>
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3b03      	subs	r3, #3
 8001f6a:	e000      	b.n	8001f6e <NVIC_EncodePriority+0x32>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f70:	f04f 32ff 	mov.w	r2, #4294967295
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43da      	mvns	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	401a      	ands	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f84:	f04f 31ff 	mov.w	r1, #4294967295
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8e:	43d9      	mvns	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	4313      	orrs	r3, r2
         );
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3724      	adds	r7, #36	@ 0x24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
	...

08001fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fb4:	d301      	bcc.n	8001fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e00f      	b.n	8001fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fba:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe4 <SysTick_Config+0x40>)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fc2:	210f      	movs	r1, #15
 8001fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc8:	f7ff ff8e 	bl	8001ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fcc:	4b05      	ldr	r3, [pc, #20]	@ (8001fe4 <SysTick_Config+0x40>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fd2:	4b04      	ldr	r3, [pc, #16]	@ (8001fe4 <SysTick_Config+0x40>)
 8001fd4:	2207      	movs	r2, #7
 8001fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	e000e010 	.word	0xe000e010

08001fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff ff29 	bl	8001e48 <__NVIC_SetPriorityGrouping>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b086      	sub	sp, #24
 8002002:	af00      	add	r7, sp, #0
 8002004:	4603      	mov	r3, r0
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	607a      	str	r2, [r7, #4]
 800200a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002010:	f7ff ff3e 	bl	8001e90 <__NVIC_GetPriorityGrouping>
 8002014:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	68b9      	ldr	r1, [r7, #8]
 800201a:	6978      	ldr	r0, [r7, #20]
 800201c:	f7ff ff8e 	bl	8001f3c <NVIC_EncodePriority>
 8002020:	4602      	mov	r2, r0
 8002022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002026:	4611      	mov	r1, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff ff5d 	bl	8001ee8 <__NVIC_SetPriority>
}
 800202e:	bf00      	nop
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	4603      	mov	r3, r0
 800203e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff ff31 	bl	8001eac <__NVIC_EnableIRQ>
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff ffa2 	bl	8001fa4 <SysTick_Config>
 8002060:	4603      	mov	r3, r0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d004      	beq.n	8002088 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2280      	movs	r2, #128	@ 0x80
 8002082:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e00c      	b.n	80020a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2205      	movs	r2, #5
 800208c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0201 	bic.w	r2, r2, #1
 800209e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020bc:	b2db      	uxtb	r3, r3
}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b089      	sub	sp, #36	@ 0x24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020de:	2300      	movs	r3, #0
 80020e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
 80020e6:	e159      	b.n	800239c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020e8:	2201      	movs	r2, #1
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	429a      	cmp	r2, r3
 8002102:	f040 8148 	bne.w	8002396 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b01      	cmp	r3, #1
 8002110:	d005      	beq.n	800211e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800211a:	2b02      	cmp	r3, #2
 800211c:	d130      	bne.n	8002180 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	2203      	movs	r2, #3
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002154:	2201      	movs	r2, #1
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	091b      	lsrs	r3, r3, #4
 800216a:	f003 0201 	and.w	r2, r3, #1
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	2b03      	cmp	r3, #3
 800218a:	d017      	beq.n	80021bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	2203      	movs	r2, #3
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 0303 	and.w	r3, r3, #3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d123      	bne.n	8002210 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	08da      	lsrs	r2, r3, #3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3208      	adds	r2, #8
 80021d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	220f      	movs	r2, #15
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	691a      	ldr	r2, [r3, #16]
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	08da      	lsrs	r2, r3, #3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3208      	adds	r2, #8
 800220a:	69b9      	ldr	r1, [r7, #24]
 800220c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	2203      	movs	r2, #3
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 0203 	and.w	r2, r3, #3
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 80a2 	beq.w	8002396 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	4b57      	ldr	r3, [pc, #348]	@ (80023b4 <HAL_GPIO_Init+0x2e8>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225a:	4a56      	ldr	r2, [pc, #344]	@ (80023b4 <HAL_GPIO_Init+0x2e8>)
 800225c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002260:	6453      	str	r3, [r2, #68]	@ 0x44
 8002262:	4b54      	ldr	r3, [pc, #336]	@ (80023b4 <HAL_GPIO_Init+0x2e8>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002266:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800226e:	4a52      	ldr	r2, [pc, #328]	@ (80023b8 <HAL_GPIO_Init+0x2ec>)
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	089b      	lsrs	r3, r3, #2
 8002274:	3302      	adds	r3, #2
 8002276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	220f      	movs	r2, #15
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a49      	ldr	r2, [pc, #292]	@ (80023bc <HAL_GPIO_Init+0x2f0>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d019      	beq.n	80022ce <HAL_GPIO_Init+0x202>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a48      	ldr	r2, [pc, #288]	@ (80023c0 <HAL_GPIO_Init+0x2f4>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d013      	beq.n	80022ca <HAL_GPIO_Init+0x1fe>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a47      	ldr	r2, [pc, #284]	@ (80023c4 <HAL_GPIO_Init+0x2f8>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d00d      	beq.n	80022c6 <HAL_GPIO_Init+0x1fa>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a46      	ldr	r2, [pc, #280]	@ (80023c8 <HAL_GPIO_Init+0x2fc>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d007      	beq.n	80022c2 <HAL_GPIO_Init+0x1f6>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a45      	ldr	r2, [pc, #276]	@ (80023cc <HAL_GPIO_Init+0x300>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d101      	bne.n	80022be <HAL_GPIO_Init+0x1f2>
 80022ba:	2304      	movs	r3, #4
 80022bc:	e008      	b.n	80022d0 <HAL_GPIO_Init+0x204>
 80022be:	2307      	movs	r3, #7
 80022c0:	e006      	b.n	80022d0 <HAL_GPIO_Init+0x204>
 80022c2:	2303      	movs	r3, #3
 80022c4:	e004      	b.n	80022d0 <HAL_GPIO_Init+0x204>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e002      	b.n	80022d0 <HAL_GPIO_Init+0x204>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <HAL_GPIO_Init+0x204>
 80022ce:	2300      	movs	r3, #0
 80022d0:	69fa      	ldr	r2, [r7, #28]
 80022d2:	f002 0203 	and.w	r2, r2, #3
 80022d6:	0092      	lsls	r2, r2, #2
 80022d8:	4093      	lsls	r3, r2
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022e0:	4935      	ldr	r1, [pc, #212]	@ (80023b8 <HAL_GPIO_Init+0x2ec>)
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	089b      	lsrs	r3, r3, #2
 80022e6:	3302      	adds	r3, #2
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ee:	4b38      	ldr	r3, [pc, #224]	@ (80023d0 <HAL_GPIO_Init+0x304>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002312:	4a2f      	ldr	r2, [pc, #188]	@ (80023d0 <HAL_GPIO_Init+0x304>)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002318:	4b2d      	ldr	r3, [pc, #180]	@ (80023d0 <HAL_GPIO_Init+0x304>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800233c:	4a24      	ldr	r2, [pc, #144]	@ (80023d0 <HAL_GPIO_Init+0x304>)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002342:	4b23      	ldr	r3, [pc, #140]	@ (80023d0 <HAL_GPIO_Init+0x304>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002366:	4a1a      	ldr	r2, [pc, #104]	@ (80023d0 <HAL_GPIO_Init+0x304>)
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800236c:	4b18      	ldr	r3, [pc, #96]	@ (80023d0 <HAL_GPIO_Init+0x304>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002390:	4a0f      	ldr	r2, [pc, #60]	@ (80023d0 <HAL_GPIO_Init+0x304>)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3301      	adds	r3, #1
 800239a:	61fb      	str	r3, [r7, #28]
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	2b0f      	cmp	r3, #15
 80023a0:	f67f aea2 	bls.w	80020e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023a4:	bf00      	nop
 80023a6:	bf00      	nop
 80023a8:	3724      	adds	r7, #36	@ 0x24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40013800 	.word	0x40013800
 80023bc:	40020000 	.word	0x40020000
 80023c0:	40020400 	.word	0x40020400
 80023c4:	40020800 	.word	0x40020800
 80023c8:	40020c00 	.word	0x40020c00
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40013c00 	.word	0x40013c00

080023d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	807b      	strh	r3, [r7, #2]
 80023e0:	4613      	mov	r3, r2
 80023e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023e4:	787b      	ldrb	r3, [r7, #1]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ea:	887a      	ldrh	r2, [r7, #2]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023f0:	e003      	b.n	80023fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023f2:	887b      	ldrh	r3, [r7, #2]
 80023f4:	041a      	lsls	r2, r3, #16
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	619a      	str	r2, [r3, #24]
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002406:	b480      	push	{r7}
 8002408:	b085      	sub	sp, #20
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	460b      	mov	r3, r1
 8002410:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002418:	887a      	ldrh	r2, [r7, #2]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	4013      	ands	r3, r2
 800241e:	041a      	lsls	r2, r3, #16
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	43d9      	mvns	r1, r3
 8002424:	887b      	ldrh	r3, [r7, #2]
 8002426:	400b      	ands	r3, r1
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	619a      	str	r2, [r3, #24]
}
 800242e:	bf00      	nop
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
	...

0800243c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002446:	4b08      	ldr	r3, [pc, #32]	@ (8002468 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	88fb      	ldrh	r3, [r7, #6]
 800244c:	4013      	ands	r3, r2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d006      	beq.n	8002460 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002452:	4a05      	ldr	r2, [pc, #20]	@ (8002468 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002454:	88fb      	ldrh	r3, [r7, #6]
 8002456:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002458:	88fb      	ldrh	r3, [r7, #6]
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe f834 	bl	80004c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40013c00 	.word	0x40013c00

0800246c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e12b      	b.n	80026d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d106      	bne.n	8002498 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7fe fb6a 	bl	8000b6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2224      	movs	r2, #36	@ 0x24
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0201 	bic.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024d0:	f002 fdc2 	bl	8005058 <HAL_RCC_GetPCLK1Freq>
 80024d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	4a81      	ldr	r2, [pc, #516]	@ (80026e0 <HAL_I2C_Init+0x274>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d807      	bhi.n	80024f0 <HAL_I2C_Init+0x84>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4a80      	ldr	r2, [pc, #512]	@ (80026e4 <HAL_I2C_Init+0x278>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	bf94      	ite	ls
 80024e8:	2301      	movls	r3, #1
 80024ea:	2300      	movhi	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	e006      	b.n	80024fe <HAL_I2C_Init+0x92>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4a7d      	ldr	r2, [pc, #500]	@ (80026e8 <HAL_I2C_Init+0x27c>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	bf94      	ite	ls
 80024f8:	2301      	movls	r3, #1
 80024fa:	2300      	movhi	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e0e7      	b.n	80026d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	4a78      	ldr	r2, [pc, #480]	@ (80026ec <HAL_I2C_Init+0x280>)
 800250a:	fba2 2303 	umull	r2, r3, r2, r3
 800250e:	0c9b      	lsrs	r3, r3, #18
 8002510:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	430a      	orrs	r2, r1
 8002524:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	4a6a      	ldr	r2, [pc, #424]	@ (80026e0 <HAL_I2C_Init+0x274>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d802      	bhi.n	8002540 <HAL_I2C_Init+0xd4>
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	3301      	adds	r3, #1
 800253e:	e009      	b.n	8002554 <HAL_I2C_Init+0xe8>
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002546:	fb02 f303 	mul.w	r3, r2, r3
 800254a:	4a69      	ldr	r2, [pc, #420]	@ (80026f0 <HAL_I2C_Init+0x284>)
 800254c:	fba2 2303 	umull	r2, r3, r2, r3
 8002550:	099b      	lsrs	r3, r3, #6
 8002552:	3301      	adds	r3, #1
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	430b      	orrs	r3, r1
 800255a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002566:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	495c      	ldr	r1, [pc, #368]	@ (80026e0 <HAL_I2C_Init+0x274>)
 8002570:	428b      	cmp	r3, r1
 8002572:	d819      	bhi.n	80025a8 <HAL_I2C_Init+0x13c>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	1e59      	subs	r1, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002582:	1c59      	adds	r1, r3, #1
 8002584:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002588:	400b      	ands	r3, r1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00a      	beq.n	80025a4 <HAL_I2C_Init+0x138>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	1e59      	subs	r1, r3, #1
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	fbb1 f3f3 	udiv	r3, r1, r3
 800259c:	3301      	adds	r3, #1
 800259e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a2:	e051      	b.n	8002648 <HAL_I2C_Init+0x1dc>
 80025a4:	2304      	movs	r3, #4
 80025a6:	e04f      	b.n	8002648 <HAL_I2C_Init+0x1dc>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d111      	bne.n	80025d4 <HAL_I2C_Init+0x168>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	1e58      	subs	r0, r3, #1
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6859      	ldr	r1, [r3, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	440b      	add	r3, r1
 80025be:	fbb0 f3f3 	udiv	r3, r0, r3
 80025c2:	3301      	adds	r3, #1
 80025c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	bf0c      	ite	eq
 80025cc:	2301      	moveq	r3, #1
 80025ce:	2300      	movne	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	e012      	b.n	80025fa <HAL_I2C_Init+0x18e>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	1e58      	subs	r0, r3, #1
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6859      	ldr	r1, [r3, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	0099      	lsls	r1, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ea:	3301      	adds	r3, #1
 80025ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bf0c      	ite	eq
 80025f4:	2301      	moveq	r3, #1
 80025f6:	2300      	movne	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_I2C_Init+0x196>
 80025fe:	2301      	movs	r3, #1
 8002600:	e022      	b.n	8002648 <HAL_I2C_Init+0x1dc>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10e      	bne.n	8002628 <HAL_I2C_Init+0x1bc>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1e58      	subs	r0, r3, #1
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6859      	ldr	r1, [r3, #4]
 8002612:	460b      	mov	r3, r1
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	440b      	add	r3, r1
 8002618:	fbb0 f3f3 	udiv	r3, r0, r3
 800261c:	3301      	adds	r3, #1
 800261e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002622:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002626:	e00f      	b.n	8002648 <HAL_I2C_Init+0x1dc>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	1e58      	subs	r0, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6859      	ldr	r1, [r3, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	0099      	lsls	r1, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	fbb0 f3f3 	udiv	r3, r0, r3
 800263e:	3301      	adds	r3, #1
 8002640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002644:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	6809      	ldr	r1, [r1, #0]
 800264c:	4313      	orrs	r3, r2
 800264e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69da      	ldr	r2, [r3, #28]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002676:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6911      	ldr	r1, [r2, #16]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	68d2      	ldr	r2, [r2, #12]
 8002682:	4311      	orrs	r1, r2
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	430b      	orrs	r3, r1
 800268a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695a      	ldr	r2, [r3, #20]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0201 	orr.w	r2, r2, #1
 80026b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2220      	movs	r2, #32
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	000186a0 	.word	0x000186a0
 80026e4:	001e847f 	.word	0x001e847f
 80026e8:	003d08ff 	.word	0x003d08ff
 80026ec:	431bde83 	.word	0x431bde83
 80026f0:	10624dd3 	.word	0x10624dd3

080026f4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002706:	2b80      	cmp	r3, #128	@ 0x80
 8002708:	d103      	bne.n	8002712 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2200      	movs	r2, #0
 8002710:	611a      	str	r2, [r3, #16]
  }
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
	...

08002720 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af02      	add	r7, sp, #8
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	607a      	str	r2, [r7, #4]
 800272a:	461a      	mov	r2, r3
 800272c:	460b      	mov	r3, r1
 800272e:	817b      	strh	r3, [r7, #10]
 8002730:	4613      	mov	r3, r2
 8002732:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002734:	f7fe ff8a 	bl	800164c <HAL_GetTick>
 8002738:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b20      	cmp	r3, #32
 8002744:	f040 80e0 	bne.w	8002908 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	2319      	movs	r3, #25
 800274e:	2201      	movs	r2, #1
 8002750:	4970      	ldr	r1, [pc, #448]	@ (8002914 <HAL_I2C_Master_Transmit+0x1f4>)
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f001 fdea 	bl	800432c <I2C_WaitOnFlagUntilTimeout>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800275e:	2302      	movs	r3, #2
 8002760:	e0d3      	b.n	800290a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_I2C_Master_Transmit+0x50>
 800276c:	2302      	movs	r3, #2
 800276e:	e0cc      	b.n	800290a <HAL_I2C_Master_Transmit+0x1ea>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b01      	cmp	r3, #1
 8002784:	d007      	beq.n	8002796 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 0201 	orr.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2221      	movs	r2, #33	@ 0x21
 80027aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2210      	movs	r2, #16
 80027b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	893a      	ldrh	r2, [r7, #8]
 80027c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4a50      	ldr	r2, [pc, #320]	@ (8002918 <HAL_I2C_Master_Transmit+0x1f8>)
 80027d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027d8:	8979      	ldrh	r1, [r7, #10]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	6a3a      	ldr	r2, [r7, #32]
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f001 fc7a 	bl	80040d8 <I2C_MasterRequestWrite>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e08d      	b.n	800290a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ee:	2300      	movs	r3, #0
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002804:	e066      	b.n	80028d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	6a39      	ldr	r1, [r7, #32]
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f001 fea8 	bl	8004560 <I2C_WaitOnTXEFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00d      	beq.n	8002832 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281a:	2b04      	cmp	r3, #4
 800281c:	d107      	bne.n	800282e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800282c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e06b      	b.n	800290a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002836:	781a      	ldrb	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800284c:	b29b      	uxth	r3, r3
 800284e:	3b01      	subs	r3, #1
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b04      	cmp	r3, #4
 800286e:	d11b      	bne.n	80028a8 <HAL_I2C_Master_Transmit+0x188>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002874:	2b00      	cmp	r3, #0
 8002876:	d017      	beq.n	80028a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287c:	781a      	ldrb	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002892:	b29b      	uxth	r3, r3
 8002894:	3b01      	subs	r3, #1
 8002896:	b29a      	uxth	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	6a39      	ldr	r1, [r7, #32]
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f001 fe9f 	bl	80045f0 <I2C_WaitOnBTFFlagUntilTimeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00d      	beq.n	80028d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d107      	bne.n	80028d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e01a      	b.n	800290a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d194      	bne.n	8002806 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	e000      	b.n	800290a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002908:	2302      	movs	r3, #2
  }
}
 800290a:	4618      	mov	r0, r3
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	00100002 	.word	0x00100002
 8002918:	ffff0000 	.word	0xffff0000

0800291c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002934:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800293c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002944:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002946:	7bfb      	ldrb	r3, [r7, #15]
 8002948:	2b10      	cmp	r3, #16
 800294a:	d003      	beq.n	8002954 <HAL_I2C_EV_IRQHandler+0x38>
 800294c:	7bfb      	ldrb	r3, [r7, #15]
 800294e:	2b40      	cmp	r3, #64	@ 0x40
 8002950:	f040 80b1 	bne.w	8002ab6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10d      	bne.n	800298a <HAL_I2C_EV_IRQHandler+0x6e>
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002974:	d003      	beq.n	800297e <HAL_I2C_EV_IRQHandler+0x62>
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800297c:	d101      	bne.n	8002982 <HAL_I2C_EV_IRQHandler+0x66>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <HAL_I2C_EV_IRQHandler+0x68>
 8002982:	2300      	movs	r3, #0
 8002984:	2b01      	cmp	r3, #1
 8002986:	f000 8114 	beq.w	8002bb2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00b      	beq.n	80029ac <HAL_I2C_EV_IRQHandler+0x90>
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800299a:	2b00      	cmp	r3, #0
 800299c:	d006      	beq.n	80029ac <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f001 fecf 	bl	8004742 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 fd7a 	bl	800349e <I2C_Master_SB>
 80029aa:	e083      	b.n	8002ab4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d008      	beq.n	80029c8 <HAL_I2C_EV_IRQHandler+0xac>
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 fdf2 	bl	80035aa <I2C_Master_ADD10>
 80029c6:	e075      	b.n	8002ab4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d008      	beq.n	80029e4 <HAL_I2C_EV_IRQHandler+0xc8>
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 fe0e 	bl	80035fe <I2C_Master_ADDR>
 80029e2:	e067      	b.n	8002ab4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d036      	beq.n	8002a5c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029fc:	f000 80db 	beq.w	8002bb6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00d      	beq.n	8002a26 <HAL_I2C_EV_IRQHandler+0x10a>
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <HAL_I2C_EV_IRQHandler+0x10a>
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d103      	bne.n	8002a26 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f9d6 	bl	8002dd0 <I2C_MasterTransmit_TXE>
 8002a24:	e046      	b.n	8002ab4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 80c2 	beq.w	8002bb6 <HAL_I2C_EV_IRQHandler+0x29a>
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 80bc 	beq.w	8002bb6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002a3e:	7bbb      	ldrb	r3, [r7, #14]
 8002a40:	2b21      	cmp	r3, #33	@ 0x21
 8002a42:	d103      	bne.n	8002a4c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 fa5f 	bl	8002f08 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a4a:	e0b4      	b.n	8002bb6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	2b40      	cmp	r3, #64	@ 0x40
 8002a50:	f040 80b1 	bne.w	8002bb6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 facd 	bl	8002ff4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a5a:	e0ac      	b.n	8002bb6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a6a:	f000 80a4 	beq.w	8002bb6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00d      	beq.n	8002a94 <HAL_I2C_EV_IRQHandler+0x178>
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d008      	beq.n	8002a94 <HAL_I2C_EV_IRQHandler+0x178>
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d103      	bne.n	8002a94 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 fb49 	bl	8003124 <I2C_MasterReceive_RXNE>
 8002a92:	e00f      	b.n	8002ab4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 808b 	beq.w	8002bb6 <HAL_I2C_EV_IRQHandler+0x29a>
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 8085 	beq.w	8002bb6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 fc01 	bl	80032b4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ab2:	e080      	b.n	8002bb6 <HAL_I2C_EV_IRQHandler+0x29a>
 8002ab4:	e07f      	b.n	8002bb6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d004      	beq.n	8002ac8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	61fb      	str	r3, [r7, #28]
 8002ac6:	e007      	b.n	8002ad8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d011      	beq.n	8002b06 <HAL_I2C_EV_IRQHandler+0x1ea>
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00c      	beq.n	8002b06 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002afc:	69b9      	ldr	r1, [r7, #24]
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 ffcc 	bl	8003a9c <I2C_Slave_ADDR>
 8002b04:	e05a      	b.n	8002bbc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <HAL_I2C_EV_IRQHandler+0x206>
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f001 f806 	bl	8003b2c <I2C_Slave_STOPF>
 8002b20:	e04c      	b.n	8002bbc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b22:	7bbb      	ldrb	r3, [r7, #14]
 8002b24:	2b21      	cmp	r3, #33	@ 0x21
 8002b26:	d002      	beq.n	8002b2e <HAL_I2C_EV_IRQHandler+0x212>
 8002b28:	7bbb      	ldrb	r3, [r7, #14]
 8002b2a:	2b29      	cmp	r3, #41	@ 0x29
 8002b2c:	d120      	bne.n	8002b70 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00d      	beq.n	8002b54 <HAL_I2C_EV_IRQHandler+0x238>
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d008      	beq.n	8002b54 <HAL_I2C_EV_IRQHandler+0x238>
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d103      	bne.n	8002b54 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 fee7 	bl	8003920 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b52:	e032      	b.n	8002bba <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f003 0304 	and.w	r3, r3, #4
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d02d      	beq.n	8002bba <HAL_I2C_EV_IRQHandler+0x29e>
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d028      	beq.n	8002bba <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 ff16 	bl	800399a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b6e:	e024      	b.n	8002bba <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00d      	beq.n	8002b96 <HAL_I2C_EV_IRQHandler+0x27a>
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <HAL_I2C_EV_IRQHandler+0x27a>
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d103      	bne.n	8002b96 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 ff24 	bl	80039dc <I2C_SlaveReceive_RXNE>
 8002b94:	e012      	b.n	8002bbc <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00d      	beq.n	8002bbc <HAL_I2C_EV_IRQHandler+0x2a0>
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d008      	beq.n	8002bbc <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 ff54 	bl	8003a58 <I2C_SlaveReceive_BTF>
 8002bb0:	e004      	b.n	8002bbc <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002bb2:	bf00      	nop
 8002bb4:	e002      	b.n	8002bbc <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bb6:	bf00      	nop
 8002bb8:	e000      	b.n	8002bbc <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bba:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002bbc:	3720      	adds	r7, #32
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b08a      	sub	sp, #40	@ 0x28
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002be4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00d      	beq.n	8002c0c <HAL_I2C_ER_IRQHandler+0x4a>
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d008      	beq.n	8002c0c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002c0a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00d      	beq.n	8002c32 <HAL_I2C_ER_IRQHandler+0x70>
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c22:	f043 0302 	orr.w	r3, r3, #2
 8002c26:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002c30:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d03e      	beq.n	8002cba <HAL_I2C_ER_IRQHandler+0xf8>
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d039      	beq.n	8002cba <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8002c46:	7efb      	ldrb	r3, [r7, #27]
 8002c48:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c58:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002c60:	7ebb      	ldrb	r3, [r7, #26]
 8002c62:	2b20      	cmp	r3, #32
 8002c64:	d112      	bne.n	8002c8c <HAL_I2C_ER_IRQHandler+0xca>
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10f      	bne.n	8002c8c <HAL_I2C_ER_IRQHandler+0xca>
 8002c6c:	7cfb      	ldrb	r3, [r7, #19]
 8002c6e:	2b21      	cmp	r3, #33	@ 0x21
 8002c70:	d008      	beq.n	8002c84 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002c72:	7cfb      	ldrb	r3, [r7, #19]
 8002c74:	2b29      	cmp	r3, #41	@ 0x29
 8002c76:	d005      	beq.n	8002c84 <HAL_I2C_ER_IRQHandler+0xc2>
 8002c78:	7cfb      	ldrb	r3, [r7, #19]
 8002c7a:	2b28      	cmp	r3, #40	@ 0x28
 8002c7c:	d106      	bne.n	8002c8c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2b21      	cmp	r3, #33	@ 0x21
 8002c82:	d103      	bne.n	8002c8c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f001 f881 	bl	8003d8c <I2C_Slave_AF>
 8002c8a:	e016      	b.n	8002cba <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c94:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c98:	f043 0304 	orr.w	r3, r3, #4
 8002c9c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002c9e:	7efb      	ldrb	r3, [r7, #27]
 8002ca0:	2b10      	cmp	r3, #16
 8002ca2:	d002      	beq.n	8002caa <HAL_I2C_ER_IRQHandler+0xe8>
 8002ca4:	7efb      	ldrb	r3, [r7, #27]
 8002ca6:	2b40      	cmp	r3, #64	@ 0x40
 8002ca8:	d107      	bne.n	8002cba <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cb8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00d      	beq.n	8002ce0 <HAL_I2C_ER_IRQHandler+0x11e>
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d008      	beq.n	8002ce0 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd0:	f043 0308 	orr.w	r3, r3, #8
 8002cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002cde:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d008      	beq.n	8002cf8 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cec:	431a      	orrs	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f001 f8be 	bl	8003e74 <I2C_ITError>
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	3728      	adds	r7, #40	@ 0x28
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	70fb      	strb	r3, [r7, #3]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dde:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002de6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dec:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d150      	bne.n	8002e98 <I2C_MasterTransmit_TXE+0xc8>
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	2b21      	cmp	r3, #33	@ 0x21
 8002dfa:	d14d      	bne.n	8002e98 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d01d      	beq.n	8002e3e <I2C_MasterTransmit_TXE+0x6e>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b20      	cmp	r3, #32
 8002e06:	d01a      	beq.n	8002e3e <I2C_MasterTransmit_TXE+0x6e>
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e0e:	d016      	beq.n	8002e3e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002e1e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2211      	movs	r2, #17
 8002e24:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff ff62 	bl	8002d00 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e3c:	e060      	b.n	8002f00 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002e4c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e5c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b40      	cmp	r3, #64	@ 0x40
 8002e76:	d107      	bne.n	8002e88 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff ff7d 	bl	8002d80 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e86:	e03b      	b.n	8002f00 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7ff ff35 	bl	8002d00 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e96:	e033      	b.n	8002f00 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
 8002e9a:	2b21      	cmp	r3, #33	@ 0x21
 8002e9c:	d005      	beq.n	8002eaa <I2C_MasterTransmit_TXE+0xda>
 8002e9e:	7bbb      	ldrb	r3, [r7, #14]
 8002ea0:	2b40      	cmp	r3, #64	@ 0x40
 8002ea2:	d12d      	bne.n	8002f00 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
 8002ea6:	2b22      	cmp	r3, #34	@ 0x22
 8002ea8:	d12a      	bne.n	8002f00 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d108      	bne.n	8002ec6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ec2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002ec4:	e01c      	b.n	8002f00 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b40      	cmp	r3, #64	@ 0x40
 8002ed0:	d103      	bne.n	8002eda <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f88e 	bl	8002ff4 <I2C_MemoryTransmit_TXE_BTF>
}
 8002ed8:	e012      	b.n	8002f00 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ede:	781a      	ldrb	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002efe:	e7ff      	b.n	8002f00 <I2C_MasterTransmit_TXE+0x130>
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f14:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b21      	cmp	r3, #33	@ 0x21
 8002f20:	d164      	bne.n	8002fec <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d012      	beq.n	8002f52 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f30:	781a      	ldrb	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002f50:	e04c      	b.n	8002fec <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	d01d      	beq.n	8002f94 <I2C_MasterTransmit_BTF+0x8c>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2b20      	cmp	r3, #32
 8002f5c:	d01a      	beq.n	8002f94 <I2C_MasterTransmit_BTF+0x8c>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f64:	d016      	beq.n	8002f94 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f74:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2211      	movs	r2, #17
 8002f7a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff feb7 	bl	8002d00 <HAL_I2C_MasterTxCpltCallback>
}
 8002f92:	e02b      	b.n	8002fec <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002fa2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fb2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b40      	cmp	r3, #64	@ 0x40
 8002fcc:	d107      	bne.n	8002fde <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff fed2 	bl	8002d80 <HAL_I2C_MemTxCpltCallback>
}
 8002fdc:	e006      	b.n	8002fec <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7ff fe8a 	bl	8002d00 <HAL_I2C_MasterTxCpltCallback>
}
 8002fec:	bf00      	nop
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003002:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003008:	2b00      	cmp	r3, #0
 800300a:	d11d      	bne.n	8003048 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003010:	2b01      	cmp	r3, #1
 8003012:	d10b      	bne.n	800302c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003018:	b2da      	uxtb	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003024:	1c9a      	adds	r2, r3, #2
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800302a:	e077      	b.n	800311c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003030:	b29b      	uxth	r3, r3
 8003032:	121b      	asrs	r3, r3, #8
 8003034:	b2da      	uxtb	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003046:	e069      	b.n	800311c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800304c:	2b01      	cmp	r3, #1
 800304e:	d10b      	bne.n	8003068 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003054:	b2da      	uxtb	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003066:	e059      	b.n	800311c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800306c:	2b02      	cmp	r3, #2
 800306e:	d152      	bne.n	8003116 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003070:	7bfb      	ldrb	r3, [r7, #15]
 8003072:	2b22      	cmp	r3, #34	@ 0x22
 8003074:	d10d      	bne.n	8003092 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003084:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003090:	e044      	b.n	800311c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003096:	b29b      	uxth	r3, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	d015      	beq.n	80030c8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	2b21      	cmp	r3, #33	@ 0x21
 80030a0:	d112      	bne.n	80030c8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a6:	781a      	ldrb	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b2:	1c5a      	adds	r2, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030bc:	b29b      	uxth	r3, r3
 80030be:	3b01      	subs	r3, #1
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80030c6:	e029      	b.n	800311c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d124      	bne.n	800311c <I2C_MemoryTransmit_TXE_BTF+0x128>
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	2b21      	cmp	r3, #33	@ 0x21
 80030d6:	d121      	bne.n	800311c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80030e6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030f6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff fe36 	bl	8002d80 <HAL_I2C_MemTxCpltCallback>
}
 8003114:	e002      	b.n	800311c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7ff faec 	bl	80026f4 <I2C_Flush_DR>
}
 800311c:	bf00      	nop
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b22      	cmp	r3, #34	@ 0x22
 8003136:	f040 80b9 	bne.w	80032ac <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003144:	b29b      	uxth	r3, r3
 8003146:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2b03      	cmp	r3, #3
 800314c:	d921      	bls.n	8003192 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003158:	b2d2      	uxtb	r2, r2
 800315a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003160:	1c5a      	adds	r2, r3, #1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800316a:	b29b      	uxth	r3, r3
 800316c:	3b01      	subs	r3, #1
 800316e:	b29a      	uxth	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003178:	b29b      	uxth	r3, r3
 800317a:	2b03      	cmp	r3, #3
 800317c:	f040 8096 	bne.w	80032ac <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800318e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003190:	e08c      	b.n	80032ac <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003196:	2b02      	cmp	r3, #2
 8003198:	d07f      	beq.n	800329a <I2C_MasterReceive_RXNE+0x176>
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d002      	beq.n	80031a6 <I2C_MasterReceive_RXNE+0x82>
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d179      	bne.n	800329a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f001 fa6a 	bl	8004680 <I2C_WaitOnSTOPRequestThroughIT>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d14c      	bne.n	800324c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031c0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80031d0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b40      	cmp	r3, #64	@ 0x40
 800320a:	d10a      	bne.n	8003222 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7ff fdba 	bl	8002d94 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003220:	e044      	b.n	80032ac <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2b08      	cmp	r3, #8
 800322e:	d002      	beq.n	8003236 <I2C_MasterReceive_RXNE+0x112>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2b20      	cmp	r3, #32
 8003234:	d103      	bne.n	800323e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	631a      	str	r2, [r3, #48]	@ 0x30
 800323c:	e002      	b.n	8003244 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2212      	movs	r2, #18
 8003242:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7ff fd65 	bl	8002d14 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800324a:	e02f      	b.n	80032ac <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800325a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691a      	ldr	r2, [r3, #16]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003278:	b29b      	uxth	r3, r3
 800327a:	3b01      	subs	r3, #1
 800327c:	b29a      	uxth	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2220      	movs	r2, #32
 8003286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7ff fd88 	bl	8002da8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003298:	e008      	b.n	80032ac <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032a8:	605a      	str	r2, [r3, #4]
}
 80032aa:	e7ff      	b.n	80032ac <I2C_MasterReceive_RXNE+0x188>
 80032ac:	bf00      	nop
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d11b      	bne.n	8003304 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032da:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	3b01      	subs	r3, #1
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003302:	e0c8      	b.n	8003496 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003308:	b29b      	uxth	r3, r3
 800330a:	2b03      	cmp	r3, #3
 800330c:	d129      	bne.n	8003362 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800331c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b04      	cmp	r3, #4
 8003322:	d00a      	beq.n	800333a <I2C_MasterReceive_BTF+0x86>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b02      	cmp	r3, #2
 8003328:	d007      	beq.n	800333a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003338:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003356:	b29b      	uxth	r3, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003360:	e099      	b.n	8003496 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	f040 8081 	bne.w	8003470 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d002      	beq.n	800337a <I2C_MasterReceive_BTF+0xc6>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2b10      	cmp	r3, #16
 8003378:	d108      	bne.n	800338c <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	e019      	b.n	80033c0 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2b04      	cmp	r3, #4
 8003390:	d002      	beq.n	8003398 <I2C_MasterReceive_BTF+0xe4>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b02      	cmp	r3, #2
 8003396:	d108      	bne.n	80033aa <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	e00a      	b.n	80033c0 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2b10      	cmp	r3, #16
 80033ae:	d007      	beq.n	80033c0 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033be:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691a      	ldr	r2, [r3, #16]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033dc:	b29b      	uxth	r3, r3
 80033de:	3b01      	subs	r3, #1
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	691a      	ldr	r2, [r3, #16]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f8:	1c5a      	adds	r2, r3, #1
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003402:	b29b      	uxth	r3, r3
 8003404:	3b01      	subs	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800341a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b40      	cmp	r3, #64	@ 0x40
 800342e:	d10a      	bne.n	8003446 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7ff fca8 	bl	8002d94 <HAL_I2C_MemRxCpltCallback>
}
 8003444:	e027      	b.n	8003496 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2b08      	cmp	r3, #8
 8003452:	d002      	beq.n	800345a <I2C_MasterReceive_BTF+0x1a6>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2b20      	cmp	r3, #32
 8003458:	d103      	bne.n	8003462 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003460:	e002      	b.n	8003468 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2212      	movs	r2, #18
 8003466:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7ff fc53 	bl	8002d14 <HAL_I2C_MasterRxCpltCallback>
}
 800346e:	e012      	b.n	8003496 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691a      	ldr	r2, [r3, #16]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003482:	1c5a      	adds	r2, r3, #1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800348c:	b29b      	uxth	r3, r3
 800348e:	3b01      	subs	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003496:	bf00      	nop
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b40      	cmp	r3, #64	@ 0x40
 80034b0:	d117      	bne.n	80034e2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d109      	bne.n	80034ce <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	461a      	mov	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80034ca:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80034cc:	e067      	b.n	800359e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	f043 0301 	orr.w	r3, r3, #1
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	611a      	str	r2, [r3, #16]
}
 80034e0:	e05d      	b.n	800359e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034ea:	d133      	bne.n	8003554 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b21      	cmp	r3, #33	@ 0x21
 80034f6:	d109      	bne.n	800350c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	461a      	mov	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003508:	611a      	str	r2, [r3, #16]
 800350a:	e008      	b.n	800351e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003510:	b2db      	uxtb	r3, r3
 8003512:	f043 0301 	orr.w	r3, r3, #1
 8003516:	b2da      	uxtb	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003522:	2b00      	cmp	r3, #0
 8003524:	d004      	beq.n	8003530 <I2C_Master_SB+0x92>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800352a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800352c:	2b00      	cmp	r3, #0
 800352e:	d108      	bne.n	8003542 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003534:	2b00      	cmp	r3, #0
 8003536:	d032      	beq.n	800359e <I2C_Master_SB+0x100>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800353e:	2b00      	cmp	r3, #0
 8003540:	d02d      	beq.n	800359e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003550:	605a      	str	r2, [r3, #4]
}
 8003552:	e024      	b.n	800359e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10e      	bne.n	800357a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003560:	b29b      	uxth	r3, r3
 8003562:	11db      	asrs	r3, r3, #7
 8003564:	b2db      	uxtb	r3, r3
 8003566:	f003 0306 	and.w	r3, r3, #6
 800356a:	b2db      	uxtb	r3, r3
 800356c:	f063 030f 	orn	r3, r3, #15
 8003570:	b2da      	uxtb	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	611a      	str	r2, [r3, #16]
}
 8003578:	e011      	b.n	800359e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800357e:	2b01      	cmp	r3, #1
 8003580:	d10d      	bne.n	800359e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003586:	b29b      	uxth	r3, r3
 8003588:	11db      	asrs	r3, r3, #7
 800358a:	b2db      	uxtb	r3, r3
 800358c:	f003 0306 	and.w	r3, r3, #6
 8003590:	b2db      	uxtb	r3, r3
 8003592:	f063 030e 	orn	r3, r3, #14
 8003596:	b2da      	uxtb	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	611a      	str	r2, [r3, #16]
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b083      	sub	sp, #12
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d004      	beq.n	80035d0 <I2C_Master_ADD10+0x26>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d108      	bne.n	80035e2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00c      	beq.n	80035f2 <I2C_Master_ADD10+0x48>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d007      	beq.n	80035f2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035f0:	605a      	str	r2, [r3, #4]
  }
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80035fe:	b480      	push	{r7}
 8003600:	b091      	sub	sp, #68	@ 0x44
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800360c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003614:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b22      	cmp	r3, #34	@ 0x22
 8003626:	f040 8169 	bne.w	80038fc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10f      	bne.n	8003652 <I2C_Master_ADDR+0x54>
 8003632:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003636:	2b40      	cmp	r3, #64	@ 0x40
 8003638:	d10b      	bne.n	8003652 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800363a:	2300      	movs	r3, #0
 800363c:	633b      	str	r3, [r7, #48]	@ 0x30
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	633b      	str	r3, [r7, #48]	@ 0x30
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	633b      	str	r3, [r7, #48]	@ 0x30
 800364e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003650:	e160      	b.n	8003914 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003656:	2b00      	cmp	r3, #0
 8003658:	d11d      	bne.n	8003696 <I2C_Master_ADDR+0x98>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003662:	d118      	bne.n	8003696 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003664:	2300      	movs	r3, #0
 8003666:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003688:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	651a      	str	r2, [r3, #80]	@ 0x50
 8003694:	e13e      	b.n	8003914 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d113      	bne.n	80036c8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036a0:	2300      	movs	r3, #0
 80036a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	e115      	b.n	80038f4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	f040 808a 	bne.w	80037e8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80036d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80036da:	d137      	bne.n	800374c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036ea:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036fa:	d113      	bne.n	8003724 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800370a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800370c:	2300      	movs	r3, #0
 800370e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	627b      	str	r3, [r7, #36]	@ 0x24
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003722:	e0e7      	b.n	80038f4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003724:	2300      	movs	r3, #0
 8003726:	623b      	str	r3, [r7, #32]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	623b      	str	r3, [r7, #32]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	623b      	str	r3, [r7, #32]
 8003738:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	e0d3      	b.n	80038f4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800374c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800374e:	2b08      	cmp	r3, #8
 8003750:	d02e      	beq.n	80037b0 <I2C_Master_ADDR+0x1b2>
 8003752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003754:	2b20      	cmp	r3, #32
 8003756:	d02b      	beq.n	80037b0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800375a:	2b12      	cmp	r3, #18
 800375c:	d102      	bne.n	8003764 <I2C_Master_ADDR+0x166>
 800375e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003760:	2b01      	cmp	r3, #1
 8003762:	d125      	bne.n	80037b0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003766:	2b04      	cmp	r3, #4
 8003768:	d00e      	beq.n	8003788 <I2C_Master_ADDR+0x18a>
 800376a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800376c:	2b02      	cmp	r3, #2
 800376e:	d00b      	beq.n	8003788 <I2C_Master_ADDR+0x18a>
 8003770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003772:	2b10      	cmp	r3, #16
 8003774:	d008      	beq.n	8003788 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	e007      	b.n	8003798 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003796:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003798:	2300      	movs	r3, #0
 800379a:	61fb      	str	r3, [r7, #28]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	61fb      	str	r3, [r7, #28]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	61fb      	str	r3, [r7, #28]
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	e0a1      	b.n	80038f4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037be:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037c0:	2300      	movs	r3, #0
 80037c2:	61bb      	str	r3, [r7, #24]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	61bb      	str	r3, [r7, #24]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	61bb      	str	r3, [r7, #24]
 80037d4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	e085      	b.n	80038f4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d14d      	bne.n	800388e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80037f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d016      	beq.n	8003826 <I2C_Master_ADDR+0x228>
 80037f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d013      	beq.n	8003826 <I2C_Master_ADDR+0x228>
 80037fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003800:	2b10      	cmp	r3, #16
 8003802:	d010      	beq.n	8003826 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003812:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	e007      	b.n	8003836 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003834:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003840:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003844:	d117      	bne.n	8003876 <I2C_Master_ADDR+0x278>
 8003846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003848:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800384c:	d00b      	beq.n	8003866 <I2C_Master_ADDR+0x268>
 800384e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003850:	2b01      	cmp	r3, #1
 8003852:	d008      	beq.n	8003866 <I2C_Master_ADDR+0x268>
 8003854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003856:	2b08      	cmp	r3, #8
 8003858:	d005      	beq.n	8003866 <I2C_Master_ADDR+0x268>
 800385a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800385c:	2b10      	cmp	r3, #16
 800385e:	d002      	beq.n	8003866 <I2C_Master_ADDR+0x268>
 8003860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003862:	2b20      	cmp	r3, #32
 8003864:	d107      	bne.n	8003876 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003874:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003876:	2300      	movs	r3, #0
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	617b      	str	r3, [r7, #20]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	e032      	b.n	80038f4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800389c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038ac:	d117      	bne.n	80038de <I2C_Master_ADDR+0x2e0>
 80038ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038b4:	d00b      	beq.n	80038ce <I2C_Master_ADDR+0x2d0>
 80038b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d008      	beq.n	80038ce <I2C_Master_ADDR+0x2d0>
 80038bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d005      	beq.n	80038ce <I2C_Master_ADDR+0x2d0>
 80038c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038c4:	2b10      	cmp	r3, #16
 80038c6:	d002      	beq.n	80038ce <I2C_Master_ADDR+0x2d0>
 80038c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ca:	2b20      	cmp	r3, #32
 80038cc:	d107      	bne.n	80038de <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80038dc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038de:	2300      	movs	r3, #0
 80038e0:	613b      	str	r3, [r7, #16]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80038fa:	e00b      	b.n	8003914 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fc:	2300      	movs	r3, #0
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	68fb      	ldr	r3, [r7, #12]
}
 8003912:	e7ff      	b.n	8003914 <I2C_Master_ADDR+0x316>
 8003914:	bf00      	nop
 8003916:	3744      	adds	r7, #68	@ 0x44
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800392e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d02b      	beq.n	8003992 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393e:	781a      	ldrb	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003954:	b29b      	uxth	r3, r3
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003962:	b29b      	uxth	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d114      	bne.n	8003992 <I2C_SlaveTransmit_TXE+0x72>
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	2b29      	cmp	r3, #41	@ 0x29
 800396c:	d111      	bne.n	8003992 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800397c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2221      	movs	r2, #33	@ 0x21
 8003982:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2228      	movs	r2, #40	@ 0x28
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f7ff f9cb 	bl	8002d28 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003992:	bf00      	nop
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d011      	beq.n	80039d0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b0:	781a      	ldrb	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039ea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d02c      	beq.n	8003a50 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a00:	b2d2      	uxtb	r2, r2
 8003a02:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d114      	bne.n	8003a50 <I2C_SlaveReceive_RXNE+0x74>
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
 8003a28:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a2a:	d111      	bne.n	8003a50 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a3a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2222      	movs	r2, #34	@ 0x22
 8003a40:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2228      	movs	r2, #40	@ 0x28
 8003a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff f976 	bl	8002d3c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003a50:	bf00      	nop
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d012      	beq.n	8003a90 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003ab6:	2b28      	cmp	r3, #40	@ 0x28
 8003ab8:	d125      	bne.n	8003b06 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ac8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d103      	bne.n	8003aea <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	81bb      	strh	r3, [r7, #12]
 8003ae8:	e002      	b.n	8003af0 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003af8:	89ba      	ldrh	r2, [r7, #12]
 8003afa:	7bfb      	ldrb	r3, [r7, #15]
 8003afc:	4619      	mov	r1, r3
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7ff f926 	bl	8002d50 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003b04:	e00e      	b.n	8003b24 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b06:	2300      	movs	r3, #0
 8003b08:	60bb      	str	r3, [r7, #8]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	60bb      	str	r3, [r7, #8]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003b24:	bf00      	nop
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b3a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b4a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60bb      	str	r3, [r7, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	60bb      	str	r3, [r7, #8]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0201 	orr.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b78:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b88:	d172      	bne.n	8003c70 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
 8003b8c:	2b22      	cmp	r3, #34	@ 0x22
 8003b8e:	d002      	beq.n	8003b96 <I2C_Slave_STOPF+0x6a>
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
 8003b92:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b94:	d135      	bne.n	8003c02 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d005      	beq.n	8003bba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb2:	f043 0204 	orr.w	r2, r3, #4
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bc8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fe fa6d 	bl	80020ae <HAL_DMA_GetState>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d049      	beq.n	8003c6e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bde:	4a69      	ldr	r2, [pc, #420]	@ (8003d84 <I2C_Slave_STOPF+0x258>)
 8003be0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fe fa3f 	bl	800206a <HAL_DMA_Abort_IT>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d03d      	beq.n	8003c6e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c00:	e035      	b.n	8003c6e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d005      	beq.n	8003c26 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1e:	f043 0204 	orr.w	r2, r3, #4
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c34:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fe fa37 	bl	80020ae <HAL_DMA_GetState>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d014      	beq.n	8003c70 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c4a:	4a4e      	ldr	r2, [pc, #312]	@ (8003d84 <I2C_Slave_STOPF+0x258>)
 8003c4c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fe fa09 	bl	800206a <HAL_DMA_Abort_IT>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d008      	beq.n	8003c70 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003c68:	4610      	mov	r0, r2
 8003c6a:	4798      	blx	r3
 8003c6c:	e000      	b.n	8003c70 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c6e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d03e      	beq.n	8003cf8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	d112      	bne.n	8003cae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691a      	ldr	r2, [r3, #16]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb8:	2b40      	cmp	r3, #64	@ 0x40
 8003cba:	d112      	bne.n	8003ce2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf0:	f043 0204 	orr.w	r2, r3, #4
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f8b7 	bl	8003e74 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003d06:	e039      	b.n	8003d7c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
 8003d0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d0c:	d109      	bne.n	8003d22 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2228      	movs	r2, #40	@ 0x28
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff f80d 	bl	8002d3c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b28      	cmp	r3, #40	@ 0x28
 8003d2c:	d111      	bne.n	8003d52 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a15      	ldr	r2, [pc, #84]	@ (8003d88 <I2C_Slave_STOPF+0x25c>)
 8003d32:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff f80e 	bl	8002d6c <HAL_I2C_ListenCpltCallback>
}
 8003d50:	e014      	b.n	8003d7c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d56:	2b22      	cmp	r3, #34	@ 0x22
 8003d58:	d002      	beq.n	8003d60 <I2C_Slave_STOPF+0x234>
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
 8003d5c:	2b22      	cmp	r3, #34	@ 0x22
 8003d5e:	d10d      	bne.n	8003d7c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7fe ffe0 	bl	8002d3c <HAL_I2C_SlaveRxCpltCallback>
}
 8003d7c:	bf00      	nop
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	080041dd 	.word	0x080041dd
 8003d88:	ffff0000 	.word	0xffff0000

08003d8c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d002      	beq.n	8003dae <I2C_Slave_AF+0x22>
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	d129      	bne.n	8003e02 <I2C_Slave_AF+0x76>
 8003dae:	7bfb      	ldrb	r3, [r7, #15]
 8003db0:	2b28      	cmp	r3, #40	@ 0x28
 8003db2:	d126      	bne.n	8003e02 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a2e      	ldr	r2, [pc, #184]	@ (8003e70 <I2C_Slave_AF+0xe4>)
 8003db8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003dc8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003dd2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003de2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7fe ffb6 	bl	8002d6c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003e00:	e031      	b.n	8003e66 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003e02:	7bfb      	ldrb	r3, [r7, #15]
 8003e04:	2b21      	cmp	r3, #33	@ 0x21
 8003e06:	d129      	bne.n	8003e5c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a19      	ldr	r2, [pc, #100]	@ (8003e70 <I2C_Slave_AF+0xe4>)
 8003e0c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2221      	movs	r2, #33	@ 0x21
 8003e12:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e32:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e3c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e4c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7fe fc50 	bl	80026f4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7fe ff67 	bl	8002d28 <HAL_I2C_SlaveTxCpltCallback>
}
 8003e5a:	e004      	b.n	8003e66 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e64:	615a      	str	r2, [r3, #20]
}
 8003e66:	bf00      	nop
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	ffff0000 	.word	0xffff0000

08003e74 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e82:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e8a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003e8c:	7bbb      	ldrb	r3, [r7, #14]
 8003e8e:	2b10      	cmp	r3, #16
 8003e90:	d002      	beq.n	8003e98 <I2C_ITError+0x24>
 8003e92:	7bbb      	ldrb	r3, [r7, #14]
 8003e94:	2b40      	cmp	r3, #64	@ 0x40
 8003e96:	d10a      	bne.n	8003eae <I2C_ITError+0x3a>
 8003e98:	7bfb      	ldrb	r3, [r7, #15]
 8003e9a:	2b22      	cmp	r3, #34	@ 0x22
 8003e9c:	d107      	bne.n	8003eae <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003eac:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003eae:	7bfb      	ldrb	r3, [r7, #15]
 8003eb0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003eb4:	2b28      	cmp	r3, #40	@ 0x28
 8003eb6:	d107      	bne.n	8003ec8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2228      	movs	r2, #40	@ 0x28
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003ec6:	e015      	b.n	8003ef4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ed2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ed6:	d00a      	beq.n	8003eee <I2C_ITError+0x7a>
 8003ed8:	7bfb      	ldrb	r3, [r7, #15]
 8003eda:	2b60      	cmp	r3, #96	@ 0x60
 8003edc:	d007      	beq.n	8003eee <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003efe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f02:	d162      	bne.n	8003fca <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f12:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d020      	beq.n	8003f64 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f26:	4a6a      	ldr	r2, [pc, #424]	@ (80040d0 <I2C_ITError+0x25c>)
 8003f28:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fe f89b 	bl	800206a <HAL_DMA_Abort_IT>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 8089 	beq.w	800404e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0201 	bic.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003f5e:	4610      	mov	r0, r2
 8003f60:	4798      	blx	r3
 8003f62:	e074      	b.n	800404e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f68:	4a59      	ldr	r2, [pc, #356]	@ (80040d0 <I2C_ITError+0x25c>)
 8003f6a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7fe f87a 	bl	800206a <HAL_DMA_Abort_IT>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d068      	beq.n	800404e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f86:	2b40      	cmp	r3, #64	@ 0x40
 8003f88:	d10b      	bne.n	8003fa2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	691a      	ldr	r2, [r3, #16]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0201 	bic.w	r2, r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003fc4:	4610      	mov	r0, r2
 8003fc6:	4798      	blx	r3
 8003fc8:	e041      	b.n	800404e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b60      	cmp	r3, #96	@ 0x60
 8003fd4:	d125      	bne.n	8004022 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fee:	2b40      	cmp	r3, #64	@ 0x40
 8003ff0:	d10b      	bne.n	800400a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	691a      	ldr	r2, [r3, #16]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0201 	bic.w	r2, r2, #1
 8004018:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7fe fece 	bl	8002dbc <HAL_I2C_AbortCpltCallback>
 8004020:	e015      	b.n	800404e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800402c:	2b40      	cmp	r3, #64	@ 0x40
 800402e:	d10b      	bne.n	8004048 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691a      	ldr	r2, [r3, #16]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7fe fead 	bl	8002da8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004052:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10e      	bne.n	800407c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004064:	2b00      	cmp	r3, #0
 8004066:	d109      	bne.n	800407c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800406e:	2b00      	cmp	r3, #0
 8004070:	d104      	bne.n	800407c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004078:	2b00      	cmp	r3, #0
 800407a:	d007      	beq.n	800408c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800408a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004092:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b04      	cmp	r3, #4
 800409e:	d113      	bne.n	80040c8 <I2C_ITError+0x254>
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
 80040a2:	2b28      	cmp	r3, #40	@ 0x28
 80040a4:	d110      	bne.n	80040c8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a0a      	ldr	r2, [pc, #40]	@ (80040d4 <I2C_ITError+0x260>)
 80040aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2220      	movs	r2, #32
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fe fe52 	bl	8002d6c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80040c8:	bf00      	nop
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	080041dd 	.word	0x080041dd
 80040d4:	ffff0000 	.word	0xffff0000

080040d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af02      	add	r7, sp, #8
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	607a      	str	r2, [r7, #4]
 80040e2:	603b      	str	r3, [r7, #0]
 80040e4:	460b      	mov	r3, r1
 80040e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d006      	beq.n	8004102 <I2C_MasterRequestWrite+0x2a>
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d003      	beq.n	8004102 <I2C_MasterRequestWrite+0x2a>
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004100:	d108      	bne.n	8004114 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	e00b      	b.n	800412c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004118:	2b12      	cmp	r3, #18
 800411a:	d107      	bne.n	800412c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800412a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 f8f7 	bl	800432c <I2C_WaitOnFlagUntilTimeout>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00d      	beq.n	8004160 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800414e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004152:	d103      	bne.n	800415c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800415a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e035      	b.n	80041cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004168:	d108      	bne.n	800417c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800416a:	897b      	ldrh	r3, [r7, #10]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	461a      	mov	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004178:	611a      	str	r2, [r3, #16]
 800417a:	e01b      	b.n	80041b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800417c:	897b      	ldrh	r3, [r7, #10]
 800417e:	11db      	asrs	r3, r3, #7
 8004180:	b2db      	uxtb	r3, r3
 8004182:	f003 0306 	and.w	r3, r3, #6
 8004186:	b2db      	uxtb	r3, r3
 8004188:	f063 030f 	orn	r3, r3, #15
 800418c:	b2da      	uxtb	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	490e      	ldr	r1, [pc, #56]	@ (80041d4 <I2C_MasterRequestWrite+0xfc>)
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 f940 	bl	8004420 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e010      	b.n	80041cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041aa:	897b      	ldrh	r3, [r7, #10]
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	4907      	ldr	r1, [pc, #28]	@ (80041d8 <I2C_MasterRequestWrite+0x100>)
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 f930 	bl	8004420 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e000      	b.n	80041cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	00010008 	.word	0x00010008
 80041d8:	00010002 	.word	0x00010002

080041dc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ec:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041f4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80041f6:	4b4b      	ldr	r3, [pc, #300]	@ (8004324 <I2C_DMAAbort+0x148>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	08db      	lsrs	r3, r3, #3
 80041fc:	4a4a      	ldr	r2, [pc, #296]	@ (8004328 <I2C_DMAAbort+0x14c>)
 80041fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004202:	0a1a      	lsrs	r2, r3, #8
 8004204:	4613      	mov	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4413      	add	r3, r2
 800420a:	00da      	lsls	r2, r3, #3
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d106      	bne.n	8004224 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421a:	f043 0220 	orr.w	r2, r3, #32
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004222:	e00a      	b.n	800423a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3b01      	subs	r3, #1
 8004228:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004238:	d0ea      	beq.n	8004210 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004246:	2200      	movs	r2, #0
 8004248:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004256:	2200      	movs	r2, #0
 8004258:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004268:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2200      	movs	r2, #0
 800426e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800427c:	2200      	movs	r2, #0
 800427e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800428c:	2200      	movs	r2, #0
 800428e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0201 	bic.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b60      	cmp	r3, #96	@ 0x60
 80042aa:	d10e      	bne.n	80042ca <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2200      	movs	r2, #0
 80042c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80042c2:	6978      	ldr	r0, [r7, #20]
 80042c4:	f7fe fd7a 	bl	8002dbc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80042c8:	e027      	b.n	800431a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042ca:	7cfb      	ldrb	r3, [r7, #19]
 80042cc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80042d0:	2b28      	cmp	r3, #40	@ 0x28
 80042d2:	d117      	bne.n	8004304 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0201 	orr.w	r2, r2, #1
 80042e2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042f2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	2200      	movs	r2, #0
 80042f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2228      	movs	r2, #40	@ 0x28
 80042fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004302:	e007      	b.n	8004314 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004314:	6978      	ldr	r0, [r7, #20]
 8004316:	f7fe fd47 	bl	8002da8 <HAL_I2C_ErrorCallback>
}
 800431a:	bf00      	nop
 800431c:	3718      	adds	r7, #24
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	20000000 	.word	0x20000000
 8004328:	14f8b589 	.word	0x14f8b589

0800432c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	603b      	str	r3, [r7, #0]
 8004338:	4613      	mov	r3, r2
 800433a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800433c:	e048      	b.n	80043d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004344:	d044      	beq.n	80043d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004346:	f7fd f981 	bl	800164c <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	429a      	cmp	r2, r3
 8004354:	d302      	bcc.n	800435c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d139      	bne.n	80043d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	0c1b      	lsrs	r3, r3, #16
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b01      	cmp	r3, #1
 8004364:	d10d      	bne.n	8004382 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	43da      	mvns	r2, r3
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	4013      	ands	r3, r2
 8004372:	b29b      	uxth	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	bf0c      	ite	eq
 8004378:	2301      	moveq	r3, #1
 800437a:	2300      	movne	r3, #0
 800437c:	b2db      	uxtb	r3, r3
 800437e:	461a      	mov	r2, r3
 8004380:	e00c      	b.n	800439c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	43da      	mvns	r2, r3
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	4013      	ands	r3, r2
 800438e:	b29b      	uxth	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	bf0c      	ite	eq
 8004394:	2301      	moveq	r3, #1
 8004396:	2300      	movne	r3, #0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	461a      	mov	r2, r3
 800439c:	79fb      	ldrb	r3, [r7, #7]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d116      	bne.n	80043d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043bc:	f043 0220 	orr.w	r2, r3, #32
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e023      	b.n	8004418 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	0c1b      	lsrs	r3, r3, #16
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d10d      	bne.n	80043f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	43da      	mvns	r2, r3
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	4013      	ands	r3, r2
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	bf0c      	ite	eq
 80043ec:	2301      	moveq	r3, #1
 80043ee:	2300      	movne	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	461a      	mov	r2, r3
 80043f4:	e00c      	b.n	8004410 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	43da      	mvns	r2, r3
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	4013      	ands	r3, r2
 8004402:	b29b      	uxth	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	bf0c      	ite	eq
 8004408:	2301      	moveq	r3, #1
 800440a:	2300      	movne	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	461a      	mov	r2, r3
 8004410:	79fb      	ldrb	r3, [r7, #7]
 8004412:	429a      	cmp	r2, r3
 8004414:	d093      	beq.n	800433e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
 800442c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800442e:	e071      	b.n	8004514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800443a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800443e:	d123      	bne.n	8004488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800444e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004458:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004474:	f043 0204 	orr.w	r2, r3, #4
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e067      	b.n	8004558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448e:	d041      	beq.n	8004514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004490:	f7fd f8dc 	bl	800164c <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	429a      	cmp	r2, r3
 800449e:	d302      	bcc.n	80044a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d136      	bne.n	8004514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	0c1b      	lsrs	r3, r3, #16
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d10c      	bne.n	80044ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	43da      	mvns	r2, r3
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	4013      	ands	r3, r2
 80044bc:	b29b      	uxth	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	bf14      	ite	ne
 80044c2:	2301      	movne	r3, #1
 80044c4:	2300      	moveq	r3, #0
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	e00b      	b.n	80044e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	43da      	mvns	r2, r3
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	4013      	ands	r3, r2
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	bf14      	ite	ne
 80044dc:	2301      	movne	r3, #1
 80044de:	2300      	moveq	r3, #0
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d016      	beq.n	8004514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2220      	movs	r2, #32
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004500:	f043 0220 	orr.w	r2, r3, #32
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e021      	b.n	8004558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	0c1b      	lsrs	r3, r3, #16
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b01      	cmp	r3, #1
 800451c:	d10c      	bne.n	8004538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	43da      	mvns	r2, r3
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	4013      	ands	r3, r2
 800452a:	b29b      	uxth	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	bf14      	ite	ne
 8004530:	2301      	movne	r3, #1
 8004532:	2300      	moveq	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	e00b      	b.n	8004550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	43da      	mvns	r2, r3
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	4013      	ands	r3, r2
 8004544:	b29b      	uxth	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	bf14      	ite	ne
 800454a:	2301      	movne	r3, #1
 800454c:	2300      	moveq	r3, #0
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	f47f af6d 	bne.w	8004430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800456c:	e034      	b.n	80045d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 f8b8 	bl	80046e4 <I2C_IsAcknowledgeFailed>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e034      	b.n	80045e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004584:	d028      	beq.n	80045d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004586:	f7fd f861 	bl	800164c <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	429a      	cmp	r2, r3
 8004594:	d302      	bcc.n	800459c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d11d      	bne.n	80045d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045a6:	2b80      	cmp	r3, #128	@ 0x80
 80045a8:	d016      	beq.n	80045d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c4:	f043 0220 	orr.w	r2, r3, #32
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e007      	b.n	80045e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e2:	2b80      	cmp	r3, #128	@ 0x80
 80045e4:	d1c3      	bne.n	800456e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045fc:	e034      	b.n	8004668 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 f870 	bl	80046e4 <I2C_IsAcknowledgeFailed>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e034      	b.n	8004678 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004614:	d028      	beq.n	8004668 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004616:	f7fd f819 	bl	800164c <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	429a      	cmp	r2, r3
 8004624:	d302      	bcc.n	800462c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d11d      	bne.n	8004668 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	f003 0304 	and.w	r3, r3, #4
 8004636:	2b04      	cmp	r3, #4
 8004638:	d016      	beq.n	8004668 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2220      	movs	r2, #32
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004654:	f043 0220 	orr.w	r2, r3, #32
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e007      	b.n	8004678 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	2b04      	cmp	r3, #4
 8004674:	d1c3      	bne.n	80045fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800468c:	4b13      	ldr	r3, [pc, #76]	@ (80046dc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	08db      	lsrs	r3, r3, #3
 8004692:	4a13      	ldr	r2, [pc, #76]	@ (80046e0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004694:	fba2 2303 	umull	r2, r3, r2, r3
 8004698:	0a1a      	lsrs	r2, r3, #8
 800469a:	4613      	mov	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	3b01      	subs	r3, #1
 80046a6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d107      	bne.n	80046be <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b2:	f043 0220 	orr.w	r2, r3, #32
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e008      	b.n	80046d0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046cc:	d0e9      	beq.n	80046a2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3714      	adds	r7, #20
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	20000000 	.word	0x20000000
 80046e0:	14f8b589 	.word	0x14f8b589

080046e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046fa:	d11b      	bne.n	8004734 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004704:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004720:	f043 0204 	orr.w	r2, r3, #4
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e000      	b.n	8004736 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474e:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004752:	d103      	bne.n	800475c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800475a:	e007      	b.n	800476c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004760:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004764:	d102      	bne.n	800476c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2208      	movs	r2, #8
 800476a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e267      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d075      	beq.n	8004882 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004796:	4b88      	ldr	r3, [pc, #544]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 030c 	and.w	r3, r3, #12
 800479e:	2b04      	cmp	r3, #4
 80047a0:	d00c      	beq.n	80047bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047a2:	4b85      	ldr	r3, [pc, #532]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047aa:	2b08      	cmp	r3, #8
 80047ac:	d112      	bne.n	80047d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ae:	4b82      	ldr	r3, [pc, #520]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047ba:	d10b      	bne.n	80047d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047bc:	4b7e      	ldr	r3, [pc, #504]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d05b      	beq.n	8004880 <HAL_RCC_OscConfig+0x108>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d157      	bne.n	8004880 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e242      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047dc:	d106      	bne.n	80047ec <HAL_RCC_OscConfig+0x74>
 80047de:	4b76      	ldr	r3, [pc, #472]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a75      	ldr	r2, [pc, #468]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 80047e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047e8:	6013      	str	r3, [r2, #0]
 80047ea:	e01d      	b.n	8004828 <HAL_RCC_OscConfig+0xb0>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047f4:	d10c      	bne.n	8004810 <HAL_RCC_OscConfig+0x98>
 80047f6:	4b70      	ldr	r3, [pc, #448]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a6f      	ldr	r2, [pc, #444]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 80047fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004800:	6013      	str	r3, [r2, #0]
 8004802:	4b6d      	ldr	r3, [pc, #436]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a6c      	ldr	r2, [pc, #432]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 8004808:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	e00b      	b.n	8004828 <HAL_RCC_OscConfig+0xb0>
 8004810:	4b69      	ldr	r3, [pc, #420]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a68      	ldr	r2, [pc, #416]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 8004816:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	4b66      	ldr	r3, [pc, #408]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a65      	ldr	r2, [pc, #404]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 8004822:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d013      	beq.n	8004858 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004830:	f7fc ff0c 	bl	800164c <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004838:	f7fc ff08 	bl	800164c <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b64      	cmp	r3, #100	@ 0x64
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e207      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484a:	4b5b      	ldr	r3, [pc, #364]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0f0      	beq.n	8004838 <HAL_RCC_OscConfig+0xc0>
 8004856:	e014      	b.n	8004882 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004858:	f7fc fef8 	bl	800164c <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004860:	f7fc fef4 	bl	800164c <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b64      	cmp	r3, #100	@ 0x64
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e1f3      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004872:	4b51      	ldr	r3, [pc, #324]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f0      	bne.n	8004860 <HAL_RCC_OscConfig+0xe8>
 800487e:	e000      	b.n	8004882 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d063      	beq.n	8004956 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800488e:	4b4a      	ldr	r3, [pc, #296]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 030c 	and.w	r3, r3, #12
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00b      	beq.n	80048b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800489a:	4b47      	ldr	r3, [pc, #284]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	d11c      	bne.n	80048e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048a6:	4b44      	ldr	r3, [pc, #272]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d116      	bne.n	80048e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048b2:	4b41      	ldr	r3, [pc, #260]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d005      	beq.n	80048ca <HAL_RCC_OscConfig+0x152>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d001      	beq.n	80048ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e1c7      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ca:	4b3b      	ldr	r3, [pc, #236]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	4937      	ldr	r1, [pc, #220]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048de:	e03a      	b.n	8004956 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d020      	beq.n	800492a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048e8:	4b34      	ldr	r3, [pc, #208]	@ (80049bc <HAL_RCC_OscConfig+0x244>)
 80048ea:	2201      	movs	r2, #1
 80048ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ee:	f7fc fead 	bl	800164c <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f4:	e008      	b.n	8004908 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048f6:	f7fc fea9 	bl	800164c <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e1a8      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004908:	4b2b      	ldr	r3, [pc, #172]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0f0      	beq.n	80048f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004914:	4b28      	ldr	r3, [pc, #160]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	4925      	ldr	r1, [pc, #148]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 8004924:	4313      	orrs	r3, r2
 8004926:	600b      	str	r3, [r1, #0]
 8004928:	e015      	b.n	8004956 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800492a:	4b24      	ldr	r3, [pc, #144]	@ (80049bc <HAL_RCC_OscConfig+0x244>)
 800492c:	2200      	movs	r2, #0
 800492e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004930:	f7fc fe8c 	bl	800164c <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004938:	f7fc fe88 	bl	800164c <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e187      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800494a:	4b1b      	ldr	r3, [pc, #108]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1f0      	bne.n	8004938 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b00      	cmp	r3, #0
 8004960:	d036      	beq.n	80049d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d016      	beq.n	8004998 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800496a:	4b15      	ldr	r3, [pc, #84]	@ (80049c0 <HAL_RCC_OscConfig+0x248>)
 800496c:	2201      	movs	r2, #1
 800496e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004970:	f7fc fe6c 	bl	800164c <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004978:	f7fc fe68 	bl	800164c <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e167      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800498a:	4b0b      	ldr	r3, [pc, #44]	@ (80049b8 <HAL_RCC_OscConfig+0x240>)
 800498c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0f0      	beq.n	8004978 <HAL_RCC_OscConfig+0x200>
 8004996:	e01b      	b.n	80049d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004998:	4b09      	ldr	r3, [pc, #36]	@ (80049c0 <HAL_RCC_OscConfig+0x248>)
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800499e:	f7fc fe55 	bl	800164c <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049a4:	e00e      	b.n	80049c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049a6:	f7fc fe51 	bl	800164c <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d907      	bls.n	80049c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e150      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
 80049b8:	40023800 	.word	0x40023800
 80049bc:	42470000 	.word	0x42470000
 80049c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049c4:	4b88      	ldr	r3, [pc, #544]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 80049c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1ea      	bne.n	80049a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 8097 	beq.w	8004b0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049de:	2300      	movs	r3, #0
 80049e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049e2:	4b81      	ldr	r3, [pc, #516]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 80049e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10f      	bne.n	8004a0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ee:	2300      	movs	r3, #0
 80049f0:	60bb      	str	r3, [r7, #8]
 80049f2:	4b7d      	ldr	r3, [pc, #500]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f6:	4a7c      	ldr	r2, [pc, #496]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 80049f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80049fe:	4b7a      	ldr	r3, [pc, #488]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a06:	60bb      	str	r3, [r7, #8]
 8004a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a0e:	4b77      	ldr	r3, [pc, #476]	@ (8004bec <HAL_RCC_OscConfig+0x474>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d118      	bne.n	8004a4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a1a:	4b74      	ldr	r3, [pc, #464]	@ (8004bec <HAL_RCC_OscConfig+0x474>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a73      	ldr	r2, [pc, #460]	@ (8004bec <HAL_RCC_OscConfig+0x474>)
 8004a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a26:	f7fc fe11 	bl	800164c <HAL_GetTick>
 8004a2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a2c:	e008      	b.n	8004a40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a2e:	f7fc fe0d 	bl	800164c <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e10c      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a40:	4b6a      	ldr	r3, [pc, #424]	@ (8004bec <HAL_RCC_OscConfig+0x474>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0f0      	beq.n	8004a2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d106      	bne.n	8004a62 <HAL_RCC_OscConfig+0x2ea>
 8004a54:	4b64      	ldr	r3, [pc, #400]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a58:	4a63      	ldr	r2, [pc, #396]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004a5a:	f043 0301 	orr.w	r3, r3, #1
 8004a5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a60:	e01c      	b.n	8004a9c <HAL_RCC_OscConfig+0x324>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	2b05      	cmp	r3, #5
 8004a68:	d10c      	bne.n	8004a84 <HAL_RCC_OscConfig+0x30c>
 8004a6a:	4b5f      	ldr	r3, [pc, #380]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a6e:	4a5e      	ldr	r2, [pc, #376]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004a70:	f043 0304 	orr.w	r3, r3, #4
 8004a74:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a76:	4b5c      	ldr	r3, [pc, #368]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a7a:	4a5b      	ldr	r2, [pc, #364]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004a7c:	f043 0301 	orr.w	r3, r3, #1
 8004a80:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a82:	e00b      	b.n	8004a9c <HAL_RCC_OscConfig+0x324>
 8004a84:	4b58      	ldr	r3, [pc, #352]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a88:	4a57      	ldr	r2, [pc, #348]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004a8a:	f023 0301 	bic.w	r3, r3, #1
 8004a8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a90:	4b55      	ldr	r3, [pc, #340]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a94:	4a54      	ldr	r2, [pc, #336]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004a96:	f023 0304 	bic.w	r3, r3, #4
 8004a9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d015      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa4:	f7fc fdd2 	bl	800164c <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aaa:	e00a      	b.n	8004ac2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aac:	f7fc fdce 	bl	800164c <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e0cb      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac2:	4b49      	ldr	r3, [pc, #292]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0ee      	beq.n	8004aac <HAL_RCC_OscConfig+0x334>
 8004ace:	e014      	b.n	8004afa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ad0:	f7fc fdbc 	bl	800164c <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ad6:	e00a      	b.n	8004aee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ad8:	f7fc fdb8 	bl	800164c <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e0b5      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aee:	4b3e      	ldr	r3, [pc, #248]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1ee      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004afa:	7dfb      	ldrb	r3, [r7, #23]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d105      	bne.n	8004b0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b00:	4b39      	ldr	r3, [pc, #228]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b04:	4a38      	ldr	r2, [pc, #224]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004b06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b0a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 80a1 	beq.w	8004c58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b16:	4b34      	ldr	r3, [pc, #208]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 030c 	and.w	r3, r3, #12
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d05c      	beq.n	8004bdc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d141      	bne.n	8004bae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b2a:	4b31      	ldr	r3, [pc, #196]	@ (8004bf0 <HAL_RCC_OscConfig+0x478>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b30:	f7fc fd8c 	bl	800164c <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b38:	f7fc fd88 	bl	800164c <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e087      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b4a:	4b27      	ldr	r3, [pc, #156]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1f0      	bne.n	8004b38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	69da      	ldr	r2, [r3, #28]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b64:	019b      	lsls	r3, r3, #6
 8004b66:	431a      	orrs	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b6c:	085b      	lsrs	r3, r3, #1
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	041b      	lsls	r3, r3, #16
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b78:	061b      	lsls	r3, r3, #24
 8004b7a:	491b      	ldr	r1, [pc, #108]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b80:	4b1b      	ldr	r3, [pc, #108]	@ (8004bf0 <HAL_RCC_OscConfig+0x478>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b86:	f7fc fd61 	bl	800164c <HAL_GetTick>
 8004b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b8c:	e008      	b.n	8004ba0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b8e:	f7fc fd5d 	bl	800164c <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e05c      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba0:	4b11      	ldr	r3, [pc, #68]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0f0      	beq.n	8004b8e <HAL_RCC_OscConfig+0x416>
 8004bac:	e054      	b.n	8004c58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bae:	4b10      	ldr	r3, [pc, #64]	@ (8004bf0 <HAL_RCC_OscConfig+0x478>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb4:	f7fc fd4a 	bl	800164c <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bbc:	f7fc fd46 	bl	800164c <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e045      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bce:	4b06      	ldr	r3, [pc, #24]	@ (8004be8 <HAL_RCC_OscConfig+0x470>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1f0      	bne.n	8004bbc <HAL_RCC_OscConfig+0x444>
 8004bda:	e03d      	b.n	8004c58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d107      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e038      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
 8004be8:	40023800 	.word	0x40023800
 8004bec:	40007000 	.word	0x40007000
 8004bf0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8004c64 <HAL_RCC_OscConfig+0x4ec>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d028      	beq.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d121      	bne.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d11a      	bne.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004c24:	4013      	ands	r3, r2
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d111      	bne.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3a:	085b      	lsrs	r3, r3, #1
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d107      	bne.n	8004c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d001      	beq.n	8004c58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e000      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	40023800 	.word	0x40023800

08004c68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e0cc      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c7c:	4b68      	ldr	r3, [pc, #416]	@ (8004e20 <HAL_RCC_ClockConfig+0x1b8>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d90c      	bls.n	8004ca4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8a:	4b65      	ldr	r3, [pc, #404]	@ (8004e20 <HAL_RCC_ClockConfig+0x1b8>)
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c92:	4b63      	ldr	r3, [pc, #396]	@ (8004e20 <HAL_RCC_ClockConfig+0x1b8>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d001      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e0b8      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d020      	beq.n	8004cf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d005      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cbc:	4b59      	ldr	r3, [pc, #356]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	4a58      	ldr	r2, [pc, #352]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004cc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d005      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cd4:	4b53      	ldr	r3, [pc, #332]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	4a52      	ldr	r2, [pc, #328]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004cde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce0:	4b50      	ldr	r3, [pc, #320]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	494d      	ldr	r1, [pc, #308]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d044      	beq.n	8004d88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d107      	bne.n	8004d16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d06:	4b47      	ldr	r3, [pc, #284]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d119      	bne.n	8004d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e07f      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d003      	beq.n	8004d26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d22:	2b03      	cmp	r3, #3
 8004d24:	d107      	bne.n	8004d36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d26:	4b3f      	ldr	r3, [pc, #252]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d109      	bne.n	8004d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e06f      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d36:	4b3b      	ldr	r3, [pc, #236]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e067      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d46:	4b37      	ldr	r3, [pc, #220]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f023 0203 	bic.w	r2, r3, #3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	4934      	ldr	r1, [pc, #208]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d58:	f7fc fc78 	bl	800164c <HAL_GetTick>
 8004d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d5e:	e00a      	b.n	8004d76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d60:	f7fc fc74 	bl	800164c <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e04f      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d76:	4b2b      	ldr	r3, [pc, #172]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 020c 	and.w	r2, r3, #12
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d1eb      	bne.n	8004d60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d88:	4b25      	ldr	r3, [pc, #148]	@ (8004e20 <HAL_RCC_ClockConfig+0x1b8>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d20c      	bcs.n	8004db0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d96:	4b22      	ldr	r3, [pc, #136]	@ (8004e20 <HAL_RCC_ClockConfig+0x1b8>)
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d9e:	4b20      	ldr	r3, [pc, #128]	@ (8004e20 <HAL_RCC_ClockConfig+0x1b8>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d001      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e032      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d008      	beq.n	8004dce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dbc:	4b19      	ldr	r3, [pc, #100]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	4916      	ldr	r1, [pc, #88]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0308 	and.w	r3, r3, #8
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d009      	beq.n	8004dee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dda:	4b12      	ldr	r3, [pc, #72]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	490e      	ldr	r1, [pc, #56]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004dee:	f000 f821 	bl	8004e34 <HAL_RCC_GetSysClockFreq>
 8004df2:	4602      	mov	r2, r0
 8004df4:	4b0b      	ldr	r3, [pc, #44]	@ (8004e24 <HAL_RCC_ClockConfig+0x1bc>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	091b      	lsrs	r3, r3, #4
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	490a      	ldr	r1, [pc, #40]	@ (8004e28 <HAL_RCC_ClockConfig+0x1c0>)
 8004e00:	5ccb      	ldrb	r3, [r1, r3]
 8004e02:	fa22 f303 	lsr.w	r3, r2, r3
 8004e06:	4a09      	ldr	r2, [pc, #36]	@ (8004e2c <HAL_RCC_ClockConfig+0x1c4>)
 8004e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e0a:	4b09      	ldr	r3, [pc, #36]	@ (8004e30 <HAL_RCC_ClockConfig+0x1c8>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fc fbd8 	bl	80015c4 <HAL_InitTick>

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	40023c00 	.word	0x40023c00
 8004e24:	40023800 	.word	0x40023800
 8004e28:	080059dc 	.word	0x080059dc
 8004e2c:	20000000 	.word	0x20000000
 8004e30:	20000018 	.word	0x20000018

08004e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e38:	b094      	sub	sp, #80	@ 0x50
 8004e3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e40:	2300      	movs	r3, #0
 8004e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e44:	2300      	movs	r3, #0
 8004e46:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e4c:	4b79      	ldr	r3, [pc, #484]	@ (8005034 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f003 030c 	and.w	r3, r3, #12
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d00d      	beq.n	8004e74 <HAL_RCC_GetSysClockFreq+0x40>
 8004e58:	2b08      	cmp	r3, #8
 8004e5a:	f200 80e1 	bhi.w	8005020 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <HAL_RCC_GetSysClockFreq+0x34>
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	d003      	beq.n	8004e6e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e66:	e0db      	b.n	8005020 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e68:	4b73      	ldr	r3, [pc, #460]	@ (8005038 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e6a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004e6c:	e0db      	b.n	8005026 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e6e:	4b73      	ldr	r3, [pc, #460]	@ (800503c <HAL_RCC_GetSysClockFreq+0x208>)
 8004e70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e72:	e0d8      	b.n	8005026 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e74:	4b6f      	ldr	r3, [pc, #444]	@ (8005034 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e7c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e7e:	4b6d      	ldr	r3, [pc, #436]	@ (8005034 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d063      	beq.n	8004f52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e8a:	4b6a      	ldr	r3, [pc, #424]	@ (8005034 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	099b      	lsrs	r3, r3, #6
 8004e90:	2200      	movs	r2, #0
 8004e92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e94:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ea2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004ea6:	4622      	mov	r2, r4
 8004ea8:	462b      	mov	r3, r5
 8004eaa:	f04f 0000 	mov.w	r0, #0
 8004eae:	f04f 0100 	mov.w	r1, #0
 8004eb2:	0159      	lsls	r1, r3, #5
 8004eb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004eb8:	0150      	lsls	r0, r2, #5
 8004eba:	4602      	mov	r2, r0
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	4621      	mov	r1, r4
 8004ec0:	1a51      	subs	r1, r2, r1
 8004ec2:	6139      	str	r1, [r7, #16]
 8004ec4:	4629      	mov	r1, r5
 8004ec6:	eb63 0301 	sbc.w	r3, r3, r1
 8004eca:	617b      	str	r3, [r7, #20]
 8004ecc:	f04f 0200 	mov.w	r2, #0
 8004ed0:	f04f 0300 	mov.w	r3, #0
 8004ed4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ed8:	4659      	mov	r1, fp
 8004eda:	018b      	lsls	r3, r1, #6
 8004edc:	4651      	mov	r1, sl
 8004ede:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ee2:	4651      	mov	r1, sl
 8004ee4:	018a      	lsls	r2, r1, #6
 8004ee6:	4651      	mov	r1, sl
 8004ee8:	ebb2 0801 	subs.w	r8, r2, r1
 8004eec:	4659      	mov	r1, fp
 8004eee:	eb63 0901 	sbc.w	r9, r3, r1
 8004ef2:	f04f 0200 	mov.w	r2, #0
 8004ef6:	f04f 0300 	mov.w	r3, #0
 8004efa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004efe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f06:	4690      	mov	r8, r2
 8004f08:	4699      	mov	r9, r3
 8004f0a:	4623      	mov	r3, r4
 8004f0c:	eb18 0303 	adds.w	r3, r8, r3
 8004f10:	60bb      	str	r3, [r7, #8]
 8004f12:	462b      	mov	r3, r5
 8004f14:	eb49 0303 	adc.w	r3, r9, r3
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	f04f 0200 	mov.w	r2, #0
 8004f1e:	f04f 0300 	mov.w	r3, #0
 8004f22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f26:	4629      	mov	r1, r5
 8004f28:	024b      	lsls	r3, r1, #9
 8004f2a:	4621      	mov	r1, r4
 8004f2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f30:	4621      	mov	r1, r4
 8004f32:	024a      	lsls	r2, r1, #9
 8004f34:	4610      	mov	r0, r2
 8004f36:	4619      	mov	r1, r3
 8004f38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f44:	f7fb f948 	bl	80001d8 <__aeabi_uldivmod>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f50:	e058      	b.n	8005004 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f52:	4b38      	ldr	r3, [pc, #224]	@ (8005034 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	099b      	lsrs	r3, r3, #6
 8004f58:	2200      	movs	r2, #0
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	4611      	mov	r1, r2
 8004f5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f62:	623b      	str	r3, [r7, #32]
 8004f64:	2300      	movs	r3, #0
 8004f66:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f6c:	4642      	mov	r2, r8
 8004f6e:	464b      	mov	r3, r9
 8004f70:	f04f 0000 	mov.w	r0, #0
 8004f74:	f04f 0100 	mov.w	r1, #0
 8004f78:	0159      	lsls	r1, r3, #5
 8004f7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f7e:	0150      	lsls	r0, r2, #5
 8004f80:	4602      	mov	r2, r0
 8004f82:	460b      	mov	r3, r1
 8004f84:	4641      	mov	r1, r8
 8004f86:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f8a:	4649      	mov	r1, r9
 8004f8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f90:	f04f 0200 	mov.w	r2, #0
 8004f94:	f04f 0300 	mov.w	r3, #0
 8004f98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004fa0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004fa4:	ebb2 040a 	subs.w	r4, r2, sl
 8004fa8:	eb63 050b 	sbc.w	r5, r3, fp
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	f04f 0300 	mov.w	r3, #0
 8004fb4:	00eb      	lsls	r3, r5, #3
 8004fb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fba:	00e2      	lsls	r2, r4, #3
 8004fbc:	4614      	mov	r4, r2
 8004fbe:	461d      	mov	r5, r3
 8004fc0:	4643      	mov	r3, r8
 8004fc2:	18e3      	adds	r3, r4, r3
 8004fc4:	603b      	str	r3, [r7, #0]
 8004fc6:	464b      	mov	r3, r9
 8004fc8:	eb45 0303 	adc.w	r3, r5, r3
 8004fcc:	607b      	str	r3, [r7, #4]
 8004fce:	f04f 0200 	mov.w	r2, #0
 8004fd2:	f04f 0300 	mov.w	r3, #0
 8004fd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004fda:	4629      	mov	r1, r5
 8004fdc:	028b      	lsls	r3, r1, #10
 8004fde:	4621      	mov	r1, r4
 8004fe0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fe4:	4621      	mov	r1, r4
 8004fe6:	028a      	lsls	r2, r1, #10
 8004fe8:	4610      	mov	r0, r2
 8004fea:	4619      	mov	r1, r3
 8004fec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fee:	2200      	movs	r2, #0
 8004ff0:	61bb      	str	r3, [r7, #24]
 8004ff2:	61fa      	str	r2, [r7, #28]
 8004ff4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ff8:	f7fb f8ee 	bl	80001d8 <__aeabi_uldivmod>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	460b      	mov	r3, r1
 8005000:	4613      	mov	r3, r2
 8005002:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005004:	4b0b      	ldr	r3, [pc, #44]	@ (8005034 <HAL_RCC_GetSysClockFreq+0x200>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	0c1b      	lsrs	r3, r3, #16
 800500a:	f003 0303 	and.w	r3, r3, #3
 800500e:	3301      	adds	r3, #1
 8005010:	005b      	lsls	r3, r3, #1
 8005012:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005014:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005016:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005018:	fbb2 f3f3 	udiv	r3, r2, r3
 800501c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800501e:	e002      	b.n	8005026 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005020:	4b05      	ldr	r3, [pc, #20]	@ (8005038 <HAL_RCC_GetSysClockFreq+0x204>)
 8005022:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005024:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005026:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005028:	4618      	mov	r0, r3
 800502a:	3750      	adds	r7, #80	@ 0x50
 800502c:	46bd      	mov	sp, r7
 800502e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005032:	bf00      	nop
 8005034:	40023800 	.word	0x40023800
 8005038:	00f42400 	.word	0x00f42400
 800503c:	007a1200 	.word	0x007a1200

08005040 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005044:	4b03      	ldr	r3, [pc, #12]	@ (8005054 <HAL_RCC_GetHCLKFreq+0x14>)
 8005046:	681b      	ldr	r3, [r3, #0]
}
 8005048:	4618      	mov	r0, r3
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	20000000 	.word	0x20000000

08005058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800505c:	f7ff fff0 	bl	8005040 <HAL_RCC_GetHCLKFreq>
 8005060:	4602      	mov	r2, r0
 8005062:	4b05      	ldr	r3, [pc, #20]	@ (8005078 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	0a9b      	lsrs	r3, r3, #10
 8005068:	f003 0307 	and.w	r3, r3, #7
 800506c:	4903      	ldr	r1, [pc, #12]	@ (800507c <HAL_RCC_GetPCLK1Freq+0x24>)
 800506e:	5ccb      	ldrb	r3, [r1, r3]
 8005070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005074:	4618      	mov	r0, r3
 8005076:	bd80      	pop	{r7, pc}
 8005078:	40023800 	.word	0x40023800
 800507c:	080059ec 	.word	0x080059ec

08005080 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e041      	b.n	8005116 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d106      	bne.n	80050ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7fb fdb8 	bl	8000c1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	3304      	adds	r3, #4
 80050bc:	4619      	mov	r1, r3
 80050be:	4610      	mov	r0, r2
 80050c0:	f000 fa9e 	bl	8005600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
	...

08005120 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b01      	cmp	r3, #1
 8005132:	d001      	beq.n	8005138 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e044      	b.n	80051c2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f042 0201 	orr.w	r2, r2, #1
 800514e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a1e      	ldr	r2, [pc, #120]	@ (80051d0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d018      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x6c>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005162:	d013      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x6c>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a1a      	ldr	r2, [pc, #104]	@ (80051d4 <HAL_TIM_Base_Start_IT+0xb4>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d00e      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x6c>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a19      	ldr	r2, [pc, #100]	@ (80051d8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d009      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x6c>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a17      	ldr	r2, [pc, #92]	@ (80051dc <HAL_TIM_Base_Start_IT+0xbc>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d004      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x6c>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a16      	ldr	r2, [pc, #88]	@ (80051e0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d111      	bne.n	80051b0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2b06      	cmp	r3, #6
 800519c:	d010      	beq.n	80051c0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f042 0201 	orr.w	r2, r2, #1
 80051ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ae:	e007      	b.n	80051c0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0201 	orr.w	r2, r2, #1
 80051be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	40010000 	.word	0x40010000
 80051d4:	40000400 	.word	0x40000400
 80051d8:	40000800 	.word	0x40000800
 80051dc:	40000c00 	.word	0x40000c00
 80051e0:	40014000 	.word	0x40014000

080051e4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0201 	bic.w	r2, r2, #1
 80051fa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6a1a      	ldr	r2, [r3, #32]
 8005202:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005206:	4013      	ands	r3, r2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10f      	bne.n	800522c <HAL_TIM_Base_Stop_IT+0x48>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6a1a      	ldr	r2, [r3, #32]
 8005212:	f240 4344 	movw	r3, #1092	@ 0x444
 8005216:	4013      	ands	r3, r2
 8005218:	2b00      	cmp	r3, #0
 800521a:	d107      	bne.n	800522c <HAL_TIM_Base_Stop_IT+0x48>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0201 	bic.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b084      	sub	sp, #16
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d020      	beq.n	80052a6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d01b      	beq.n	80052a6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f06f 0202 	mvn.w	r2, #2
 8005276:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	f003 0303 	and.w	r3, r3, #3
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f999 	bl	80055c4 <HAL_TIM_IC_CaptureCallback>
 8005292:	e005      	b.n	80052a0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f98b 	bl	80055b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f99c 	bl	80055d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d020      	beq.n	80052f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f003 0304 	and.w	r3, r3, #4
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d01b      	beq.n	80052f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f06f 0204 	mvn.w	r2, #4
 80052c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2202      	movs	r2, #2
 80052c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 f973 	bl	80055c4 <HAL_TIM_IC_CaptureCallback>
 80052de:	e005      	b.n	80052ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f965 	bl	80055b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f976 	bl	80055d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	f003 0308 	and.w	r3, r3, #8
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d020      	beq.n	800533e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	2b00      	cmp	r3, #0
 8005304:	d01b      	beq.n	800533e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f06f 0208 	mvn.w	r2, #8
 800530e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2204      	movs	r2, #4
 8005314:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	69db      	ldr	r3, [r3, #28]
 800531c:	f003 0303 	and.w	r3, r3, #3
 8005320:	2b00      	cmp	r3, #0
 8005322:	d003      	beq.n	800532c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 f94d 	bl	80055c4 <HAL_TIM_IC_CaptureCallback>
 800532a:	e005      	b.n	8005338 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f93f 	bl	80055b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f950 	bl	80055d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	f003 0310 	and.w	r3, r3, #16
 8005344:	2b00      	cmp	r3, #0
 8005346:	d020      	beq.n	800538a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f003 0310 	and.w	r3, r3, #16
 800534e:	2b00      	cmp	r3, #0
 8005350:	d01b      	beq.n	800538a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f06f 0210 	mvn.w	r2, #16
 800535a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2208      	movs	r2, #8
 8005360:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800536c:	2b00      	cmp	r3, #0
 800536e:	d003      	beq.n	8005378 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 f927 	bl	80055c4 <HAL_TIM_IC_CaptureCallback>
 8005376:	e005      	b.n	8005384 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f919 	bl	80055b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f92a 	bl	80055d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00c      	beq.n	80053ae <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d007      	beq.n	80053ae <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f06f 0201 	mvn.w	r2, #1
 80053a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7fb f8a1 	bl	80004f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00c      	beq.n	80053d2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d007      	beq.n	80053d2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80053ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 fab5 	bl	800593c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00c      	beq.n	80053f6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d007      	beq.n	80053f6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80053ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f8fb 	bl	80055ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f003 0320 	and.w	r3, r3, #32
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00c      	beq.n	800541a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f003 0320 	and.w	r3, r3, #32
 8005406:	2b00      	cmp	r3, #0
 8005408:	d007      	beq.n	800541a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f06f 0220 	mvn.w	r2, #32
 8005412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 fa87 	bl	8005928 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800541a:	bf00      	nop
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b084      	sub	sp, #16
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
 800542a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800542c:	2300      	movs	r3, #0
 800542e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005436:	2b01      	cmp	r3, #1
 8005438:	d101      	bne.n	800543e <HAL_TIM_ConfigClockSource+0x1c>
 800543a:	2302      	movs	r3, #2
 800543c:	e0b4      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x186>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2202      	movs	r2, #2
 800544a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800545c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005464:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005476:	d03e      	beq.n	80054f6 <HAL_TIM_ConfigClockSource+0xd4>
 8005478:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800547c:	f200 8087 	bhi.w	800558e <HAL_TIM_ConfigClockSource+0x16c>
 8005480:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005484:	f000 8086 	beq.w	8005594 <HAL_TIM_ConfigClockSource+0x172>
 8005488:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800548c:	d87f      	bhi.n	800558e <HAL_TIM_ConfigClockSource+0x16c>
 800548e:	2b70      	cmp	r3, #112	@ 0x70
 8005490:	d01a      	beq.n	80054c8 <HAL_TIM_ConfigClockSource+0xa6>
 8005492:	2b70      	cmp	r3, #112	@ 0x70
 8005494:	d87b      	bhi.n	800558e <HAL_TIM_ConfigClockSource+0x16c>
 8005496:	2b60      	cmp	r3, #96	@ 0x60
 8005498:	d050      	beq.n	800553c <HAL_TIM_ConfigClockSource+0x11a>
 800549a:	2b60      	cmp	r3, #96	@ 0x60
 800549c:	d877      	bhi.n	800558e <HAL_TIM_ConfigClockSource+0x16c>
 800549e:	2b50      	cmp	r3, #80	@ 0x50
 80054a0:	d03c      	beq.n	800551c <HAL_TIM_ConfigClockSource+0xfa>
 80054a2:	2b50      	cmp	r3, #80	@ 0x50
 80054a4:	d873      	bhi.n	800558e <HAL_TIM_ConfigClockSource+0x16c>
 80054a6:	2b40      	cmp	r3, #64	@ 0x40
 80054a8:	d058      	beq.n	800555c <HAL_TIM_ConfigClockSource+0x13a>
 80054aa:	2b40      	cmp	r3, #64	@ 0x40
 80054ac:	d86f      	bhi.n	800558e <HAL_TIM_ConfigClockSource+0x16c>
 80054ae:	2b30      	cmp	r3, #48	@ 0x30
 80054b0:	d064      	beq.n	800557c <HAL_TIM_ConfigClockSource+0x15a>
 80054b2:	2b30      	cmp	r3, #48	@ 0x30
 80054b4:	d86b      	bhi.n	800558e <HAL_TIM_ConfigClockSource+0x16c>
 80054b6:	2b20      	cmp	r3, #32
 80054b8:	d060      	beq.n	800557c <HAL_TIM_ConfigClockSource+0x15a>
 80054ba:	2b20      	cmp	r3, #32
 80054bc:	d867      	bhi.n	800558e <HAL_TIM_ConfigClockSource+0x16c>
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d05c      	beq.n	800557c <HAL_TIM_ConfigClockSource+0x15a>
 80054c2:	2b10      	cmp	r3, #16
 80054c4:	d05a      	beq.n	800557c <HAL_TIM_ConfigClockSource+0x15a>
 80054c6:	e062      	b.n	800558e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054d8:	f000 f998 	bl	800580c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80054ea:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	609a      	str	r2, [r3, #8]
      break;
 80054f4:	e04f      	b.n	8005596 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005506:	f000 f981 	bl	800580c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005518:	609a      	str	r2, [r3, #8]
      break;
 800551a:	e03c      	b.n	8005596 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005528:	461a      	mov	r2, r3
 800552a:	f000 f8f5 	bl	8005718 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2150      	movs	r1, #80	@ 0x50
 8005534:	4618      	mov	r0, r3
 8005536:	f000 f94e 	bl	80057d6 <TIM_ITRx_SetConfig>
      break;
 800553a:	e02c      	b.n	8005596 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005548:	461a      	mov	r2, r3
 800554a:	f000 f914 	bl	8005776 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2160      	movs	r1, #96	@ 0x60
 8005554:	4618      	mov	r0, r3
 8005556:	f000 f93e 	bl	80057d6 <TIM_ITRx_SetConfig>
      break;
 800555a:	e01c      	b.n	8005596 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005568:	461a      	mov	r2, r3
 800556a:	f000 f8d5 	bl	8005718 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2140      	movs	r1, #64	@ 0x40
 8005574:	4618      	mov	r0, r3
 8005576:	f000 f92e 	bl	80057d6 <TIM_ITRx_SetConfig>
      break;
 800557a:	e00c      	b.n	8005596 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4619      	mov	r1, r3
 8005586:	4610      	mov	r0, r2
 8005588:	f000 f925 	bl	80057d6 <TIM_ITRx_SetConfig>
      break;
 800558c:	e003      	b.n	8005596 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	73fb      	strb	r3, [r7, #15]
      break;
 8005592:	e000      	b.n	8005596 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005594:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a3a      	ldr	r2, [pc, #232]	@ (80056fc <TIM_Base_SetConfig+0xfc>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d00f      	beq.n	8005638 <TIM_Base_SetConfig+0x38>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800561e:	d00b      	beq.n	8005638 <TIM_Base_SetConfig+0x38>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a37      	ldr	r2, [pc, #220]	@ (8005700 <TIM_Base_SetConfig+0x100>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d007      	beq.n	8005638 <TIM_Base_SetConfig+0x38>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a36      	ldr	r2, [pc, #216]	@ (8005704 <TIM_Base_SetConfig+0x104>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d003      	beq.n	8005638 <TIM_Base_SetConfig+0x38>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a35      	ldr	r2, [pc, #212]	@ (8005708 <TIM_Base_SetConfig+0x108>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d108      	bne.n	800564a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800563e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	4313      	orrs	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a2b      	ldr	r2, [pc, #172]	@ (80056fc <TIM_Base_SetConfig+0xfc>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d01b      	beq.n	800568a <TIM_Base_SetConfig+0x8a>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005658:	d017      	beq.n	800568a <TIM_Base_SetConfig+0x8a>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a28      	ldr	r2, [pc, #160]	@ (8005700 <TIM_Base_SetConfig+0x100>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d013      	beq.n	800568a <TIM_Base_SetConfig+0x8a>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a27      	ldr	r2, [pc, #156]	@ (8005704 <TIM_Base_SetConfig+0x104>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d00f      	beq.n	800568a <TIM_Base_SetConfig+0x8a>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a26      	ldr	r2, [pc, #152]	@ (8005708 <TIM_Base_SetConfig+0x108>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d00b      	beq.n	800568a <TIM_Base_SetConfig+0x8a>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a25      	ldr	r2, [pc, #148]	@ (800570c <TIM_Base_SetConfig+0x10c>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d007      	beq.n	800568a <TIM_Base_SetConfig+0x8a>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a24      	ldr	r2, [pc, #144]	@ (8005710 <TIM_Base_SetConfig+0x110>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d003      	beq.n	800568a <TIM_Base_SetConfig+0x8a>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a23      	ldr	r2, [pc, #140]	@ (8005714 <TIM_Base_SetConfig+0x114>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d108      	bne.n	800569c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	4313      	orrs	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a0e      	ldr	r2, [pc, #56]	@ (80056fc <TIM_Base_SetConfig+0xfc>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d103      	bne.n	80056d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	691a      	ldr	r2, [r3, #16]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d105      	bne.n	80056ee <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	f023 0201 	bic.w	r2, r3, #1
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	611a      	str	r2, [r3, #16]
  }
}
 80056ee:	bf00      	nop
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	40010000 	.word	0x40010000
 8005700:	40000400 	.word	0x40000400
 8005704:	40000800 	.word	0x40000800
 8005708:	40000c00 	.word	0x40000c00
 800570c:	40014000 	.word	0x40014000
 8005710:	40014400 	.word	0x40014400
 8005714:	40014800 	.word	0x40014800

08005718 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005718:	b480      	push	{r7}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	f023 0201 	bic.w	r2, r3, #1
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	011b      	lsls	r3, r3, #4
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	4313      	orrs	r3, r2
 800574c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f023 030a 	bic.w	r3, r3, #10
 8005754:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	4313      	orrs	r3, r2
 800575c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	621a      	str	r2, [r3, #32]
}
 800576a:	bf00      	nop
 800576c:	371c      	adds	r7, #28
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005776:	b480      	push	{r7}
 8005778:	b087      	sub	sp, #28
 800577a:	af00      	add	r7, sp, #0
 800577c:	60f8      	str	r0, [r7, #12]
 800577e:	60b9      	str	r1, [r7, #8]
 8005780:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	f023 0210 	bic.w	r2, r3, #16
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	031b      	lsls	r3, r3, #12
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80057b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	011b      	lsls	r3, r3, #4
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	621a      	str	r2, [r3, #32]
}
 80057ca:	bf00      	nop
 80057cc:	371c      	adds	r7, #28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b085      	sub	sp, #20
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	f043 0307 	orr.w	r3, r3, #7
 80057f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	609a      	str	r2, [r3, #8]
}
 8005800:	bf00      	nop
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005826:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	021a      	lsls	r2, r3, #8
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	431a      	orrs	r2, r3
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4313      	orrs	r3, r2
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	4313      	orrs	r3, r2
 8005838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	609a      	str	r2, [r3, #8]
}
 8005840:	bf00      	nop
 8005842:	371c      	adds	r7, #28
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800585c:	2b01      	cmp	r3, #1
 800585e:	d101      	bne.n	8005864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005860:	2302      	movs	r3, #2
 8005862:	e050      	b.n	8005906 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800588a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a1c      	ldr	r2, [pc, #112]	@ (8005914 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d018      	beq.n	80058da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058b0:	d013      	beq.n	80058da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a18      	ldr	r2, [pc, #96]	@ (8005918 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d00e      	beq.n	80058da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a16      	ldr	r2, [pc, #88]	@ (800591c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d009      	beq.n	80058da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a15      	ldr	r2, [pc, #84]	@ (8005920 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d004      	beq.n	80058da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a13      	ldr	r2, [pc, #76]	@ (8005924 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d10c      	bne.n	80058f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	40010000 	.word	0x40010000
 8005918:	40000400 	.word	0x40000400
 800591c:	40000800 	.word	0x40000800
 8005920:	40000c00 	.word	0x40000c00
 8005924:	40014000 	.word	0x40014000

08005928 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <memset>:
 8005950:	4402      	add	r2, r0
 8005952:	4603      	mov	r3, r0
 8005954:	4293      	cmp	r3, r2
 8005956:	d100      	bne.n	800595a <memset+0xa>
 8005958:	4770      	bx	lr
 800595a:	f803 1b01 	strb.w	r1, [r3], #1
 800595e:	e7f9      	b.n	8005954 <memset+0x4>

08005960 <__libc_init_array>:
 8005960:	b570      	push	{r4, r5, r6, lr}
 8005962:	4d0d      	ldr	r5, [pc, #52]	@ (8005998 <__libc_init_array+0x38>)
 8005964:	4c0d      	ldr	r4, [pc, #52]	@ (800599c <__libc_init_array+0x3c>)
 8005966:	1b64      	subs	r4, r4, r5
 8005968:	10a4      	asrs	r4, r4, #2
 800596a:	2600      	movs	r6, #0
 800596c:	42a6      	cmp	r6, r4
 800596e:	d109      	bne.n	8005984 <__libc_init_array+0x24>
 8005970:	4d0b      	ldr	r5, [pc, #44]	@ (80059a0 <__libc_init_array+0x40>)
 8005972:	4c0c      	ldr	r4, [pc, #48]	@ (80059a4 <__libc_init_array+0x44>)
 8005974:	f000 f826 	bl	80059c4 <_init>
 8005978:	1b64      	subs	r4, r4, r5
 800597a:	10a4      	asrs	r4, r4, #2
 800597c:	2600      	movs	r6, #0
 800597e:	42a6      	cmp	r6, r4
 8005980:	d105      	bne.n	800598e <__libc_init_array+0x2e>
 8005982:	bd70      	pop	{r4, r5, r6, pc}
 8005984:	f855 3b04 	ldr.w	r3, [r5], #4
 8005988:	4798      	blx	r3
 800598a:	3601      	adds	r6, #1
 800598c:	e7ee      	b.n	800596c <__libc_init_array+0xc>
 800598e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005992:	4798      	blx	r3
 8005994:	3601      	adds	r6, #1
 8005996:	e7f2      	b.n	800597e <__libc_init_array+0x1e>
 8005998:	080059fc 	.word	0x080059fc
 800599c:	080059fc 	.word	0x080059fc
 80059a0:	080059fc 	.word	0x080059fc
 80059a4:	08005a00 	.word	0x08005a00

080059a8 <memcpy>:
 80059a8:	440a      	add	r2, r1
 80059aa:	4291      	cmp	r1, r2
 80059ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80059b0:	d100      	bne.n	80059b4 <memcpy+0xc>
 80059b2:	4770      	bx	lr
 80059b4:	b510      	push	{r4, lr}
 80059b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059be:	4291      	cmp	r1, r2
 80059c0:	d1f9      	bne.n	80059b6 <memcpy+0xe>
 80059c2:	bd10      	pop	{r4, pc}

080059c4 <_init>:
 80059c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c6:	bf00      	nop
 80059c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ca:	bc08      	pop	{r3}
 80059cc:	469e      	mov	lr, r3
 80059ce:	4770      	bx	lr

080059d0 <_fini>:
 80059d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d2:	bf00      	nop
 80059d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059d6:	bc08      	pop	{r3}
 80059d8:	469e      	mov	lr, r3
 80059da:	4770      	bx	lr
