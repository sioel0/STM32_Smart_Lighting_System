
Smart_Lighting_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076f8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08007890  08007890  00008890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078b8  080078b8  00009020  2**0
                  CONTENTS
  4 .ARM          00000008  080078b8  080078b8  000088b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078c0  080078c0  00009020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078c0  080078c0  000088c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080078c4  080078c4  000088c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  080078c8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000020  080078e8  00009020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  080078e8  000092c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144e6  00000000  00000000  00009050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fe7  00000000  00000000  0001d536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  00020520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e96  00000000  00000000  000217d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ffe  00000000  00000000  0002266e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ae1  00000000  00000000  0003b66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d13d  00000000  00000000  0005314d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f028a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ce4  00000000  00000000  000f02d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000f4fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000020 	.word	0x20000020
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007878 	.word	0x08007878

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000024 	.word	0x20000024
 80001d4:	08007878 	.word	0x08007878

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == PANIC_BUTTON_PIN) {
 80004d2:	88fb      	ldrh	r3, [r7, #6]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d109      	bne.n	80004ec <HAL_GPIO_EXTI_Callback+0x24>
		if(panic_is_active()) {
 80004d8:	f001 f928 	bl	800172c <panic_is_active>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d004      	beq.n	80004ec <HAL_GPIO_EXTI_Callback+0x24>
			panic_button_set();
 80004e2:	f001 f993 	bl	800180c <panic_button_set>
			comm_send_data(panic_packet);
 80004e6:	4806      	ldr	r0, [pc, #24]	@ (8000500 <HAL_GPIO_EXTI_Callback+0x38>)
 80004e8:	f000 fe08 	bl	80010fc <comm_send_data>
		}
	}
	if(GPIO_Pin == MOVEMENT_SENSOR_PIN) {
 80004ec:	88fb      	ldrh	r3, [r7, #6]
 80004ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80004f2:	d101      	bne.n	80004f8 <HAL_GPIO_EXTI_Callback+0x30>
		sensors_movement_detected();
 80004f4:	f001 fa86 	bl	8001a04 <sensors_movement_detected>
	}
}
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	08007894 	.word	0x08007894

08000504 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) {
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a10      	ldr	r2, [pc, #64]	@ (8000554 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d101      	bne.n	800051a <HAL_TIM_PeriodElapsedCallback+0x16>
		panic_timer_elapsed();
 8000516:	f001 fa21 	bl	800195c <panic_timer_elapsed>
	}
	if(htim->Instance == TIM4) {
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a0e      	ldr	r2, [pc, #56]	@ (8000558 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d101      	bne.n	8000528 <HAL_TIM_PeriodElapsedCallback+0x24>
		light_level_check();
 8000524:	f000 ffb6 	bl	8001494 <light_level_check>
	}
	if(htim->Instance == TIM9) {
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a0b      	ldr	r2, [pc, #44]	@ (800055c <HAL_TIM_PeriodElapsedCallback+0x58>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d104      	bne.n	800053c <HAL_TIM_PeriodElapsedCallback+0x38>
		sensors_movement_detected_reset();
 8000532:	f001 fa7f 	bl	8001a34 <sensors_movement_detected_reset>
		HAL_TIM_Base_Stop_IT(&htim9);
 8000536:	480a      	ldr	r0, [pc, #40]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000538:	f005 fcf4 	bl	8005f24 <HAL_TIM_Base_Stop_IT>
	}
	if(htim->Instance == TIM11) {
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a08      	ldr	r2, [pc, #32]	@ (8000564 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d102      	bne.n	800054c <HAL_TIM_PeriodElapsedCallback+0x48>
		comm_send_data(periodic_packet);
 8000546:	4808      	ldr	r0, [pc, #32]	@ (8000568 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000548:	f000 fdd8 	bl	80010fc <comm_send_data>
	}
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40000400 	.word	0x40000400
 8000558:	40000800 	.word	0x40000800
 800055c:	40014000 	.word	0x40014000
 8000560:	20000168 	.word	0x20000168
 8000564:	40014800 	.word	0x40014800
 8000568:	08007890 	.word	0x08007890

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f001 fa7f 	bl	8001a74 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f829 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f000 fa53 	bl	8000a24 <MX_GPIO_Init>
  MX_DMA_Init();
 800057e:	f000 fa31 	bl	80009e4 <MX_DMA_Init>
  MX_TIM3_Init();
 8000582:	f000 f90b 	bl	800079c <MX_TIM3_Init>
  MX_ADC1_Init();
 8000586:	f000 f889 	bl	800069c <MX_ADC1_Init>
  MX_I2C1_Init();
 800058a:	f000 f8d9 	bl	8000740 <MX_I2C1_Init>
  MX_TIM9_Init();
 800058e:	f000 f9a1 	bl	80008d4 <MX_TIM9_Init>
  MX_TIM4_Init();
 8000592:	f000 f951 	bl	8000838 <MX_TIM4_Init>
  MX_TIM11_Init();
 8000596:	f000 f9d7 	bl	8000948 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 800059a:	f000 f9f9 	bl	8000990 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint32_t init_time = HAL_GetTick();
 800059e:	f001 facf 	bl	8001b40 <HAL_GetTick>
 80005a2:	6078      	str	r0, [r7, #4]
  light_init();
 80005a4:	f000 fe9b 	bl	80012de <light_init>
  panic_activate();
 80005a8:	f001 f8cc 	bl	8001744 <panic_activate>
  sensors_movement_sensor_off();
 80005ac:	f001 fa5a 	bl	8001a64 <sensors_movement_sensor_off>
  comm_init();
 80005b0:	f000 fdb4 	bl	800111c <comm_init>
  uint32_t time = HAL_GetTick() - init_time;
 80005b4:	f001 fac4 	bl	8001b40 <HAL_GetTick>
 80005b8:	4602      	mov	r2, r0
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	603b      	str	r3, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	panic_main();
 80005c0:	f001 f8de 	bl	8001780 <panic_main>
	light_main();
 80005c4:	f000 ff72 	bl	80014ac <light_main>
	panic_main();
 80005c8:	bf00      	nop
 80005ca:	e7f9      	b.n	80005c0 <main+0x54>

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	@ 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	@ 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f007 f912 	bl	8007804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b27      	ldr	r3, [pc, #156]	@ (8000694 <SystemClock_Config+0xc8>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f8:	4a26      	ldr	r2, [pc, #152]	@ (8000694 <SystemClock_Config+0xc8>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000600:	4b24      	ldr	r3, [pc, #144]	@ (8000694 <SystemClock_Config+0xc8>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b21      	ldr	r3, [pc, #132]	@ (8000698 <SystemClock_Config+0xcc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a20      	ldr	r2, [pc, #128]	@ (8000698 <SystemClock_Config+0xcc>)
 8000616:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b1e      	ldr	r3, [pc, #120]	@ (8000698 <SystemClock_Config+0xcc>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000628:	2301      	movs	r3, #1
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000630:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000636:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800063a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000640:	23c0      	movs	r3, #192	@ 0xc0
 8000642:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000644:	2304      	movs	r3, #4
 8000646:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000648:	2308      	movs	r3, #8
 800064a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0320 	add.w	r3, r7, #32
 8000650:	4618      	mov	r0, r3
 8000652:	f004 ff1d 	bl	8005490 <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800065c:	f000 faa0 	bl	8000ba0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000664:	2302      	movs	r3, #2
 8000666:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800066c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000670:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	2103      	movs	r1, #3
 800067c:	4618      	mov	r0, r3
 800067e:	f005 f97f 	bl	8005980 <HAL_RCC_ClockConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000688:	f000 fa8a 	bl	8000ba0 <Error_Handler>
  }
}
 800068c:	bf00      	nop
 800068e:	3750      	adds	r7, #80	@ 0x50
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000

0800069c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006a2:	463b      	mov	r3, r7
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006ae:	4b21      	ldr	r3, [pc, #132]	@ (8000734 <MX_ADC1_Init+0x98>)
 80006b0:	4a21      	ldr	r2, [pc, #132]	@ (8000738 <MX_ADC1_Init+0x9c>)
 80006b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000734 <MX_ADC1_Init+0x98>)
 80006b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000734 <MX_ADC1_Init+0x98>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000734 <MX_ADC1_Init+0x98>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000734 <MX_ADC1_Init+0x98>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ce:	4b19      	ldr	r3, [pc, #100]	@ (8000734 <MX_ADC1_Init+0x98>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006d6:	4b17      	ldr	r3, [pc, #92]	@ (8000734 <MX_ADC1_Init+0x98>)
 80006d8:	2200      	movs	r2, #0
 80006da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006dc:	4b15      	ldr	r3, [pc, #84]	@ (8000734 <MX_ADC1_Init+0x98>)
 80006de:	4a17      	ldr	r2, [pc, #92]	@ (800073c <MX_ADC1_Init+0xa0>)
 80006e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e2:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <MX_ADC1_Init+0x98>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006e8:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <MX_ADC1_Init+0x98>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006ee:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <MX_ADC1_Init+0x98>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <MX_ADC1_Init+0x98>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006fc:	480d      	ldr	r0, [pc, #52]	@ (8000734 <MX_ADC1_Init+0x98>)
 80006fe:	f001 fa2b 	bl	8001b58 <HAL_ADC_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000708:	f000 fa4a 	bl	8000ba0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800070c:	2300      	movs	r3, #0
 800070e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000710:	2301      	movs	r3, #1
 8000712:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000714:	2307      	movs	r3, #7
 8000716:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000718:	463b      	mov	r3, r7
 800071a:	4619      	mov	r1, r3
 800071c:	4805      	ldr	r0, [pc, #20]	@ (8000734 <MX_ADC1_Init+0x98>)
 800071e:	f001 fbdf 	bl	8001ee0 <HAL_ADC_ConfigChannel>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000728:	f000 fa3a 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	2000003c 	.word	0x2000003c
 8000738:	40012000 	.word	0x40012000
 800073c:	0f000001 	.word	0x0f000001

08000740 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000744:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <MX_I2C1_Init+0x50>)
 8000746:	4a13      	ldr	r2, [pc, #76]	@ (8000794 <MX_I2C1_Init+0x54>)
 8000748:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <MX_I2C1_Init+0x50>)
 800074c:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <MX_I2C1_Init+0x58>)
 800074e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000750:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <MX_I2C1_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000756:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <MX_I2C1_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800075c:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <MX_I2C1_Init+0x50>)
 800075e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000762:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000764:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <MX_I2C1_Init+0x50>)
 8000766:	2200      	movs	r2, #0
 8000768:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800076a:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <MX_I2C1_Init+0x50>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000770:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <MX_I2C1_Init+0x50>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000776:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <MX_I2C1_Init+0x50>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800077c:	4804      	ldr	r0, [pc, #16]	@ (8000790 <MX_I2C1_Init+0x50>)
 800077e:	f002 fd01 	bl	8003184 <HAL_I2C_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000788:	f000 fa0a 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000084 	.word	0x20000084
 8000794:	40005400 	.word	0x40005400
 8000798:	00061a80 	.word	0x00061a80

0800079c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a2:	f107 0308 	add.w	r3, r7, #8
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b0:	463b      	mov	r3, r7
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000830 <MX_TIM3_Init+0x94>)
 80007ba:	4a1e      	ldr	r2, [pc, #120]	@ (8000834 <MX_TIM3_Init+0x98>)
 80007bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47999;
 80007be:	4b1c      	ldr	r3, [pc, #112]	@ (8000830 <MX_TIM3_Init+0x94>)
 80007c0:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80007c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000830 <MX_TIM3_Init+0x94>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80007cc:	4b18      	ldr	r3, [pc, #96]	@ (8000830 <MX_TIM3_Init+0x94>)
 80007ce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d4:	4b16      	ldr	r3, [pc, #88]	@ (8000830 <MX_TIM3_Init+0x94>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007da:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <MX_TIM3_Init+0x94>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007e0:	4813      	ldr	r0, [pc, #76]	@ (8000830 <MX_TIM3_Init+0x94>)
 80007e2:	f005 faed 	bl	8005dc0 <HAL_TIM_Base_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80007ec:	f000 f9d8 	bl	8000ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007f6:	f107 0308 	add.w	r3, r7, #8
 80007fa:	4619      	mov	r1, r3
 80007fc:	480c      	ldr	r0, [pc, #48]	@ (8000830 <MX_TIM3_Init+0x94>)
 80007fe:	f005 fcb0 	bl	8006162 <HAL_TIM_ConfigClockSource>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000808:	f000 f9ca 	bl	8000ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080c:	2300      	movs	r3, #0
 800080e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000814:	463b      	mov	r3, r7
 8000816:	4619      	mov	r1, r3
 8000818:	4805      	ldr	r0, [pc, #20]	@ (8000830 <MX_TIM3_Init+0x94>)
 800081a:	f005 feb7 	bl	800658c <HAL_TIMEx_MasterConfigSynchronization>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000824:	f000 f9bc 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	3718      	adds	r7, #24
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200000d8 	.word	0x200000d8
 8000834:	40000400 	.word	0x40000400

08000838 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800083e:	f107 0308 	add.w	r3, r7, #8
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084c:	463b      	mov	r3, r7
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000854:	4b1d      	ldr	r3, [pc, #116]	@ (80008cc <MX_TIM4_Init+0x94>)
 8000856:	4a1e      	ldr	r2, [pc, #120]	@ (80008d0 <MX_TIM4_Init+0x98>)
 8000858:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47999;
 800085a:	4b1c      	ldr	r3, [pc, #112]	@ (80008cc <MX_TIM4_Init+0x94>)
 800085c:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8000860:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000862:	4b1a      	ldr	r3, [pc, #104]	@ (80008cc <MX_TIM4_Init+0x94>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8000868:	4b18      	ldr	r3, [pc, #96]	@ (80008cc <MX_TIM4_Init+0x94>)
 800086a:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800086e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000870:	4b16      	ldr	r3, [pc, #88]	@ (80008cc <MX_TIM4_Init+0x94>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000876:	4b15      	ldr	r3, [pc, #84]	@ (80008cc <MX_TIM4_Init+0x94>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800087c:	4813      	ldr	r0, [pc, #76]	@ (80008cc <MX_TIM4_Init+0x94>)
 800087e:	f005 fa9f 	bl	8005dc0 <HAL_TIM_Base_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000888:	f000 f98a 	bl	8000ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800088c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000890:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	4619      	mov	r1, r3
 8000898:	480c      	ldr	r0, [pc, #48]	@ (80008cc <MX_TIM4_Init+0x94>)
 800089a:	f005 fc62 	bl	8006162 <HAL_TIM_ConfigClockSource>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80008a4:	f000 f97c 	bl	8000ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a8:	2300      	movs	r3, #0
 80008aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008b0:	463b      	mov	r3, r7
 80008b2:	4619      	mov	r1, r3
 80008b4:	4805      	ldr	r0, [pc, #20]	@ (80008cc <MX_TIM4_Init+0x94>)
 80008b6:	f005 fe69 	bl	800658c <HAL_TIMEx_MasterConfigSynchronization>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80008c0:	f000 f96e 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	3718      	adds	r7, #24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000120 	.word	0x20000120
 80008d0:	40000800 	.word	0x40000800

080008d4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008da:	463b      	mov	r3, r7
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80008e6:	4b16      	ldr	r3, [pc, #88]	@ (8000940 <MX_TIM9_Init+0x6c>)
 80008e8:	4a16      	ldr	r2, [pc, #88]	@ (8000944 <MX_TIM9_Init+0x70>)
 80008ea:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 19999;
 80008ec:	4b14      	ldr	r3, [pc, #80]	@ (8000940 <MX_TIM9_Init+0x6c>)
 80008ee:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80008f2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f4:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <MX_TIM9_Init+0x6c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 47999;
 80008fa:	4b11      	ldr	r3, [pc, #68]	@ (8000940 <MX_TIM9_Init+0x6c>)
 80008fc:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8000900:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000902:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <MX_TIM9_Init+0x6c>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000908:	4b0d      	ldr	r3, [pc, #52]	@ (8000940 <MX_TIM9_Init+0x6c>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800090e:	480c      	ldr	r0, [pc, #48]	@ (8000940 <MX_TIM9_Init+0x6c>)
 8000910:	f005 fa56 	bl	8005dc0 <HAL_TIM_Base_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 800091a:	f000 f941 	bl	8000ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800091e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000922:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000924:	463b      	mov	r3, r7
 8000926:	4619      	mov	r1, r3
 8000928:	4805      	ldr	r0, [pc, #20]	@ (8000940 <MX_TIM9_Init+0x6c>)
 800092a:	f005 fc1a 	bl	8006162 <HAL_TIM_ConfigClockSource>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8000934:	f000 f934 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000168 	.word	0x20000168
 8000944:	40014000 	.word	0x40014000

08000948 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800094c:	4b0e      	ldr	r3, [pc, #56]	@ (8000988 <MX_TIM11_Init+0x40>)
 800094e:	4a0f      	ldr	r2, [pc, #60]	@ (800098c <MX_TIM11_Init+0x44>)
 8000950:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 47999;
 8000952:	4b0d      	ldr	r3, [pc, #52]	@ (8000988 <MX_TIM11_Init+0x40>)
 8000954:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8000958:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095a:	4b0b      	ldr	r3, [pc, #44]	@ (8000988 <MX_TIM11_Init+0x40>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 4999;
 8000960:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <MX_TIM11_Init+0x40>)
 8000962:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000966:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000968:	4b07      	ldr	r3, [pc, #28]	@ (8000988 <MX_TIM11_Init+0x40>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096e:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <MX_TIM11_Init+0x40>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000974:	4804      	ldr	r0, [pc, #16]	@ (8000988 <MX_TIM11_Init+0x40>)
 8000976:	f005 fa23 	bl	8005dc0 <HAL_TIM_Base_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8000980:	f000 f90e 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	200001b0 	.word	0x200001b0
 800098c:	40014800 	.word	0x40014800

08000990 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000994:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <MX_USART2_UART_Init+0x4c>)
 8000996:	4a12      	ldr	r2, [pc, #72]	@ (80009e0 <MX_USART2_UART_Init+0x50>)
 8000998:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800099a:	4b10      	ldr	r3, [pc, #64]	@ (80009dc <MX_USART2_UART_Init+0x4c>)
 800099c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80009a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <MX_USART2_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <MX_USART2_UART_Init+0x4c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <MX_USART2_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b4:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <MX_USART2_UART_Init+0x4c>)
 80009b6:	220c      	movs	r2, #12
 80009b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <MX_USART2_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <MX_USART2_UART_Init+0x4c>)
 80009c2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80009c6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009c8:	4804      	ldr	r0, [pc, #16]	@ (80009dc <MX_USART2_UART_Init+0x4c>)
 80009ca:	f005 fe61 	bl	8006690 <HAL_UART_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 80009d4:	f000 f8e4 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200001f8 	.word	0x200001f8
 80009e0:	40004400 	.word	0x40004400

080009e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <MX_DMA_Init+0x3c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	4a0b      	ldr	r2, [pc, #44]	@ (8000a20 <MX_DMA_Init+0x3c>)
 80009f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fa:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <MX_DMA_Init+0x3c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2011      	movs	r0, #17
 8000a0c:	f001 fdab 	bl	8002566 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000a10:	2011      	movs	r0, #17
 8000a12:	f001 fdc4 	bl	800259e <HAL_NVIC_EnableIRQ>

}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800

08000a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08c      	sub	sp, #48	@ 0x30
 8000a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61bb      	str	r3, [r7, #24]
 8000a3e:	4b54      	ldr	r3, [pc, #336]	@ (8000b90 <MX_GPIO_Init+0x16c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	4a53      	ldr	r2, [pc, #332]	@ (8000b90 <MX_GPIO_Init+0x16c>)
 8000a44:	f043 0304 	orr.w	r3, r3, #4
 8000a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4a:	4b51      	ldr	r3, [pc, #324]	@ (8000b90 <MX_GPIO_Init+0x16c>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	f003 0304 	and.w	r3, r3, #4
 8000a52:	61bb      	str	r3, [r7, #24]
 8000a54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
 8000a5a:	4b4d      	ldr	r3, [pc, #308]	@ (8000b90 <MX_GPIO_Init+0x16c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a4c      	ldr	r2, [pc, #304]	@ (8000b90 <MX_GPIO_Init+0x16c>)
 8000a60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b4a      	ldr	r3, [pc, #296]	@ (8000b90 <MX_GPIO_Init+0x16c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	4b46      	ldr	r3, [pc, #280]	@ (8000b90 <MX_GPIO_Init+0x16c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	4a45      	ldr	r2, [pc, #276]	@ (8000b90 <MX_GPIO_Init+0x16c>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a82:	4b43      	ldr	r3, [pc, #268]	@ (8000b90 <MX_GPIO_Init+0x16c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	4b3f      	ldr	r3, [pc, #252]	@ (8000b90 <MX_GPIO_Init+0x16c>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	4a3e      	ldr	r2, [pc, #248]	@ (8000b90 <MX_GPIO_Init+0x16c>)
 8000a98:	f043 0310 	orr.w	r3, r3, #16
 8000a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9e:	4b3c      	ldr	r3, [pc, #240]	@ (8000b90 <MX_GPIO_Init+0x16c>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	f003 0310 	and.w	r3, r3, #16
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	4b38      	ldr	r3, [pc, #224]	@ (8000b90 <MX_GPIO_Init+0x16c>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	4a37      	ldr	r2, [pc, #220]	@ (8000b90 <MX_GPIO_Init+0x16c>)
 8000ab4:	f043 0308 	orr.w	r3, r3, #8
 8000ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aba:	4b35      	ldr	r3, [pc, #212]	@ (8000b90 <MX_GPIO_Init+0x16c>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	f003 0308 	and.w	r3, r3, #8
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4b31      	ldr	r3, [pc, #196]	@ (8000b90 <MX_GPIO_Init+0x16c>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	4a30      	ldr	r2, [pc, #192]	@ (8000b90 <MX_GPIO_Init+0x16c>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad6:	4b2e      	ldr	r3, [pc, #184]	@ (8000b90 <MX_GPIO_Init+0x16c>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Panic_Buzzer_GPIO_Port, Panic_Buzzer_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2180      	movs	r1, #128	@ 0x80
 8000ae6:	482b      	ldr	r0, [pc, #172]	@ (8000b94 <MX_GPIO_Init+0x170>)
 8000ae8:	f002 fb1a 	bl	8003120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WC_Reset_GPIO_Port, WC_Reset_Pin, GPIO_PIN_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000af2:	4829      	ldr	r0, [pc, #164]	@ (8000b98 <MX_GPIO_Init+0x174>)
 8000af4:	f002 fb14 	bl	8003120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Panic_Buzzer_Pin */
  GPIO_InitStruct.Pin = Panic_Buzzer_Pin;
 8000af8:	2380      	movs	r3, #128	@ 0x80
 8000afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Panic_Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4821      	ldr	r0, [pc, #132]	@ (8000b94 <MX_GPIO_Init+0x170>)
 8000b10:	f002 f982 	bl	8002e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : WC_Reset_Pin */
  GPIO_InitStruct.Pin = WC_Reset_Pin;
 8000b14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(WC_Reset_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	481a      	ldr	r0, [pc, #104]	@ (8000b98 <MX_GPIO_Init+0x174>)
 8000b2e:	f002 f973 	bl	8002e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : Movement_Sensors_Pin */
  GPIO_InitStruct.Pin = Movement_Sensors_Pin;
 8000b32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b38:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Movement_Sensors_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	4619      	mov	r1, r3
 8000b48:	4814      	ldr	r0, [pc, #80]	@ (8000b9c <MX_GPIO_Init+0x178>)
 8000b4a:	f002 f965 	bl	8002e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : Panic_Button_Pin */
  GPIO_InitStruct.Pin = Panic_Button_Pin;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b52:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Panic_Button_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	4619      	mov	r1, r3
 8000b62:	480d      	ldr	r0, [pc, #52]	@ (8000b98 <MX_GPIO_Init+0x174>)
 8000b64:	f002 f958 	bl	8002e18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2006      	movs	r0, #6
 8000b6e:	f001 fcfa 	bl	8002566 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b72:	2006      	movs	r0, #6
 8000b74:	f001 fd13 	bl	800259e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2017      	movs	r0, #23
 8000b7e:	f001 fcf2 	bl	8002566 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b82:	2017      	movs	r0, #23
 8000b84:	f001 fd0b 	bl	800259e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b88:	bf00      	nop
 8000b8a:	3730      	adds	r7, #48	@ 0x30
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40020c00 	.word	0x40020c00
 8000b9c:	40020800 	.word	0x40020800

08000ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba4:	b672      	cpsid	i
}
 8000ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <Error_Handler+0x8>

08000bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	4b10      	ldr	r3, [pc, #64]	@ (8000bf8 <HAL_MspInit+0x4c>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bba:	4a0f      	ldr	r2, [pc, #60]	@ (8000bf8 <HAL_MspInit+0x4c>)
 8000bbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf8 <HAL_MspInit+0x4c>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <HAL_MspInit+0x4c>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd6:	4a08      	ldr	r2, [pc, #32]	@ (8000bf8 <HAL_MspInit+0x4c>)
 8000bd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bde:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <HAL_MspInit+0x4c>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bea:	2007      	movs	r0, #7
 8000bec:	f001 fcb0 	bl	8002550 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40023800 	.word	0x40023800

08000bfc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	@ 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a17      	ldr	r2, [pc, #92]	@ (8000c78 <HAL_ADC_MspInit+0x7c>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d127      	bne.n	8000c6e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b16      	ldr	r3, [pc, #88]	@ (8000c7c <HAL_ADC_MspInit+0x80>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c26:	4a15      	ldr	r2, [pc, #84]	@ (8000c7c <HAL_ADC_MspInit+0x80>)
 8000c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c2e:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <HAL_ADC_MspInit+0x80>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <HAL_ADC_MspInit+0x80>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a0e      	ldr	r2, [pc, #56]	@ (8000c7c <HAL_ADC_MspInit+0x80>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <HAL_ADC_MspInit+0x80>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = Ambient_Light_Pin;
 8000c56:	2301      	movs	r3, #1
 8000c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Ambient_Light_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	@ (8000c80 <HAL_ADC_MspInit+0x84>)
 8000c6a:	f002 f8d5 	bl	8002e18 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c6e:	bf00      	nop
 8000c70:	3728      	adds	r7, #40	@ 0x28
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40012000 	.word	0x40012000
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020000 	.word	0x40020000

08000c84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	@ 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a21      	ldr	r2, [pc, #132]	@ (8000d28 <HAL_I2C_MspInit+0xa4>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d13b      	bne.n	8000d1e <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b20      	ldr	r3, [pc, #128]	@ (8000d2c <HAL_I2C_MspInit+0xa8>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	4a1f      	ldr	r2, [pc, #124]	@ (8000d2c <HAL_I2C_MspInit+0xa8>)
 8000cb0:	f043 0302 	orr.w	r3, r3, #2
 8000cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d2c <HAL_I2C_MspInit+0xa8>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Light_SCL_Pin|Light_SDA_Pin;
 8000cc2:	23c0      	movs	r3, #192	@ 0xc0
 8000cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc6:	2312      	movs	r3, #18
 8000cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4814      	ldr	r0, [pc, #80]	@ (8000d30 <HAL_I2C_MspInit+0xac>)
 8000cde:	f002 f89b 	bl	8002e18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b11      	ldr	r3, [pc, #68]	@ (8000d2c <HAL_I2C_MspInit+0xa8>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cea:	4a10      	ldr	r2, [pc, #64]	@ (8000d2c <HAL_I2C_MspInit+0xa8>)
 8000cec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d2c <HAL_I2C_MspInit+0xa8>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	201f      	movs	r0, #31
 8000d04:	f001 fc2f 	bl	8002566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000d08:	201f      	movs	r0, #31
 8000d0a:	f001 fc48 	bl	800259e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	2020      	movs	r0, #32
 8000d14:	f001 fc27 	bl	8002566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d18:	2020      	movs	r0, #32
 8000d1a:	f001 fc40 	bl	800259e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d1e:	bf00      	nop
 8000d20:	3728      	adds	r7, #40	@ 0x28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40005400 	.word	0x40005400
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020400 	.word	0x40020400

08000d34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a38      	ldr	r2, [pc, #224]	@ (8000e24 <HAL_TIM_Base_MspInit+0xf0>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d116      	bne.n	8000d74 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	4b37      	ldr	r3, [pc, #220]	@ (8000e28 <HAL_TIM_Base_MspInit+0xf4>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4e:	4a36      	ldr	r2, [pc, #216]	@ (8000e28 <HAL_TIM_Base_MspInit+0xf4>)
 8000d50:	f043 0302 	orr.w	r3, r3, #2
 8000d54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d56:	4b34      	ldr	r3, [pc, #208]	@ (8000e28 <HAL_TIM_Base_MspInit+0xf4>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	201d      	movs	r0, #29
 8000d68:	f001 fbfd 	bl	8002566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d6c:	201d      	movs	r0, #29
 8000d6e:	f001 fc16 	bl	800259e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000d72:	e052      	b.n	8000e1a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM4)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a2c      	ldr	r2, [pc, #176]	@ (8000e2c <HAL_TIM_Base_MspInit+0xf8>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d116      	bne.n	8000dac <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	4b29      	ldr	r3, [pc, #164]	@ (8000e28 <HAL_TIM_Base_MspInit+0xf4>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d86:	4a28      	ldr	r2, [pc, #160]	@ (8000e28 <HAL_TIM_Base_MspInit+0xf4>)
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d8e:	4b26      	ldr	r3, [pc, #152]	@ (8000e28 <HAL_TIM_Base_MspInit+0xf4>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	201e      	movs	r0, #30
 8000da0:	f001 fbe1 	bl	8002566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000da4:	201e      	movs	r0, #30
 8000da6:	f001 fbfa 	bl	800259e <HAL_NVIC_EnableIRQ>
}
 8000daa:	e036      	b.n	8000e1a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM9)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a1f      	ldr	r2, [pc, #124]	@ (8000e30 <HAL_TIM_Base_MspInit+0xfc>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d116      	bne.n	8000de4 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b1b      	ldr	r3, [pc, #108]	@ (8000e28 <HAL_TIM_Base_MspInit+0xf4>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dbe:	4a1a      	ldr	r2, [pc, #104]	@ (8000e28 <HAL_TIM_Base_MspInit+0xf4>)
 8000dc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dc6:	4b18      	ldr	r3, [pc, #96]	@ (8000e28 <HAL_TIM_Base_MspInit+0xf4>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2018      	movs	r0, #24
 8000dd8:	f001 fbc5 	bl	8002566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000ddc:	2018      	movs	r0, #24
 8000dde:	f001 fbde 	bl	800259e <HAL_NVIC_EnableIRQ>
}
 8000de2:	e01a      	b.n	8000e1a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a12      	ldr	r2, [pc, #72]	@ (8000e34 <HAL_TIM_Base_MspInit+0x100>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d115      	bne.n	8000e1a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e28 <HAL_TIM_Base_MspInit+0xf4>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df6:	4a0c      	ldr	r2, [pc, #48]	@ (8000e28 <HAL_TIM_Base_MspInit+0xf4>)
 8000df8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000e28 <HAL_TIM_Base_MspInit+0xf4>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	201a      	movs	r0, #26
 8000e10:	f001 fba9 	bl	8002566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000e14:	201a      	movs	r0, #26
 8000e16:	f001 fbc2 	bl	800259e <HAL_NVIC_EnableIRQ>
}
 8000e1a:	bf00      	nop
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40000400 	.word	0x40000400
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40000800 	.word	0x40000800
 8000e30:	40014000 	.word	0x40014000
 8000e34:	40014800 	.word	0x40014800

08000e38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	@ 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a34      	ldr	r2, [pc, #208]	@ (8000f28 <HAL_UART_MspInit+0xf0>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d161      	bne.n	8000f1e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	4b33      	ldr	r3, [pc, #204]	@ (8000f2c <HAL_UART_MspInit+0xf4>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e62:	4a32      	ldr	r2, [pc, #200]	@ (8000f2c <HAL_UART_MspInit+0xf4>)
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e6a:	4b30      	ldr	r3, [pc, #192]	@ (8000f2c <HAL_UART_MspInit+0xf4>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f2c <HAL_UART_MspInit+0xf4>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a2b      	ldr	r2, [pc, #172]	@ (8000f2c <HAL_UART_MspInit+0xf4>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b29      	ldr	r3, [pc, #164]	@ (8000f2c <HAL_UART_MspInit+0xf4>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e92:	230c      	movs	r3, #12
 8000e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ea2:	2307      	movs	r3, #7
 8000ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4820      	ldr	r0, [pc, #128]	@ (8000f30 <HAL_UART_MspInit+0xf8>)
 8000eae:	f001 ffb3 	bl	8002e18 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000eb2:	4b20      	ldr	r3, [pc, #128]	@ (8000f34 <HAL_UART_MspInit+0xfc>)
 8000eb4:	4a20      	ldr	r2, [pc, #128]	@ (8000f38 <HAL_UART_MspInit+0x100>)
 8000eb6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f34 <HAL_UART_MspInit+0xfc>)
 8000eba:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000ebe:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ec0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f34 <HAL_UART_MspInit+0xfc>)
 8000ec2:	2240      	movs	r2, #64	@ 0x40
 8000ec4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ec6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f34 <HAL_UART_MspInit+0xfc>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ecc:	4b19      	ldr	r3, [pc, #100]	@ (8000f34 <HAL_UART_MspInit+0xfc>)
 8000ece:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ed2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ed4:	4b17      	ldr	r3, [pc, #92]	@ (8000f34 <HAL_UART_MspInit+0xfc>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eda:	4b16      	ldr	r3, [pc, #88]	@ (8000f34 <HAL_UART_MspInit+0xfc>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000ee0:	4b14      	ldr	r3, [pc, #80]	@ (8000f34 <HAL_UART_MspInit+0xfc>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ee6:	4b13      	ldr	r3, [pc, #76]	@ (8000f34 <HAL_UART_MspInit+0xfc>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eec:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <HAL_UART_MspInit+0xfc>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000ef2:	4810      	ldr	r0, [pc, #64]	@ (8000f34 <HAL_UART_MspInit+0xfc>)
 8000ef4:	f001 fb80 	bl	80025f8 <HAL_DMA_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000efe:	f7ff fe4f 	bl	8000ba0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a0b      	ldr	r2, [pc, #44]	@ (8000f34 <HAL_UART_MspInit+0xfc>)
 8000f06:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f08:	4a0a      	ldr	r2, [pc, #40]	@ (8000f34 <HAL_UART_MspInit+0xfc>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2100      	movs	r1, #0
 8000f12:	2026      	movs	r0, #38	@ 0x26
 8000f14:	f001 fb27 	bl	8002566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f18:	2026      	movs	r0, #38	@ 0x26
 8000f1a:	f001 fb40 	bl	800259e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f1e:	bf00      	nop
 8000f20:	3728      	adds	r7, #40	@ 0x28
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40004400 	.word	0x40004400
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40020000 	.word	0x40020000
 8000f34:	20000240 	.word	0x20000240
 8000f38:	400260a0 	.word	0x400260a0

08000f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <NMI_Handler+0x4>

08000f44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <HardFault_Handler+0x4>

08000f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <MemManage_Handler+0x4>

08000f54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f92:	f000 fdc1 	bl	8001b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Panic_Button_Pin);
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f002 f8d8 	bl	8003154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000fac:	4802      	ldr	r0, [pc, #8]	@ (8000fb8 <DMA1_Stream6_IRQHandler+0x10>)
 8000fae:	f001 fcbb 	bl	8002928 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000240 	.word	0x20000240

08000fbc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Movement_Sensors_Pin);
 8000fc0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fc4:	f002 f8c6 	bl	8003154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000fd0:	4802      	ldr	r0, [pc, #8]	@ (8000fdc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000fd2:	f004 ffd6 	bl	8005f82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000168 	.word	0x20000168

08000fe0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000fe4:	4802      	ldr	r0, [pc, #8]	@ (8000ff0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000fe6:	f004 ffcc 	bl	8005f82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200001b0 	.word	0x200001b0

08000ff4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ff8:	4802      	ldr	r0, [pc, #8]	@ (8001004 <TIM3_IRQHandler+0x10>)
 8000ffa:	f004 ffc2 	bl	8005f82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200000d8 	.word	0x200000d8

08001008 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800100c:	4802      	ldr	r0, [pc, #8]	@ (8001018 <TIM4_IRQHandler+0x10>)
 800100e:	f004 ffb8 	bl	8005f82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000120 	.word	0x20000120

0800101c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001020:	4802      	ldr	r0, [pc, #8]	@ (800102c <I2C1_EV_IRQHandler+0x10>)
 8001022:	f002 fb07 	bl	8003634 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000084 	.word	0x20000084

08001030 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001034:	4802      	ldr	r0, [pc, #8]	@ (8001040 <I2C1_ER_IRQHandler+0x10>)
 8001036:	f002 fc50 	bl	80038da <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000084 	.word	0x20000084

08001044 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001048:	4802      	ldr	r0, [pc, #8]	@ (8001054 <USART2_IRQHandler+0x10>)
 800104a:	f005 fc07 	bl	800685c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200001f8 	.word	0x200001f8

08001058 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800105c:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <SystemInit+0x20>)
 800105e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001062:	4a05      	ldr	r2, [pc, #20]	@ (8001078 <SystemInit+0x20>)
 8001064:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001068:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800107c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001080:	f7ff ffea 	bl	8001058 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001084:	480c      	ldr	r0, [pc, #48]	@ (80010b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001086:	490d      	ldr	r1, [pc, #52]	@ (80010bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001088:	4a0d      	ldr	r2, [pc, #52]	@ (80010c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800109c:	4c0a      	ldr	r4, [pc, #40]	@ (80010c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010aa:	f006 fbb3 	bl	8007814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ae:	f7ff fa5d 	bl	800056c <main>
  bx  lr    
 80010b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80010c0:	080078c8 	.word	0x080078c8
  ldr r2, =_sbss
 80010c4:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80010c8:	200002c8 	.word	0x200002c8

080010cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC_IRQHandler>
	...

080010d0 <HAL_UART_RxCpltCallback>:

extern TIM_HandleTypeDef htim1;

static uint8_t received_data[PACKET_SIZE];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	protocol_interpret_cmd_packet(received_data, PACKET_SIZE);
 80010d8:	2102      	movs	r1, #2
 80010da:	4806      	ldr	r0, [pc, #24]	@ (80010f4 <HAL_UART_RxCpltCallback+0x24>)
 80010dc:	f000 f834 	bl	8001148 <protocol_interpret_cmd_packet>
	HAL_UART_Receive_IT(COMM_UART_INTERFACE, received_data, PACKET_SIZE);
 80010e0:	2202      	movs	r2, #2
 80010e2:	4904      	ldr	r1, [pc, #16]	@ (80010f4 <HAL_UART_RxCpltCallback+0x24>)
 80010e4:	4804      	ldr	r0, [pc, #16]	@ (80010f8 <HAL_UART_RxCpltCallback+0x28>)
 80010e6:	f005 fb23 	bl	8006730 <HAL_UART_Receive_IT>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200002a0 	.word	0x200002a0
 80010f8:	200001f8 	.word	0x200001f8

080010fc <comm_send_data>:

void comm_send_data(const uint8_t* data) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(COMM_UART_INTERFACE, data, PACKET_SIZE);
 8001104:	2202      	movs	r2, #2
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	4803      	ldr	r0, [pc, #12]	@ (8001118 <comm_send_data+0x1c>)
 800110a:	f005 fb37 	bl	800677c <HAL_UART_Transmit_DMA>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200001f8 	.word	0x200001f8

0800111c <comm_init>:

void comm_init() {
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(COMM_TIMER);
 8001120:	4806      	ldr	r0, [pc, #24]	@ (800113c <comm_init+0x20>)
 8001122:	f004 feff 	bl	8005f24 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Start_IT(COMM_TIMER);
 8001126:	4805      	ldr	r0, [pc, #20]	@ (800113c <comm_init+0x20>)
 8001128:	f004 fe9a 	bl	8005e60 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(COMM_UART_INTERFACE, received_data, PACKET_SIZE);
 800112c:	2202      	movs	r2, #2
 800112e:	4904      	ldr	r1, [pc, #16]	@ (8001140 <comm_init+0x24>)
 8001130:	4804      	ldr	r0, [pc, #16]	@ (8001144 <comm_init+0x28>)
 8001132:	f005 fafd 	bl	8006730 <HAL_UART_Receive_IT>
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200001b0 	.word	0x200001b0
 8001140:	200002a0 	.word	0x200002a0
 8001144:	200001f8 	.word	0x200001f8

08001148 <protocol_interpret_cmd_packet>:
#include "protocol.h"
#include "light.h"
#include "panic.h"
#include "sensors_movement_sensor.h"

void protocol_interpret_cmd_packet(uint8_t* packet, uint8_t len) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	70fb      	strb	r3, [r7, #3]
	if(packet[0] == CMD_PACKET) {
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b51      	cmp	r3, #81	@ 0x51
 800115a:	d16c      	bne.n	8001236 <protocol_interpret_cmd_packet+0xee>
		switch(packet[1]) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3301      	adds	r3, #1
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b20      	cmp	r3, #32
 8001164:	dc48      	bgt.n	80011f8 <protocol_interpret_cmd_packet+0xb0>
 8001166:	2b00      	cmp	r3, #0
 8001168:	dd64      	ble.n	8001234 <protocol_interpret_cmd_packet+0xec>
 800116a:	3b01      	subs	r3, #1
 800116c:	2b1f      	cmp	r3, #31
 800116e:	d861      	bhi.n	8001234 <protocol_interpret_cmd_packet+0xec>
 8001170:	a201      	add	r2, pc, #4	@ (adr r2, 8001178 <protocol_interpret_cmd_packet+0x30>)
 8001172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001176:	bf00      	nop
 8001178:	080011ff 	.word	0x080011ff
 800117c:	08001211 	.word	0x08001211
 8001180:	08001235 	.word	0x08001235
 8001184:	08001217 	.word	0x08001217
 8001188:	08001235 	.word	0x08001235
 800118c:	08001235 	.word	0x08001235
 8001190:	08001235 	.word	0x08001235
 8001194:	0800121d 	.word	0x0800121d
 8001198:	08001235 	.word	0x08001235
 800119c:	08001235 	.word	0x08001235
 80011a0:	08001235 	.word	0x08001235
 80011a4:	08001235 	.word	0x08001235
 80011a8:	08001235 	.word	0x08001235
 80011ac:	08001235 	.word	0x08001235
 80011b0:	08001235 	.word	0x08001235
 80011b4:	08001223 	.word	0x08001223
 80011b8:	08001235 	.word	0x08001235
 80011bc:	08001235 	.word	0x08001235
 80011c0:	08001235 	.word	0x08001235
 80011c4:	08001235 	.word	0x08001235
 80011c8:	08001235 	.word	0x08001235
 80011cc:	08001235 	.word	0x08001235
 80011d0:	08001235 	.word	0x08001235
 80011d4:	08001235 	.word	0x08001235
 80011d8:	08001235 	.word	0x08001235
 80011dc:	08001235 	.word	0x08001235
 80011e0:	08001235 	.word	0x08001235
 80011e4:	08001235 	.word	0x08001235
 80011e8:	08001235 	.word	0x08001235
 80011ec:	08001235 	.word	0x08001235
 80011f0:	08001235 	.word	0x08001235
 80011f4:	08001229 	.word	0x08001229
 80011f8:	2b40      	cmp	r3, #64	@ 0x40
 80011fa:	d018      	beq.n	800122e <protocol_interpret_cmd_packet+0xe6>
			break;
		case TURN_MVMT_OFF:
			sensors_movement_sensor_off();
			break;
		default:
			break;
 80011fc:	e01a      	b.n	8001234 <protocol_interpret_cmd_packet+0xec>
			HAL_GPIO_WritePin(WC_RESET, GPIO_PIN_SET);
 80011fe:	2201      	movs	r2, #1
 8001200:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001204:	480e      	ldr	r0, [pc, #56]	@ (8001240 <protocol_interpret_cmd_packet+0xf8>)
 8001206:	f001 ff8b 	bl	8003120 <HAL_GPIO_WritePin>
			HAL_NVIC_SystemReset();
 800120a:	f001 f9e4 	bl	80025d6 <HAL_NVIC_SystemReset>
			break;
 800120e:	e012      	b.n	8001236 <protocol_interpret_cmd_packet+0xee>
			panic_activate();
 8001210:	f000 fa98 	bl	8001744 <panic_activate>
			break;
 8001214:	e00f      	b.n	8001236 <protocol_interpret_cmd_packet+0xee>
			panic_deactivate();
 8001216:	f000 faa7 	bl	8001768 <panic_deactivate>
			break;
 800121a:	e00c      	b.n	8001236 <protocol_interpret_cmd_packet+0xee>
			light_activate();
 800121c:	f000 f908 	bl	8001430 <light_activate>
			break;
 8001220:	e009      	b.n	8001236 <protocol_interpret_cmd_packet+0xee>
			light_deactivate();
 8001222:	f000 f927 	bl	8001474 <light_deactivate>
			break;
 8001226:	e006      	b.n	8001236 <protocol_interpret_cmd_packet+0xee>
			sensors_movement_sensor_on();
 8001228:	f000 fc10 	bl	8001a4c <sensors_movement_sensor_on>
			break;
 800122c:	e003      	b.n	8001236 <protocol_interpret_cmd_packet+0xee>
			sensors_movement_sensor_off();
 800122e:	f000 fc19 	bl	8001a64 <sensors_movement_sensor_off>
			break;
 8001232:	e000      	b.n	8001236 <protocol_interpret_cmd_packet+0xee>
			break;
 8001234:	bf00      	nop
		}
	} else {
		// do nothing
	}
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40020c00 	.word	0x40020c00

08001244 <light_power_on>:

static uint8_t light_on = 0;
static uint8_t check_light_level = 0;
static uint8_t just_turned_on = 0;

void light_power_on() {
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
	if(light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER, SHUTDOWN_REGISTER, TURN_ON) == HAL_BUSY) {
 8001248:	2201      	movs	r2, #1
 800124a:	210a      	movs	r1, #10
 800124c:	200b      	movs	r0, #11
 800124e:	f000 f9e7 	bl	8001620 <light_i2c_write_single_register>
 8001252:	4603      	mov	r3, r0
 8001254:	2b02      	cmp	r3, #2
 8001256:	d101      	bne.n	800125c <light_power_on+0x18>
		Error_Handler();
 8001258:	f7ff fca2 	bl	8000ba0 <Error_Handler>
	}
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}

08001260 <light_shutdown>:

void light_shutdown() {
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	if(light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER, SHUTDOWN_REGISTER, SHUTDOWN) == HAL_BUSY) {
 8001264:	2200      	movs	r2, #0
 8001266:	210a      	movs	r1, #10
 8001268:	200b      	movs	r0, #11
 800126a:	f000 f9d9 	bl	8001620 <light_i2c_write_single_register>
 800126e:	4603      	mov	r3, r0
 8001270:	2b02      	cmp	r3, #2
 8001272:	d101      	bne.n	8001278 <light_shutdown+0x18>
		Error_Handler();
 8001274:	f7ff fc94 	bl	8000ba0 <Error_Handler>
	}
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}

0800127c <light_default_state>:

void light_default_state(uint8_t intensity) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
	if (light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER,
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	200b      	movs	r0, #11
 800128c:	f000 f9c8 	bl	8001620 <light_i2c_write_single_register>
 8001290:	4603      	mov	r3, r0
 8001292:	2b02      	cmp	r3, #2
 8001294:	d101      	bne.n	800129a <light_default_state+0x1e>
			CONFIGURATION_REGISTER, PICTURE_MODE) == HAL_BUSY) {
		Error_Handler();
 8001296:	f7ff fc83 	bl	8000ba0 <Error_Handler>
	}
	if (light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER,
 800129a:	2200      	movs	r2, #0
 800129c:	2101      	movs	r1, #1
 800129e:	200b      	movs	r0, #11
 80012a0:	f000 f9be 	bl	8001620 <light_i2c_write_single_register>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d101      	bne.n	80012ae <light_default_state+0x32>
			PICTURE_DISPLAY_REGISTER, MATRIX_FRAME1) == HAL_BUSY) {
		Error_Handler();
 80012aa:	f7ff fc79 	bl	8000ba0 <Error_Handler>
	}
	if (light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER,
 80012ae:	2200      	movs	r2, #0
 80012b0:	2105      	movs	r1, #5
 80012b2:	200b      	movs	r0, #11
 80012b4:	f000 f9b4 	bl	8001620 <light_i2c_write_single_register>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d101      	bne.n	80012c2 <light_default_state+0x46>
			DISPLAY_OPTION_REGISTER,
			DISPLAY_OPTIONS(INDEPENDENT_INTENSITY, BLINK_DISABLED, 0))
			== HAL_BUSY) {
		Error_Handler();
 80012be:	f7ff fc6f 	bl	8000ba0 <Error_Handler>
	}

	light_turn_on_frame(MATRIX_FRAME1);
 80012c2:	2000      	movs	r0, #0
 80012c4:	f000 f848 	bl	8001358 <light_turn_on_frame>
	light_set_intensity(MATRIX_FRAME1, intensity);
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	4619      	mov	r1, r3
 80012cc:	2000      	movs	r0, #0
 80012ce:	f000 f86f 	bl	80013b0 <light_set_intensity>
	light_power_on();
 80012d2:	f7ff ffb7 	bl	8001244 <light_power_on>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <light_init>:

void light_init() {
 80012de:	b580      	push	{r7, lr}
 80012e0:	af00      	add	r7, sp, #0
	light_default_state(DEFAULT_LIGHT_INTENSITY);
 80012e2:	2064      	movs	r0, #100	@ 0x64
 80012e4:	f7ff ffca 	bl	800127c <light_default_state>
	light_turn_off_frame(MATRIX_FRAME1);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f000 f84b 	bl	8001384 <light_turn_off_frame>

	// initialize frames 2-8 to have a smooth transition when someone is passing by
	light_turn_on_frame(MATRIX_FRAME2);
 80012ee:	2001      	movs	r0, #1
 80012f0:	f000 f832 	bl	8001358 <light_turn_on_frame>
	light_turn_on_frame(MATRIX_FRAME3);
 80012f4:	2002      	movs	r0, #2
 80012f6:	f000 f82f 	bl	8001358 <light_turn_on_frame>
	light_turn_on_frame(MATRIX_FRAME4);
 80012fa:	2003      	movs	r0, #3
 80012fc:	f000 f82c 	bl	8001358 <light_turn_on_frame>
	light_turn_on_frame(MATRIX_FRAME5);
 8001300:	2004      	movs	r0, #4
 8001302:	f000 f829 	bl	8001358 <light_turn_on_frame>
	light_turn_on_frame(MATRIX_FRAME6);
 8001306:	2005      	movs	r0, #5
 8001308:	f000 f826 	bl	8001358 <light_turn_on_frame>
	light_turn_on_frame(MATRIX_FRAME7);
 800130c:	2006      	movs	r0, #6
 800130e:	f000 f823 	bl	8001358 <light_turn_on_frame>
	light_turn_on_frame(MATRIX_FRAME8);
 8001312:	2007      	movs	r0, #7
 8001314:	f000 f820 	bl	8001358 <light_turn_on_frame>
	light_set_intensity(MATRIX_FRAME2, 105);
 8001318:	2169      	movs	r1, #105	@ 0x69
 800131a:	2001      	movs	r0, #1
 800131c:	f000 f848 	bl	80013b0 <light_set_intensity>
	light_set_intensity(MATRIX_FRAME3, 130);
 8001320:	2182      	movs	r1, #130	@ 0x82
 8001322:	2002      	movs	r0, #2
 8001324:	f000 f844 	bl	80013b0 <light_set_intensity>
	light_set_intensity(MATRIX_FRAME4, 155);
 8001328:	219b      	movs	r1, #155	@ 0x9b
 800132a:	2003      	movs	r0, #3
 800132c:	f000 f840 	bl	80013b0 <light_set_intensity>
	light_set_intensity(MATRIX_FRAME5, 180);
 8001330:	21b4      	movs	r1, #180	@ 0xb4
 8001332:	2004      	movs	r0, #4
 8001334:	f000 f83c 	bl	80013b0 <light_set_intensity>
	light_set_intensity(MATRIX_FRAME6, 205);
 8001338:	21cd      	movs	r1, #205	@ 0xcd
 800133a:	2005      	movs	r0, #5
 800133c:	f000 f838 	bl	80013b0 <light_set_intensity>
	light_set_intensity(MATRIX_FRAME7, 230);
 8001340:	21e6      	movs	r1, #230	@ 0xe6
 8001342:	2006      	movs	r0, #6
 8001344:	f000 f834 	bl	80013b0 <light_set_intensity>
	light_set_intensity(MATRIX_FRAME8, MAX_LIGHT_INTENSITY);
 8001348:	21ff      	movs	r1, #255	@ 0xff
 800134a:	2007      	movs	r0, #7
 800134c:	f000 f830 	bl	80013b0 <light_set_intensity>
	light_power_on();
 8001350:	f7ff ff78 	bl	8001244 <light_power_on>
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}

08001358 <light_turn_on_frame>:

void light_turn_on_frame(uint8_t frame) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
	if(light_i2c_send_data(frame, LED_CONTROL_START, all_on, sizeof(all_on)) == HAL_BUSY) {
 8001362:	79f8      	ldrb	r0, [r7, #7]
 8001364:	2312      	movs	r3, #18
 8001366:	4a06      	ldr	r2, [pc, #24]	@ (8001380 <light_turn_on_frame+0x28>)
 8001368:	2100      	movs	r1, #0
 800136a:	f000 f981 	bl	8001670 <light_i2c_send_data>
 800136e:	4603      	mov	r3, r0
 8001370:	2b02      	cmp	r3, #2
 8001372:	d101      	bne.n	8001378 <light_turn_on_frame+0x20>
			Error_Handler();
 8001374:	f7ff fc14 	bl	8000ba0 <Error_Handler>
	}
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000004 	.word	0x20000004

08001384 <light_turn_off_frame>:

void light_turn_off_frame(uint8_t frame) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
	if(light_i2c_send_data(MATRIX_FRAME1, LED_CONTROL_START, all_off, sizeof(all_off)) == HAL_BUSY) {
 800138e:	2312      	movs	r3, #18
 8001390:	4a06      	ldr	r2, [pc, #24]	@ (80013ac <light_turn_off_frame+0x28>)
 8001392:	2100      	movs	r1, #0
 8001394:	2000      	movs	r0, #0
 8001396:	f000 f96b 	bl	8001670 <light_i2c_send_data>
 800139a:	4603      	mov	r3, r0
 800139c:	2b02      	cmp	r3, #2
 800139e:	d101      	bne.n	80013a4 <light_turn_off_frame+0x20>
		Error_Handler();
 80013a0:	f7ff fbfe 	bl	8000ba0 <Error_Handler>
	}
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	200002a4 	.word	0x200002a4

080013b0 <light_set_intensity>:

void light_set_intensity(uint8_t frame, uint8_t intensity) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b0a6      	sub	sp, #152	@ 0x98
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	460a      	mov	r2, r1
 80013ba:	71fb      	strb	r3, [r7, #7]
 80013bc:	4613      	mov	r3, r2
 80013be:	71bb      	strb	r3, [r7, #6]
	if(intensity <= MAX_LIGHT_INTENSITY) {
		uint8_t pwm[144];
		memset(pwm, intensity, 144);
 80013c0:	79b9      	ldrb	r1, [r7, #6]
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	2290      	movs	r2, #144	@ 0x90
 80013c8:	4618      	mov	r0, r3
 80013ca:	f006 fa1b 	bl	8007804 <memset>
		light_i2c_send_data(frame, PWM_CONTROL_START, pwm, sizeof(pwm));
 80013ce:	f107 0208 	add.w	r2, r7, #8
 80013d2:	79f8      	ldrb	r0, [r7, #7]
 80013d4:	2390      	movs	r3, #144	@ 0x90
 80013d6:	2124      	movs	r1, #36	@ 0x24
 80013d8:	f000 f94a 	bl	8001670 <light_i2c_send_data>
	}
}
 80013dc:	bf00      	nop
 80013de:	3798      	adds	r7, #152	@ 0x98
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <light_transition_to_max>:

void light_transition_to_max() {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	light_shutdown();
 80013e8:	f7ff ff3a 	bl	8001260 <light_shutdown>
	// enable auto play mode
	if(light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER, CONFIGURATION_REGISTER, AUTOPLAY_MODE(AUTOFRAME_MODE, MATRIX_FRAME1)) == HAL_BUSY) {
 80013ec:	2208      	movs	r2, #8
 80013ee:	2100      	movs	r1, #0
 80013f0:	200b      	movs	r0, #11
 80013f2:	f000 f915 	bl	8001620 <light_i2c_write_single_register>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d101      	bne.n	8001400 <light_transition_to_max+0x1c>
		Error_Handler();
 80013fc:	f7ff fbd0 	bl	8000ba0 <Error_Handler>
	}
	// set number of loops
	if(light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER, AUTOPLAY_CONTROL_REGISTER1, AUTOPLAY_MODE_CONFIG(LOOPS_FRAMES1, LOOPS_FRAMES7)) == HAL_BUSY) {
 8001400:	2217      	movs	r2, #23
 8001402:	2102      	movs	r1, #2
 8001404:	200b      	movs	r0, #11
 8001406:	f000 f90b 	bl	8001620 <light_i2c_write_single_register>
 800140a:	4603      	mov	r3, r0
 800140c:	2b02      	cmp	r3, #2
 800140e:	d101      	bne.n	8001414 <light_transition_to_max+0x30>
		Error_Handler();
 8001410:	f7ff fbc6 	bl	8000ba0 <Error_Handler>
	}
	// setup loop delay
	if(light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER, AUTOPLAY_CONTROL_REGISTER2, AUTOPLAY_DELAY_CONFIG(30)) == HAL_BUSY) { // ~330 ms per step
 8001414:	221e      	movs	r2, #30
 8001416:	2103      	movs	r1, #3
 8001418:	200b      	movs	r0, #11
 800141a:	f000 f901 	bl	8001620 <light_i2c_write_single_register>
 800141e:	4603      	mov	r3, r0
 8001420:	2b02      	cmp	r3, #2
 8001422:	d101      	bne.n	8001428 <light_transition_to_max+0x44>
		Error_Handler();
 8001424:	f7ff fbbc 	bl	8000ba0 <Error_Handler>
	}
	light_power_on();
 8001428:	f7ff ff0c 	bl	8001244 <light_power_on>
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}

08001430 <light_activate>:

uint8_t light_is_on() {
	return light_on;
}

void light_activate() {
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	light_on = 1;
 8001434:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <light_activate+0x34>)
 8001436:	2201      	movs	r2, #1
 8001438:	701a      	strb	r2, [r3, #0]
	sensors_light_sensor_start();
 800143a:	f000 facb 	bl	80019d4 <sensors_light_sensor_start>
	check_light_level = 1;
 800143e:	4b0a      	ldr	r3, [pc, #40]	@ (8001468 <light_activate+0x38>)
 8001440:	2201      	movs	r2, #1
 8001442:	701a      	strb	r2, [r3, #0]
	just_turned_on = 1;
 8001444:	4b09      	ldr	r3, [pc, #36]	@ (800146c <light_activate+0x3c>)
 8001446:	2201      	movs	r2, #1
 8001448:	701a      	strb	r2, [r3, #0]
	htim4.Instance->SR &= ~TIM_SR_UIF;
 800144a:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <light_activate+0x40>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	691a      	ldr	r2, [r3, #16]
 8001450:	4b07      	ldr	r3, [pc, #28]	@ (8001470 <light_activate+0x40>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 0201 	bic.w	r2, r2, #1
 8001458:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim4);
 800145a:	4805      	ldr	r0, [pc, #20]	@ (8001470 <light_activate+0x40>)
 800145c:	f004 fd00 	bl	8005e60 <HAL_TIM_Base_Start_IT>
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200002b6 	.word	0x200002b6
 8001468:	200002b7 	.word	0x200002b7
 800146c:	200002b8 	.word	0x200002b8
 8001470:	20000120 	.word	0x20000120

08001474 <light_deactivate>:

void light_deactivate() {
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	light_on = 0;
 8001478:	4b04      	ldr	r3, [pc, #16]	@ (800148c <light_deactivate+0x18>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
	sensors_light_sensor_stop();
 800147e:	f000 fab5 	bl	80019ec <sensors_light_sensor_stop>
	HAL_TIM_Base_Stop_IT(&htim4);
 8001482:	4803      	ldr	r0, [pc, #12]	@ (8001490 <light_deactivate+0x1c>)
 8001484:	f004 fd4e 	bl	8005f24 <HAL_TIM_Base_Stop_IT>
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200002b6 	.word	0x200002b6
 8001490:	20000120 	.word	0x20000120

08001494 <light_level_check>:

void light_level_check() {
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
	check_light_level = 1;
 8001498:	4b03      	ldr	r3, [pc, #12]	@ (80014a8 <light_level_check+0x14>)
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	200002b7 	.word	0x200002b7

080014ac <light_main>:

void light_main() {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
	static uint8_t default_state = 0;
	static uint8_t current_light = 0;
	static uint8_t movement_detection_reacted = 0;
	if(light_on) {
 80014b2:	4b47      	ldr	r3, [pc, #284]	@ (80015d0 <light_main+0x124>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 8084 	beq.w	80015c4 <light_main+0x118>
		if(just_turned_on) {
 80014bc:	4b45      	ldr	r3, [pc, #276]	@ (80015d4 <light_main+0x128>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d005      	beq.n	80014d0 <light_main+0x24>
			default_state = 0;
 80014c4:	4b44      	ldr	r3, [pc, #272]	@ (80015d8 <light_main+0x12c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]
			just_turned_on = 0;
 80014ca:	4b42      	ldr	r3, [pc, #264]	@ (80015d4 <light_main+0x128>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
		} else {
			// do nothing
		}
		if(sensors_movement_is_detected()) {
 80014d0:	f000 faa4 	bl	8001a1c <sensors_movement_is_detected>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d026      	beq.n	8001528 <light_main+0x7c>
			if(!movement_detection_reacted) {
 80014da:	4b40      	ldr	r3, [pc, #256]	@ (80015dc <light_main+0x130>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d110      	bne.n	8001504 <light_main+0x58>
				light_transition_to_max();
 80014e2:	f7ff ff7f 	bl	80013e4 <light_transition_to_max>
				movement_detection_reacted = 1;
 80014e6:	4b3d      	ldr	r3, [pc, #244]	@ (80015dc <light_main+0x130>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	701a      	strb	r2, [r3, #0]
				htim9.Instance->SR &= ~TIM_SR_UIF;
 80014ec:	4b3c      	ldr	r3, [pc, #240]	@ (80015e0 <light_main+0x134>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	691a      	ldr	r2, [r3, #16]
 80014f2:	4b3b      	ldr	r3, [pc, #236]	@ (80015e0 <light_main+0x134>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f022 0201 	bic.w	r2, r2, #1
 80014fa:	611a      	str	r2, [r3, #16]
				HAL_TIM_Base_Start_IT(&htim9);
 80014fc:	4838      	ldr	r0, [pc, #224]	@ (80015e0 <light_main+0x134>)
 80014fe:	f004 fcaf 	bl	8005e60 <HAL_TIM_Base_Start_IT>
 8001502:	e00d      	b.n	8001520 <light_main+0x74>
			} else { // reset the timer
				HAL_TIM_Base_Stop_IT(&htim9);
 8001504:	4836      	ldr	r0, [pc, #216]	@ (80015e0 <light_main+0x134>)
 8001506:	f004 fd0d 	bl	8005f24 <HAL_TIM_Base_Stop_IT>
				htim9.Instance->SR &= ~TIM_SR_UIF;
 800150a:	4b35      	ldr	r3, [pc, #212]	@ (80015e0 <light_main+0x134>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	691a      	ldr	r2, [r3, #16]
 8001510:	4b33      	ldr	r3, [pc, #204]	@ (80015e0 <light_main+0x134>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 0201 	bic.w	r2, r2, #1
 8001518:	611a      	str	r2, [r3, #16]
				HAL_TIM_Base_Start_IT(&htim9);
 800151a:	4831      	ldr	r0, [pc, #196]	@ (80015e0 <light_main+0x134>)
 800151c:	f004 fca0 	bl	8005e60 <HAL_TIM_Base_Start_IT>
			}
			default_state = 0;
 8001520:	4b2d      	ldr	r3, [pc, #180]	@ (80015d8 <light_main+0x12c>)
 8001522:	2200      	movs	r2, #0
 8001524:	701a      	strb	r2, [r3, #0]
			}
		}
	} else {
		light_shutdown();
	}
}
 8001526:	e04f      	b.n	80015c8 <light_main+0x11c>
			movement_detection_reacted = 0;
 8001528:	4b2c      	ldr	r3, [pc, #176]	@ (80015dc <light_main+0x130>)
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
			if(check_light_level){
 800152e:	4b2d      	ldr	r3, [pc, #180]	@ (80015e4 <light_main+0x138>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d032      	beq.n	800159c <light_main+0xf0>
				uint32_t ambient_light = sensors_light_get_ambient_light_level();
 8001536:	f000 fa29 	bl	800198c <sensors_light_get_ambient_light_level>
 800153a:	6078      	str	r0, [r7, #4]
				if(ambient_light <= 500) {
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001542:	d803      	bhi.n	800154c <light_main+0xa0>
					current_light = DEFAULT_LIGHT_INTENSITY;
 8001544:	4b28      	ldr	r3, [pc, #160]	@ (80015e8 <light_main+0x13c>)
 8001546:	2264      	movs	r2, #100	@ 0x64
 8001548:	701a      	strb	r2, [r3, #0]
 800154a:	e024      	b.n	8001596 <light_main+0xea>
				} else if (ambient_light <= 1000) {
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001552:	d803      	bhi.n	800155c <light_main+0xb0>
					current_light = 80;
 8001554:	4b24      	ldr	r3, [pc, #144]	@ (80015e8 <light_main+0x13c>)
 8001556:	2250      	movs	r2, #80	@ 0x50
 8001558:	701a      	strb	r2, [r3, #0]
 800155a:	e01c      	b.n	8001596 <light_main+0xea>
				} else if (ambient_light <= 1500) {
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001562:	4293      	cmp	r3, r2
 8001564:	d803      	bhi.n	800156e <light_main+0xc2>
					current_light = 60;
 8001566:	4b20      	ldr	r3, [pc, #128]	@ (80015e8 <light_main+0x13c>)
 8001568:	223c      	movs	r2, #60	@ 0x3c
 800156a:	701a      	strb	r2, [r3, #0]
 800156c:	e013      	b.n	8001596 <light_main+0xea>
				} else if (ambient_light <= 2000) {
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001574:	d803      	bhi.n	800157e <light_main+0xd2>
					current_light = 40;
 8001576:	4b1c      	ldr	r3, [pc, #112]	@ (80015e8 <light_main+0x13c>)
 8001578:	2228      	movs	r2, #40	@ 0x28
 800157a:	701a      	strb	r2, [r3, #0]
 800157c:	e00b      	b.n	8001596 <light_main+0xea>
				} else if (ambient_light <= 2500) {
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001584:	4293      	cmp	r3, r2
 8001586:	d803      	bhi.n	8001590 <light_main+0xe4>
					current_light = 20;
 8001588:	4b17      	ldr	r3, [pc, #92]	@ (80015e8 <light_main+0x13c>)
 800158a:	2214      	movs	r2, #20
 800158c:	701a      	strb	r2, [r3, #0]
 800158e:	e002      	b.n	8001596 <light_main+0xea>
					current_light = 10;
 8001590:	4b15      	ldr	r3, [pc, #84]	@ (80015e8 <light_main+0x13c>)
 8001592:	220a      	movs	r2, #10
 8001594:	701a      	strb	r2, [r3, #0]
				check_light_level = 0;
 8001596:	4b13      	ldr	r3, [pc, #76]	@ (80015e4 <light_main+0x138>)
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
			if(!default_state) {
 800159c:	4b0e      	ldr	r3, [pc, #56]	@ (80015d8 <light_main+0x12c>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d108      	bne.n	80015b6 <light_main+0x10a>
				light_default_state(current_light);
 80015a4:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <light_main+0x13c>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fe67 	bl	800127c <light_default_state>
				default_state = 1;
 80015ae:	4b0a      	ldr	r3, [pc, #40]	@ (80015d8 <light_main+0x12c>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	701a      	strb	r2, [r3, #0]
}
 80015b4:	e008      	b.n	80015c8 <light_main+0x11c>
				light_set_current_intensity(current_light);
 80015b6:	4b0c      	ldr	r3, [pc, #48]	@ (80015e8 <light_main+0x13c>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	4619      	mov	r1, r3
 80015bc:	2000      	movs	r0, #0
 80015be:	f7ff fef7 	bl	80013b0 <light_set_intensity>
}
 80015c2:	e001      	b.n	80015c8 <light_main+0x11c>
		light_shutdown();
 80015c4:	f7ff fe4c 	bl	8001260 <light_shutdown>
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	200002b6 	.word	0x200002b6
 80015d4:	200002b8 	.word	0x200002b8
 80015d8:	200002b9 	.word	0x200002b9
 80015dc:	200002ba 	.word	0x200002ba
 80015e0:	20000168 	.word	0x20000168
 80015e4:	200002b7 	.word	0x200002b7
 80015e8:	200002bb 	.word	0x200002bb

080015ec <light_i2c_select_page>:
#include <stdint.h>
#include <string.h>
#include "light_i2c.h"
#include "stm32f4xx_hal.h"

HAL_StatusTypeDef light_i2c_select_page(uint8_t page) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af02      	add	r7, sp, #8
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2] = {COMMAND_REGISTER, page};
 80015f6:	23fd      	movs	r3, #253	@ 0xfd
 80015f8:	733b      	strb	r3, [r7, #12]
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(LIGHT_I2C_INTERFACE, LIGHT_MATRIX_ADDR, data, 2, 100);
 80015fe:	f107 020c 	add.w	r2, r7, #12
 8001602:	2364      	movs	r3, #100	@ 0x64
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	2302      	movs	r3, #2
 8001608:	21e8      	movs	r1, #232	@ 0xe8
 800160a:	4804      	ldr	r0, [pc, #16]	@ (800161c <light_i2c_select_page+0x30>)
 800160c:	f001 ff14 	bl	8003438 <HAL_I2C_Master_Transmit>
 8001610:	4603      	mov	r3, r0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000084 	.word	0x20000084

08001620 <light_i2c_write_single_register>:

HAL_StatusTypeDef light_i2c_write_single_register(uint8_t page, uint8_t reg, uint8_t value) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af02      	add	r7, sp, #8
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
 800162a:	460b      	mov	r3, r1
 800162c:	71bb      	strb	r3, [r7, #6]
 800162e:	4613      	mov	r3, r2
 8001630:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef page_selected = light_i2c_select_page(page);
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ffd9 	bl	80015ec <light_i2c_select_page>
 800163a:	4603      	mov	r3, r0
 800163c:	73fb      	strb	r3, [r7, #15]
	if(page_selected != HAL_BUSY) {
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	2b02      	cmp	r3, #2
 8001642:	d00e      	beq.n	8001662 <light_i2c_write_single_register+0x42>
		uint8_t data[2] = {reg, value};
 8001644:	79bb      	ldrb	r3, [r7, #6]
 8001646:	733b      	strb	r3, [r7, #12]
 8001648:	797b      	ldrb	r3, [r7, #5]
 800164a:	737b      	strb	r3, [r7, #13]
		return HAL_I2C_Master_Transmit(LIGHT_I2C_INTERFACE, LIGHT_MATRIX_ADDR, data, 2, 100);
 800164c:	f107 020c 	add.w	r2, r7, #12
 8001650:	2364      	movs	r3, #100	@ 0x64
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	2302      	movs	r3, #2
 8001656:	21e8      	movs	r1, #232	@ 0xe8
 8001658:	4804      	ldr	r0, [pc, #16]	@ (800166c <light_i2c_write_single_register+0x4c>)
 800165a:	f001 feed 	bl	8003438 <HAL_I2C_Master_Transmit>
 800165e:	4603      	mov	r3, r0
 8001660:	e000      	b.n	8001664 <light_i2c_write_single_register+0x44>
	}
	return page_selected;
 8001662:	7bfb      	ldrb	r3, [r7, #15]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000084 	.word	0x20000084

08001670 <light_i2c_send_data>:

HAL_StatusTypeDef light_i2c_send_data(uint8_t page, uint8_t reg, uint8_t* data, uint8_t data_len) {
 8001670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001674:	b089      	sub	sp, #36	@ 0x24
 8001676:	af02      	add	r7, sp, #8
 8001678:	603a      	str	r2, [r7, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	4603      	mov	r3, r0
 800167e:	71fb      	strb	r3, [r7, #7]
 8001680:	460b      	mov	r3, r1
 8001682:	71bb      	strb	r3, [r7, #6]
 8001684:	4613      	mov	r3, r2
 8001686:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef page_selected = light_i2c_select_page(page);
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ffae 	bl	80015ec <light_i2c_select_page>
 8001690:	4603      	mov	r3, r0
 8001692:	75fb      	strb	r3, [r7, #23]
	if(page_selected != HAL_BUSY) {
 8001694:	7dfb      	ldrb	r3, [r7, #23]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d040      	beq.n	800171c <light_i2c_send_data+0xac>
 800169a:	466b      	mov	r3, sp
 800169c:	461e      	mov	r6, r3
		uint8_t buff[data_len+1];
 800169e:	797b      	ldrb	r3, [r7, #5]
 80016a0:	1c59      	adds	r1, r3, #1
 80016a2:	1e4b      	subs	r3, r1, #1
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	460a      	mov	r2, r1
 80016a8:	2300      	movs	r3, #0
 80016aa:	4690      	mov	r8, r2
 80016ac:	4699      	mov	r9, r3
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016c2:	460a      	mov	r2, r1
 80016c4:	2300      	movs	r3, #0
 80016c6:	4614      	mov	r4, r2
 80016c8:	461d      	mov	r5, r3
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	f04f 0300 	mov.w	r3, #0
 80016d2:	00eb      	lsls	r3, r5, #3
 80016d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016d8:	00e2      	lsls	r2, r4, #3
 80016da:	460b      	mov	r3, r1
 80016dc:	3307      	adds	r3, #7
 80016de:	08db      	lsrs	r3, r3, #3
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	ebad 0d03 	sub.w	sp, sp, r3
 80016e6:	ab02      	add	r3, sp, #8
 80016e8:	3300      	adds	r3, #0
 80016ea:	60fb      	str	r3, [r7, #12]
		buff[0] = reg;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	79ba      	ldrb	r2, [r7, #6]
 80016f0:	701a      	strb	r2, [r3, #0]
		memcpy(buff+1, data, data_len);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	3301      	adds	r3, #1
 80016f6:	797a      	ldrb	r2, [r7, #5]
 80016f8:	6839      	ldr	r1, [r7, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f006 f8ae 	bl	800785c <memcpy>
		return HAL_I2C_Master_Transmit(LIGHT_I2C_INTERFACE, LIGHT_MATRIX_ADDR, buff, data_len + 1, 100);
 8001700:	797b      	ldrb	r3, [r7, #5]
 8001702:	b29b      	uxth	r3, r3
 8001704:	3301      	adds	r3, #1
 8001706:	b29b      	uxth	r3, r3
 8001708:	2264      	movs	r2, #100	@ 0x64
 800170a:	9200      	str	r2, [sp, #0]
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	21e8      	movs	r1, #232	@ 0xe8
 8001710:	4805      	ldr	r0, [pc, #20]	@ (8001728 <light_i2c_send_data+0xb8>)
 8001712:	f001 fe91 	bl	8003438 <HAL_I2C_Master_Transmit>
 8001716:	4603      	mov	r3, r0
 8001718:	46b5      	mov	sp, r6
 800171a:	e000      	b.n	800171e <light_i2c_send_data+0xae>
	}
	return page_selected;
 800171c:	7dfb      	ldrb	r3, [r7, #23]
}
 800171e:	4618      	mov	r0, r3
 8001720:	371c      	adds	r7, #28
 8001722:	46bd      	mov	sp, r7
 8001724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001728:	20000084 	.word	0x20000084

0800172c <panic_is_active>:
#include "stm32f4xx_hal.h"
#include <stdint.h>

static uint8_t panic_on = 0;

uint8_t panic_is_active() {
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
	return panic_on;
 8001730:	4b03      	ldr	r3, [pc, #12]	@ (8001740 <panic_is_active+0x14>)
 8001732:	781b      	ldrb	r3, [r3, #0]
}
 8001734:	4618      	mov	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	200002bc 	.word	0x200002bc

08001744 <panic_activate>:

void panic_activate() {
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
	panic_on = 1;
 8001748:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <panic_activate+0x20>)
 800174a:	2201      	movs	r2, #1
 800174c:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	2100      	movs	r1, #0
 8001752:	2006      	movs	r0, #6
 8001754:	f000 ff07 	bl	8002566 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001758:	2006      	movs	r0, #6
 800175a:	f000 ff20 	bl	800259e <HAL_NVIC_EnableIRQ>
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200002bc 	.word	0x200002bc

08001768 <panic_deactivate>:

void panic_deactivate() {
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	panic_on = 0;
 800176c:	4b03      	ldr	r3, [pc, #12]	@ (800177c <panic_deactivate+0x14>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001772:	2006      	movs	r0, #6
 8001774:	f000 ff21 	bl	80025ba <HAL_NVIC_DisableIRQ>
}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	200002bc 	.word	0x200002bc

08001780 <panic_main>:

void panic_init() {
	panic_activate();
}

void panic_main() {
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	if(panic_on) {
 8001784:	4b20      	ldr	r3, [pc, #128]	@ (8001808 <panic_main+0x88>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d03b      	beq.n	8001804 <panic_main+0x84>
		if(panic_button_is_pressed()) {
 800178c:	f000 f856 	bl	800183c <panic_button_is_pressed>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d018      	beq.n	80017c8 <panic_main+0x48>
			if(panic_buzzer_is_active()) { // panic_button pressed with buzzer active
 8001796:	f000 f885 	bl	80018a4 <panic_buzzer_is_active>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d004      	beq.n	80017aa <panic_main+0x2a>
				panic_buzzer_stop();
 80017a0:	f000 f870 	bl	8001884 <panic_buzzer_stop>
				panic_timer_stop();
 80017a4:	f000 f8b2 	bl	800190c <panic_timer_stop>
			// do nothing
		}
	} else {
		// do nothing
	}
}
 80017a8:	e02c      	b.n	8001804 <panic_main+0x84>
			} else if(panic_timer_is_active()) { // panic_button pressed with timer active but buzzer inactive
 80017aa:	f000 f8bf 	bl	800192c <panic_timer_is_active>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d002      	beq.n	80017ba <panic_main+0x3a>
				panic_timer_stop();
 80017b4:	f000 f8aa 	bl	800190c <panic_timer_stop>
}
 80017b8:	e024      	b.n	8001804 <panic_main+0x84>
				panic_timer_start();
 80017ba:	f000 f897 	bl	80018ec <panic_timer_start>
				panic_buzzer_start();
 80017be:	f000 f849 	bl	8001854 <panic_buzzer_start>
				panic_button_reset();
 80017c2:	f000 f82f 	bl	8001824 <panic_button_reset>
}
 80017c6:	e01d      	b.n	8001804 <panic_main+0x84>
		} else if(panic_timer_is_active()) { // turn on and off the buzzer (normal mode)
 80017c8:	f000 f8b0 	bl	800192c <panic_timer_is_active>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d018      	beq.n	8001804 <panic_main+0x84>
			if(panic_timer_is_elapsed()) {
 80017d2:	f000 f8b7 	bl	8001944 <panic_timer_is_elapsed>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d013      	beq.n	8001804 <panic_main+0x84>
				if(panic_buzzer_is_active()) {
 80017dc:	f000 f862 	bl	80018a4 <panic_buzzer_is_active>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <panic_main+0x6c>
					panic_buzzer_stop();
 80017e6:	f000 f84d 	bl	8001884 <panic_buzzer_stop>
 80017ea:	e009      	b.n	8001800 <panic_main+0x80>
					if(panic_buzzer_get_counter() == 5) {
 80017ec:	f000 f866 	bl	80018bc <panic_buzzer_get_counter>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b05      	cmp	r3, #5
 80017f4:	d102      	bne.n	80017fc <panic_main+0x7c>
						panic_timer_stop();
 80017f6:	f000 f889 	bl	800190c <panic_timer_stop>
 80017fa:	e001      	b.n	8001800 <panic_main+0x80>
						panic_buzzer_start();
 80017fc:	f000 f82a 	bl	8001854 <panic_buzzer_start>
				panic_timer_is_elapsed_reset();
 8001800:	f000 f8b8 	bl	8001974 <panic_timer_is_elapsed_reset>
}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	200002bc 	.word	0x200002bc

0800180c <panic_button_set>:
#include "panic_button.h"
#include "stm32f4xx_hal.h"

uint8_t panic_button_pressed = 0;

void panic_button_set() {
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
	panic_button_pressed = 1;
 8001810:	4b03      	ldr	r3, [pc, #12]	@ (8001820 <panic_button_set+0x14>)
 8001812:	2201      	movs	r2, #1
 8001814:	701a      	strb	r2, [r3, #0]
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	200002bd 	.word	0x200002bd

08001824 <panic_button_reset>:

void panic_button_reset() {
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
	panic_button_pressed = 0;
 8001828:	4b03      	ldr	r3, [pc, #12]	@ (8001838 <panic_button_reset+0x14>)
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	200002bd 	.word	0x200002bd

0800183c <panic_button_is_pressed>:

uint8_t panic_button_is_pressed() {
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
	return panic_button_pressed;
 8001840:	4b03      	ldr	r3, [pc, #12]	@ (8001850 <panic_button_is_pressed+0x14>)
 8001842:	781b      	ldrb	r3, [r3, #0]
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	200002bd 	.word	0x200002bd

08001854 <panic_buzzer_start>:


uint8_t panic_buzzer_active = 0; /** Panic buzzer status */
uint8_t panic_buzzer_counter = 0; /** Used to keep count of how many times the buzzer has been turned on */

void panic_buzzer_start() {
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PANIC_BUZZER, GPIO_PIN_SET);
 8001858:	2201      	movs	r2, #1
 800185a:	2180      	movs	r1, #128	@ 0x80
 800185c:	4806      	ldr	r0, [pc, #24]	@ (8001878 <panic_buzzer_start+0x24>)
 800185e:	f001 fc5f 	bl	8003120 <HAL_GPIO_WritePin>
	panic_buzzer_active = 1;
 8001862:	4b06      	ldr	r3, [pc, #24]	@ (800187c <panic_buzzer_start+0x28>)
 8001864:	2201      	movs	r2, #1
 8001866:	701a      	strb	r2, [r3, #0]
	panic_buzzer_counter++;
 8001868:	4b05      	ldr	r3, [pc, #20]	@ (8001880 <panic_buzzer_start+0x2c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	3301      	adds	r3, #1
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b03      	ldr	r3, [pc, #12]	@ (8001880 <panic_buzzer_start+0x2c>)
 8001872:	701a      	strb	r2, [r3, #0]
}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40021000 	.word	0x40021000
 800187c:	200002be 	.word	0x200002be
 8001880:	200002bf 	.word	0x200002bf

08001884 <panic_buzzer_stop>:

void panic_buzzer_stop() {
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PANIC_BUZZER, GPIO_PIN_RESET);
 8001888:	2200      	movs	r2, #0
 800188a:	2180      	movs	r1, #128	@ 0x80
 800188c:	4803      	ldr	r0, [pc, #12]	@ (800189c <panic_buzzer_stop+0x18>)
 800188e:	f001 fc47 	bl	8003120 <HAL_GPIO_WritePin>
	panic_buzzer_active = 0;
 8001892:	4b03      	ldr	r3, [pc, #12]	@ (80018a0 <panic_buzzer_stop+0x1c>)
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40021000 	.word	0x40021000
 80018a0:	200002be 	.word	0x200002be

080018a4 <panic_buzzer_is_active>:

uint8_t panic_buzzer_is_active() {
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
	return panic_buzzer_active;
 80018a8:	4b03      	ldr	r3, [pc, #12]	@ (80018b8 <panic_buzzer_is_active+0x14>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	200002be 	.word	0x200002be

080018bc <panic_buzzer_get_counter>:

uint8_t panic_buzzer_get_counter() {
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
	return panic_buzzer_counter;
 80018c0:	4b03      	ldr	r3, [pc, #12]	@ (80018d0 <panic_buzzer_get_counter+0x14>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	200002bf 	.word	0x200002bf

080018d4 <panic_buzzer_reset_counter>:

void panic_buzzer_reset_counter() {
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
	panic_buzzer_counter = 0;
 80018d8:	4b03      	ldr	r3, [pc, #12]	@ (80018e8 <panic_buzzer_reset_counter+0x14>)
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	200002bf 	.word	0x200002bf

080018ec <panic_timer_start>:
#include <stdint.h>

static uint8_t timer_active = 0; /** Panic timer activation status */
static uint8_t timer_elapsed = 0; /** Panic timer elapsed event interrupt request triggered */

void panic_timer_start() {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(PANIC_TIMER);
 80018f0:	4804      	ldr	r0, [pc, #16]	@ (8001904 <panic_timer_start+0x18>)
 80018f2:	f004 fab5 	bl	8005e60 <HAL_TIM_Base_Start_IT>
	timer_active = 1;
 80018f6:	4b04      	ldr	r3, [pc, #16]	@ (8001908 <panic_timer_start+0x1c>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	701a      	strb	r2, [r3, #0]
	panic_buzzer_reset_counter();
 80018fc:	f7ff ffea 	bl	80018d4 <panic_buzzer_reset_counter>
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	200000d8 	.word	0x200000d8
 8001908:	200002c0 	.word	0x200002c0

0800190c <panic_timer_stop>:

void panic_timer_stop() {
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(PANIC_TIMER);
 8001910:	4804      	ldr	r0, [pc, #16]	@ (8001924 <panic_timer_stop+0x18>)
 8001912:	f004 fb07 	bl	8005f24 <HAL_TIM_Base_Stop_IT>
	timer_active = 0;
 8001916:	4b04      	ldr	r3, [pc, #16]	@ (8001928 <panic_timer_stop+0x1c>)
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
	panic_buzzer_reset_counter();
 800191c:	f7ff ffda 	bl	80018d4 <panic_buzzer_reset_counter>
}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	200000d8 	.word	0x200000d8
 8001928:	200002c0 	.word	0x200002c0

0800192c <panic_timer_is_active>:

uint8_t panic_timer_is_active() {
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
	return timer_active;
 8001930:	4b03      	ldr	r3, [pc, #12]	@ (8001940 <panic_timer_is_active+0x14>)
 8001932:	781b      	ldrb	r3, [r3, #0]
}
 8001934:	4618      	mov	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	200002c0 	.word	0x200002c0

08001944 <panic_timer_is_elapsed>:

uint8_t panic_timer_is_elapsed() {
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
	return timer_elapsed;
 8001948:	4b03      	ldr	r3, [pc, #12]	@ (8001958 <panic_timer_is_elapsed+0x14>)
 800194a:	781b      	ldrb	r3, [r3, #0]
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	200002c1 	.word	0x200002c1

0800195c <panic_timer_elapsed>:

void panic_timer_elapsed() {
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
	timer_elapsed = 1;
 8001960:	4b03      	ldr	r3, [pc, #12]	@ (8001970 <panic_timer_elapsed+0x14>)
 8001962:	2201      	movs	r2, #1
 8001964:	701a      	strb	r2, [r3, #0]
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	200002c1 	.word	0x200002c1

08001974 <panic_timer_is_elapsed_reset>:

void panic_timer_is_elapsed_reset() {
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
	timer_elapsed = 0;
 8001978:	4b03      	ldr	r3, [pc, #12]	@ (8001988 <panic_timer_is_elapsed_reset+0x14>)
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	200002c1 	.word	0x200002c1

0800198c <sensors_light_get_ambient_light_level>:
#include <stdint.h>
#include "stm32f4xx_hal.h"

uint8_t light_sensor_active = 0;

uint32_t sensors_light_get_ambient_light_level() {
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
	uint32_t ambient_light = SENSORS_LIGHT_SENSOR_INACTIVE;
 8001992:	f04f 3311 	mov.w	r3, #286331153	@ 0x11111111
 8001996:	607b      	str	r3, [r7, #4]
	if(light_sensor_active) {
 8001998:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <sensors_light_get_ambient_light_level+0x40>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d010      	beq.n	80019c2 <sensors_light_get_ambient_light_level+0x36>
		HAL_ADC_Start(SENSORS_LIGHT_SENSOR_ADC);
 80019a0:	480b      	ldr	r0, [pc, #44]	@ (80019d0 <sensors_light_get_ambient_light_level+0x44>)
 80019a2:	f000 f91d 	bl	8001be0 <HAL_ADC_Start>
		if(HAL_ADC_PollForConversion(SENSORS_LIGHT_SENSOR_ADC, 10) == HAL_OK) {
 80019a6:	210a      	movs	r1, #10
 80019a8:	4809      	ldr	r0, [pc, #36]	@ (80019d0 <sensors_light_get_ambient_light_level+0x44>)
 80019aa:	f000 fa00 	bl	8001dae <HAL_ADC_PollForConversion>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d106      	bne.n	80019c2 <sensors_light_get_ambient_light_level+0x36>
			ambient_light = HAL_ADC_GetValue(SENSORS_LIGHT_SENSOR_ADC);
 80019b4:	4806      	ldr	r0, [pc, #24]	@ (80019d0 <sensors_light_get_ambient_light_level+0x44>)
 80019b6:	f000 fa85 	bl	8001ec4 <HAL_ADC_GetValue>
 80019ba:	6078      	str	r0, [r7, #4]
			HAL_ADC_Stop(SENSORS_LIGHT_SENSOR_ADC);
 80019bc:	4804      	ldr	r0, [pc, #16]	@ (80019d0 <sensors_light_get_ambient_light_level+0x44>)
 80019be:	f000 f9c3 	bl	8001d48 <HAL_ADC_Stop>
		}
	}
	return ambient_light;
 80019c2:	687b      	ldr	r3, [r7, #4]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	200002c2 	.word	0x200002c2
 80019d0:	2000003c 	.word	0x2000003c

080019d4 <sensors_light_sensor_start>:


void sensors_light_sensor_start() {
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
	light_sensor_active = 1;
 80019d8:	4b03      	ldr	r3, [pc, #12]	@ (80019e8 <sensors_light_sensor_start+0x14>)
 80019da:	2201      	movs	r2, #1
 80019dc:	701a      	strb	r2, [r3, #0]
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	200002c2 	.word	0x200002c2

080019ec <sensors_light_sensor_stop>:

void sensors_light_sensor_stop() {
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
	light_sensor_active = 0;
 80019f0:	4b03      	ldr	r3, [pc, #12]	@ (8001a00 <sensors_light_sensor_stop+0x14>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	200002c2 	.word	0x200002c2

08001a04 <sensors_movement_detected>:
#include "stm32f4xx_hal.h"

uint8_t movement_sensor_detected = 0;


void sensors_movement_detected() {
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
	movement_sensor_detected = 1;
 8001a08:	4b03      	ldr	r3, [pc, #12]	@ (8001a18 <sensors_movement_detected+0x14>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	701a      	strb	r2, [r3, #0]
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	200002c3 	.word	0x200002c3

08001a1c <sensors_movement_is_detected>:

uint8_t sensors_movement_is_detected() {
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
	return movement_sensor_detected;
 8001a20:	4b03      	ldr	r3, [pc, #12]	@ (8001a30 <sensors_movement_is_detected+0x14>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	200002c3 	.word	0x200002c3

08001a34 <sensors_movement_detected_reset>:
 * @brief Resets movement_sensor_detected to 0
 * This function is used to tell that the interrupt has been correctly served
 * by resetting the associated variable
 * @retval None
 */
void sensors_movement_detected_reset() {
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
	movement_sensor_detected = 0;
 8001a38:	4b03      	ldr	r3, [pc, #12]	@ (8001a48 <sensors_movement_detected_reset+0x14>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	200002c3 	.word	0x200002c3

08001a4c <sensors_movement_sensor_on>:

/*
 * @brief Enable movement sensor interrupt detection
 * @retval None
 */
void sensors_movement_sensor_on() {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2100      	movs	r1, #0
 8001a54:	2017      	movs	r0, #23
 8001a56:	f000 fd86 	bl	8002566 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a5a:	2017      	movs	r0, #23
 8001a5c:	f000 fd9f 	bl	800259e <HAL_NVIC_EnableIRQ>
}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <sensors_movement_sensor_off>:

/*
 * @brief Disable movement sensor interrupt detection
 * @retval None
 */
void sensors_movement_sensor_off() {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001a68:	2017      	movs	r0, #23
 8001a6a:	f000 fda6 	bl	80025ba <HAL_NVIC_DisableIRQ>
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a78:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab4 <HAL_Init+0x40>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab4 <HAL_Init+0x40>)
 8001a7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a84:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <HAL_Init+0x40>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab4 <HAL_Init+0x40>)
 8001a8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a90:	4b08      	ldr	r3, [pc, #32]	@ (8001ab4 <HAL_Init+0x40>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a07      	ldr	r2, [pc, #28]	@ (8001ab4 <HAL_Init+0x40>)
 8001a96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a9c:	2003      	movs	r0, #3
 8001a9e:	f000 fd57 	bl	8002550 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f000 f808 	bl	8001ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa8:	f7ff f880 	bl	8000bac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023c00 	.word	0x40023c00

08001ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ac0:	4b12      	ldr	r3, [pc, #72]	@ (8001b0c <HAL_InitTick+0x54>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b12      	ldr	r3, [pc, #72]	@ (8001b10 <HAL_InitTick+0x58>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 fd81 	bl	80025de <HAL_SYSTICK_Config>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00e      	b.n	8001b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b0f      	cmp	r3, #15
 8001aea:	d80a      	bhi.n	8001b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aec:	2200      	movs	r2, #0
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001af4:	f000 fd37 	bl	8002566 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af8:	4a06      	ldr	r2, [pc, #24]	@ (8001b14 <HAL_InitTick+0x5c>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e000      	b.n	8001b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	2000001c 	.word	0x2000001c
 8001b14:	20000018 	.word	0x20000018

08001b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <HAL_IncTick+0x20>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <HAL_IncTick+0x24>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	4a04      	ldr	r2, [pc, #16]	@ (8001b3c <HAL_IncTick+0x24>)
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	2000001c 	.word	0x2000001c
 8001b3c:	200002c4 	.word	0x200002c4

08001b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return uwTick;
 8001b44:	4b03      	ldr	r3, [pc, #12]	@ (8001b54 <HAL_GetTick+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	200002c4 	.word	0x200002c4

08001b58 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b60:	2300      	movs	r3, #0
 8001b62:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e033      	b.n	8001bd6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d109      	bne.n	8001b8a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff f840 	bl	8000bfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8e:	f003 0310 	and.w	r3, r3, #16
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d118      	bne.n	8001bc8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b9e:	f023 0302 	bic.w	r3, r3, #2
 8001ba2:	f043 0202 	orr.w	r2, r3, #2
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 faca 	bl	8002144 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bba:	f023 0303 	bic.w	r3, r3, #3
 8001bbe:	f043 0201 	orr.w	r2, r3, #1
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bc6:	e001      	b.n	8001bcc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d101      	bne.n	8001bfa <HAL_ADC_Start+0x1a>
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e097      	b.n	8001d2a <HAL_ADC_Start+0x14a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d018      	beq.n	8001c42 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0201 	orr.w	r2, r2, #1
 8001c1e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c20:	4b45      	ldr	r3, [pc, #276]	@ (8001d38 <HAL_ADC_Start+0x158>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a45      	ldr	r2, [pc, #276]	@ (8001d3c <HAL_ADC_Start+0x15c>)
 8001c26:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2a:	0c9a      	lsrs	r2, r3, #18
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	4413      	add	r3, r2
 8001c32:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001c34:	e002      	b.n	8001c3c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f9      	bne.n	8001c36 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d15f      	bne.n	8001d10 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c54:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001c58:	f023 0301 	bic.w	r3, r3, #1
 8001c5c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d007      	beq.n	8001c82 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c7a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c8e:	d106      	bne.n	8001c9e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c94:	f023 0206 	bic.w	r2, r3, #6
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	645a      	str	r2, [r3, #68]	@ 0x44
 8001c9c:	e002      	b.n	8001ca4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cac:	4b24      	ldr	r3, [pc, #144]	@ (8001d40 <HAL_ADC_Start+0x160>)
 8001cae:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001cb8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 031f 	and.w	r3, r3, #31
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10f      	bne.n	8001ce6 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d129      	bne.n	8001d28 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	e020      	b.n	8001d28 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a16      	ldr	r2, [pc, #88]	@ (8001d44 <HAL_ADC_Start+0x164>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d11b      	bne.n	8001d28 <HAL_ADC_Start+0x148>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d114      	bne.n	8001d28 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	e00b      	b.n	8001d28 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d14:	f043 0210 	orr.w	r2, r3, #16
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d20:	f043 0201 	orr.w	r2, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	431bde83 	.word	0x431bde83
 8001d40:	40012300 	.word	0x40012300
 8001d44:	40012000 	.word	0x40012000

08001d48 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d101      	bne.n	8001d5e <HAL_ADC_Stop+0x16>
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	e021      	b.n	8001da2 <HAL_ADC_Stop+0x5a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0201 	bic.w	r2, r2, #1
 8001d74:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d109      	bne.n	8001d98 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d88:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d8c:	f023 0301 	bic.w	r3, r3, #1
 8001d90:	f043 0201 	orr.w	r2, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b084      	sub	sp, #16
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dca:	d113      	bne.n	8001df4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001dd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dda:	d10b      	bne.n	8001df4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de0:	f043 0220 	orr.w	r2, r3, #32
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e063      	b.n	8001ebc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001df4:	f7ff fea4 	bl	8001b40 <HAL_GetTick>
 8001df8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001dfa:	e021      	b.n	8001e40 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e02:	d01d      	beq.n	8001e40 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d007      	beq.n	8001e1a <HAL_ADC_PollForConversion+0x6c>
 8001e0a:	f7ff fe99 	bl	8001b40 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d212      	bcs.n	8001e40 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d00b      	beq.n	8001e40 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2c:	f043 0204 	orr.w	r2, r3, #4
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e03d      	b.n	8001ebc <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d1d6      	bne.n	8001dfc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f06f 0212 	mvn.w	r2, #18
 8001e56:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d123      	bne.n	8001eba <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d11f      	bne.n	8001eba <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e80:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d006      	beq.n	8001e96 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d111      	bne.n	8001eba <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d105      	bne.n	8001eba <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	f043 0201 	orr.w	r2, r3, #1
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
	...

08001ee0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x1c>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e113      	b.n	8002124 <HAL_ADC_ConfigChannel+0x244>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b09      	cmp	r3, #9
 8001f0a:	d925      	bls.n	8001f58 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68d9      	ldr	r1, [r3, #12]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	4413      	add	r3, r2
 8001f20:	3b1e      	subs	r3, #30
 8001f22:	2207      	movs	r2, #7
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43da      	mvns	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	400a      	ands	r2, r1
 8001f30:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68d9      	ldr	r1, [r3, #12]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	4618      	mov	r0, r3
 8001f44:	4603      	mov	r3, r0
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	4403      	add	r3, r0
 8001f4a:	3b1e      	subs	r3, #30
 8001f4c:	409a      	lsls	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	e022      	b.n	8001f9e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6919      	ldr	r1, [r3, #16]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	461a      	mov	r2, r3
 8001f66:	4613      	mov	r3, r2
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	4413      	add	r3, r2
 8001f6c:	2207      	movs	r2, #7
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43da      	mvns	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	400a      	ands	r2, r1
 8001f7a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6919      	ldr	r1, [r3, #16]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	4603      	mov	r3, r0
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	4403      	add	r3, r0
 8001f94:	409a      	lsls	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b06      	cmp	r3, #6
 8001fa4:	d824      	bhi.n	8001ff0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3b05      	subs	r3, #5
 8001fb8:	221f      	movs	r2, #31
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43da      	mvns	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	400a      	ands	r2, r1
 8001fc6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	3b05      	subs	r3, #5
 8001fe2:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fee:	e04c      	b.n	800208a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b0c      	cmp	r3, #12
 8001ff6:	d824      	bhi.n	8002042 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	3b23      	subs	r3, #35	@ 0x23
 800200a:	221f      	movs	r2, #31
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43da      	mvns	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	400a      	ands	r2, r1
 8002018:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	b29b      	uxth	r3, r3
 8002026:	4618      	mov	r0, r3
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	3b23      	subs	r3, #35	@ 0x23
 8002034:	fa00 f203 	lsl.w	r2, r0, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002040:	e023      	b.n	800208a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	3b41      	subs	r3, #65	@ 0x41
 8002054:	221f      	movs	r2, #31
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43da      	mvns	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	400a      	ands	r2, r1
 8002062:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	b29b      	uxth	r3, r3
 8002070:	4618      	mov	r0, r3
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	3b41      	subs	r3, #65	@ 0x41
 800207e:	fa00 f203 	lsl.w	r2, r0, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800208a:	4b29      	ldr	r3, [pc, #164]	@ (8002130 <HAL_ADC_ConfigChannel+0x250>)
 800208c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a28      	ldr	r2, [pc, #160]	@ (8002134 <HAL_ADC_ConfigChannel+0x254>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d10f      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x1d8>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b12      	cmp	r3, #18
 800209e:	d10b      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002134 <HAL_ADC_ConfigChannel+0x254>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d12b      	bne.n	800211a <HAL_ADC_ConfigChannel+0x23a>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002138 <HAL_ADC_ConfigChannel+0x258>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d003      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x1f4>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b11      	cmp	r3, #17
 80020d2:	d122      	bne.n	800211a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a11      	ldr	r2, [pc, #68]	@ (8002138 <HAL_ADC_ConfigChannel+0x258>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d111      	bne.n	800211a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020f6:	4b11      	ldr	r3, [pc, #68]	@ (800213c <HAL_ADC_ConfigChannel+0x25c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a11      	ldr	r2, [pc, #68]	@ (8002140 <HAL_ADC_ConfigChannel+0x260>)
 80020fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002100:	0c9a      	lsrs	r2, r3, #18
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800210c:	e002      	b.n	8002114 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	3b01      	subs	r3, #1
 8002112:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f9      	bne.n	800210e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	40012300 	.word	0x40012300
 8002134:	40012000 	.word	0x40012000
 8002138:	10000012 	.word	0x10000012
 800213c:	20000000 	.word	0x20000000
 8002140:	431bde83 	.word	0x431bde83

08002144 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800214c:	4b79      	ldr	r3, [pc, #484]	@ (8002334 <ADC_Init+0x1f0>)
 800214e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	431a      	orrs	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002178:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6859      	ldr	r1, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	021a      	lsls	r2, r3, #8
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800219c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6859      	ldr	r1, [r3, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6899      	ldr	r1, [r3, #8]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d6:	4a58      	ldr	r2, [pc, #352]	@ (8002338 <ADC_Init+0x1f4>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d022      	beq.n	8002222 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6899      	ldr	r1, [r3, #8]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800220c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6899      	ldr	r1, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	e00f      	b.n	8002242 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002230:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002240:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0202 	bic.w	r2, r2, #2
 8002250:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6899      	ldr	r1, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	7e1b      	ldrb	r3, [r3, #24]
 800225c:	005a      	lsls	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d01b      	beq.n	80022a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800227e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800228e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6859      	ldr	r1, [r3, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229a:	3b01      	subs	r3, #1
 800229c:	035a      	lsls	r2, r3, #13
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	e007      	b.n	80022b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022b6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80022c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	051a      	lsls	r2, r3, #20
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80022ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6899      	ldr	r1, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80022fa:	025a      	lsls	r2, r3, #9
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002312:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6899      	ldr	r1, [r3, #8]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	029a      	lsls	r2, r3, #10
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	609a      	str	r2, [r3, #8]
}
 8002328:	bf00      	nop
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	40012300 	.word	0x40012300
 8002338:	0f000001 	.word	0x0f000001

0800233c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800234c:	4b0c      	ldr	r3, [pc, #48]	@ (8002380 <__NVIC_SetPriorityGrouping+0x44>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002358:	4013      	ands	r3, r2
 800235a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002364:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002368:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800236c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800236e:	4a04      	ldr	r2, [pc, #16]	@ (8002380 <__NVIC_SetPriorityGrouping+0x44>)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	60d3      	str	r3, [r2, #12]
}
 8002374:	bf00      	nop
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002388:	4b04      	ldr	r3, [pc, #16]	@ (800239c <__NVIC_GetPriorityGrouping+0x18>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	0a1b      	lsrs	r3, r3, #8
 800238e:	f003 0307 	and.w	r3, r3, #7
}
 8002392:	4618      	mov	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	db0b      	blt.n	80023ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	f003 021f 	and.w	r2, r3, #31
 80023b8:	4907      	ldr	r1, [pc, #28]	@ (80023d8 <__NVIC_EnableIRQ+0x38>)
 80023ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023be:	095b      	lsrs	r3, r3, #5
 80023c0:	2001      	movs	r0, #1
 80023c2:	fa00 f202 	lsl.w	r2, r0, r2
 80023c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	e000e100 	.word	0xe000e100

080023dc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	db12      	blt.n	8002414 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	f003 021f 	and.w	r2, r3, #31
 80023f4:	490a      	ldr	r1, [pc, #40]	@ (8002420 <__NVIC_DisableIRQ+0x44>)
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	2001      	movs	r0, #1
 80023fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002402:	3320      	adds	r3, #32
 8002404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002408:	f3bf 8f4f 	dsb	sy
}
 800240c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800240e:	f3bf 8f6f 	isb	sy
}
 8002412:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000e100 	.word	0xe000e100

08002424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	6039      	str	r1, [r7, #0]
 800242e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002434:	2b00      	cmp	r3, #0
 8002436:	db0a      	blt.n	800244e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	b2da      	uxtb	r2, r3
 800243c:	490c      	ldr	r1, [pc, #48]	@ (8002470 <__NVIC_SetPriority+0x4c>)
 800243e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002442:	0112      	lsls	r2, r2, #4
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	440b      	add	r3, r1
 8002448:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800244c:	e00a      	b.n	8002464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	b2da      	uxtb	r2, r3
 8002452:	4908      	ldr	r1, [pc, #32]	@ (8002474 <__NVIC_SetPriority+0x50>)
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	3b04      	subs	r3, #4
 800245c:	0112      	lsls	r2, r2, #4
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	440b      	add	r3, r1
 8002462:	761a      	strb	r2, [r3, #24]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000e100 	.word	0xe000e100
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002478:	b480      	push	{r7}
 800247a:	b089      	sub	sp, #36	@ 0x24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f1c3 0307 	rsb	r3, r3, #7
 8002492:	2b04      	cmp	r3, #4
 8002494:	bf28      	it	cs
 8002496:	2304      	movcs	r3, #4
 8002498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3304      	adds	r3, #4
 800249e:	2b06      	cmp	r3, #6
 80024a0:	d902      	bls.n	80024a8 <NVIC_EncodePriority+0x30>
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3b03      	subs	r3, #3
 80024a6:	e000      	b.n	80024aa <NVIC_EncodePriority+0x32>
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43da      	mvns	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	401a      	ands	r2, r3
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ca:	43d9      	mvns	r1, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d0:	4313      	orrs	r3, r2
         );
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3724      	adds	r7, #36	@ 0x24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
	...

080024e0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80024e4:	f3bf 8f4f 	dsb	sy
}
 80024e8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80024ea:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <__NVIC_SystemReset+0x24>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80024f2:	4904      	ldr	r1, [pc, #16]	@ (8002504 <__NVIC_SystemReset+0x24>)
 80024f4:	4b04      	ldr	r3, [pc, #16]	@ (8002508 <__NVIC_SystemReset+0x28>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80024fa:	f3bf 8f4f 	dsb	sy
}
 80024fe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002500:	bf00      	nop
 8002502:	e7fd      	b.n	8002500 <__NVIC_SystemReset+0x20>
 8002504:	e000ed00 	.word	0xe000ed00
 8002508:	05fa0004 	.word	0x05fa0004

0800250c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3b01      	subs	r3, #1
 8002518:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800251c:	d301      	bcc.n	8002522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800251e:	2301      	movs	r3, #1
 8002520:	e00f      	b.n	8002542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002522:	4a0a      	ldr	r2, [pc, #40]	@ (800254c <SysTick_Config+0x40>)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3b01      	subs	r3, #1
 8002528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800252a:	210f      	movs	r1, #15
 800252c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002530:	f7ff ff78 	bl	8002424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002534:	4b05      	ldr	r3, [pc, #20]	@ (800254c <SysTick_Config+0x40>)
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800253a:	4b04      	ldr	r3, [pc, #16]	@ (800254c <SysTick_Config+0x40>)
 800253c:	2207      	movs	r2, #7
 800253e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	e000e010 	.word	0xe000e010

08002550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff feef 	bl	800233c <__NVIC_SetPriorityGrouping>
}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002566:	b580      	push	{r7, lr}
 8002568:	b086      	sub	sp, #24
 800256a:	af00      	add	r7, sp, #0
 800256c:	4603      	mov	r3, r0
 800256e:	60b9      	str	r1, [r7, #8]
 8002570:	607a      	str	r2, [r7, #4]
 8002572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002578:	f7ff ff04 	bl	8002384 <__NVIC_GetPriorityGrouping>
 800257c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	68b9      	ldr	r1, [r7, #8]
 8002582:	6978      	ldr	r0, [r7, #20]
 8002584:	f7ff ff78 	bl	8002478 <NVIC_EncodePriority>
 8002588:	4602      	mov	r2, r0
 800258a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800258e:	4611      	mov	r1, r2
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff ff47 	bl	8002424 <__NVIC_SetPriority>
}
 8002596:	bf00      	nop
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	4603      	mov	r3, r0
 80025a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fef7 	bl	80023a0 <__NVIC_EnableIRQ>
}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	4603      	mov	r3, r0
 80025c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80025c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff ff07 	bl	80023dc <__NVIC_DisableIRQ>
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80025da:	f7ff ff81 	bl	80024e0 <__NVIC_SystemReset>

080025de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff ff90 	bl	800250c <SysTick_Config>
 80025ec:	4603      	mov	r3, r0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002604:	f7ff fa9c 	bl	8001b40 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e099      	b.n	8002748 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2202      	movs	r2, #2
 8002618:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0201 	bic.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002634:	e00f      	b.n	8002656 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002636:	f7ff fa83 	bl	8001b40 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b05      	cmp	r3, #5
 8002642:	d908      	bls.n	8002656 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2220      	movs	r2, #32
 8002648:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2203      	movs	r2, #3
 800264e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e078      	b.n	8002748 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1e8      	bne.n	8002636 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	4b38      	ldr	r3, [pc, #224]	@ (8002750 <HAL_DMA_Init+0x158>)
 8002670:	4013      	ands	r3, r2
 8002672:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002682:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800268e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800269a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ac:	2b04      	cmp	r3, #4
 80026ae:	d107      	bne.n	80026c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b8:	4313      	orrs	r3, r2
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	4313      	orrs	r3, r2
 80026be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f023 0307 	bic.w	r3, r3, #7
 80026d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	4313      	orrs	r3, r2
 80026e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d117      	bne.n	800271a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00e      	beq.n	800271a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 fb0f 	bl	8002d20 <DMA_CheckFifoParam>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2240      	movs	r2, #64	@ 0x40
 800270c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002716:	2301      	movs	r3, #1
 8002718:	e016      	b.n	8002748 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 fac6 	bl	8002cb4 <DMA_CalcBaseAndBitshift>
 8002728:	4603      	mov	r3, r0
 800272a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002730:	223f      	movs	r2, #63	@ 0x3f
 8002732:	409a      	lsls	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	f010803f 	.word	0xf010803f

08002754 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
 8002760:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002772:	2b01      	cmp	r3, #1
 8002774:	d101      	bne.n	800277a <HAL_DMA_Start_IT+0x26>
 8002776:	2302      	movs	r3, #2
 8002778:	e040      	b.n	80027fc <HAL_DMA_Start_IT+0xa8>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b01      	cmp	r3, #1
 800278c:	d12f      	bne.n	80027ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2202      	movs	r2, #2
 8002792:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 fa58 	bl	8002c58 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ac:	223f      	movs	r2, #63	@ 0x3f
 80027ae:	409a      	lsls	r2, r3
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0216 	orr.w	r2, r2, #22
 80027c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d007      	beq.n	80027dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0208 	orr.w	r2, r2, #8
 80027da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0201 	orr.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	e005      	b.n	80027fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027f6:	2302      	movs	r3, #2
 80027f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002810:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002812:	f7ff f995 	bl	8001b40 <HAL_GetTick>
 8002816:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d008      	beq.n	8002836 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2280      	movs	r2, #128	@ 0x80
 8002828:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e052      	b.n	80028dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0216 	bic.w	r2, r2, #22
 8002844:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695a      	ldr	r2, [r3, #20]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002854:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d103      	bne.n	8002866 <HAL_DMA_Abort+0x62>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002862:	2b00      	cmp	r3, #0
 8002864:	d007      	beq.n	8002876 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0208 	bic.w	r2, r2, #8
 8002874:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0201 	bic.w	r2, r2, #1
 8002884:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002886:	e013      	b.n	80028b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002888:	f7ff f95a 	bl	8001b40 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b05      	cmp	r3, #5
 8002894:	d90c      	bls.n	80028b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2220      	movs	r2, #32
 800289a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2203      	movs	r2, #3
 80028a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e015      	b.n	80028dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1e4      	bne.n	8002888 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c2:	223f      	movs	r2, #63	@ 0x3f
 80028c4:	409a      	lsls	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d004      	beq.n	8002902 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2280      	movs	r2, #128	@ 0x80
 80028fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e00c      	b.n	800291c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2205      	movs	r2, #5
 8002906:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 0201 	bic.w	r2, r2, #1
 8002918:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002934:	4b8e      	ldr	r3, [pc, #568]	@ (8002b70 <HAL_DMA_IRQHandler+0x248>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a8e      	ldr	r2, [pc, #568]	@ (8002b74 <HAL_DMA_IRQHandler+0x24c>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	0a9b      	lsrs	r3, r3, #10
 8002940:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002946:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002952:	2208      	movs	r2, #8
 8002954:	409a      	lsls	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4013      	ands	r3, r2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d01a      	beq.n	8002994 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d013      	beq.n	8002994 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0204 	bic.w	r2, r2, #4
 800297a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002980:	2208      	movs	r2, #8
 8002982:	409a      	lsls	r2, r3
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800298c:	f043 0201 	orr.w	r2, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002998:	2201      	movs	r2, #1
 800299a:	409a      	lsls	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4013      	ands	r3, r2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d012      	beq.n	80029ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00b      	beq.n	80029ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b6:	2201      	movs	r2, #1
 80029b8:	409a      	lsls	r2, r3
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c2:	f043 0202 	orr.w	r2, r3, #2
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ce:	2204      	movs	r2, #4
 80029d0:	409a      	lsls	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d012      	beq.n	8002a00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00b      	beq.n	8002a00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ec:	2204      	movs	r2, #4
 80029ee:	409a      	lsls	r2, r3
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f8:	f043 0204 	orr.w	r2, r3, #4
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a04:	2210      	movs	r2, #16
 8002a06:	409a      	lsls	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d043      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d03c      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a22:	2210      	movs	r2, #16
 8002a24:	409a      	lsls	r2, r3
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d018      	beq.n	8002a6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d108      	bne.n	8002a58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d024      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	4798      	blx	r3
 8002a56:	e01f      	b.n	8002a98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d01b      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	4798      	blx	r3
 8002a68:	e016      	b.n	8002a98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d107      	bne.n	8002a88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0208 	bic.w	r2, r2, #8
 8002a86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	409a      	lsls	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 808f 	beq.w	8002bc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 8087 	beq.w	8002bc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002abe:	2220      	movs	r2, #32
 8002ac0:	409a      	lsls	r2, r3
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b05      	cmp	r3, #5
 8002ad0:	d136      	bne.n	8002b40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0216 	bic.w	r2, r2, #22
 8002ae0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695a      	ldr	r2, [r3, #20]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002af0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d103      	bne.n	8002b02 <HAL_DMA_IRQHandler+0x1da>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d007      	beq.n	8002b12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0208 	bic.w	r2, r2, #8
 8002b10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b16:	223f      	movs	r2, #63	@ 0x3f
 8002b18:	409a      	lsls	r2, r3
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d07e      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	4798      	blx	r3
        }
        return;
 8002b3e:	e079      	b.n	8002c34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d01d      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10d      	bne.n	8002b78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d031      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	4798      	blx	r3
 8002b6c:	e02c      	b.n	8002bc8 <HAL_DMA_IRQHandler+0x2a0>
 8002b6e:	bf00      	nop
 8002b70:	20000000 	.word	0x20000000
 8002b74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d023      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	4798      	blx	r3
 8002b88:	e01e      	b.n	8002bc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10f      	bne.n	8002bb8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0210 	bic.w	r2, r2, #16
 8002ba6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d032      	beq.n	8002c36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d022      	beq.n	8002c22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2205      	movs	r2, #5
 8002be0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0201 	bic.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d307      	bcc.n	8002c10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f2      	bne.n	8002bf4 <HAL_DMA_IRQHandler+0x2cc>
 8002c0e:	e000      	b.n	8002c12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d005      	beq.n	8002c36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	4798      	blx	r3
 8002c32:	e000      	b.n	8002c36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c34:	bf00      	nop
    }
  }
}
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c4a:	b2db      	uxtb	r3, r3
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
 8002c64:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c74:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2b40      	cmp	r3, #64	@ 0x40
 8002c84:	d108      	bne.n	8002c98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c96:	e007      	b.n	8002ca8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	60da      	str	r2, [r3, #12]
}
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	3b10      	subs	r3, #16
 8002cc4:	4a14      	ldr	r2, [pc, #80]	@ (8002d18 <DMA_CalcBaseAndBitshift+0x64>)
 8002cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cca:	091b      	lsrs	r3, r3, #4
 8002ccc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cce:	4a13      	ldr	r2, [pc, #76]	@ (8002d1c <DMA_CalcBaseAndBitshift+0x68>)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	d909      	bls.n	8002cf6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002cea:	f023 0303 	bic.w	r3, r3, #3
 8002cee:	1d1a      	adds	r2, r3, #4
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002cf4:	e007      	b.n	8002d06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002cfe:	f023 0303 	bic.w	r3, r3, #3
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	aaaaaaab 	.word	0xaaaaaaab
 8002d1c:	080078b0 	.word	0x080078b0

08002d20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d11f      	bne.n	8002d7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b03      	cmp	r3, #3
 8002d3e:	d856      	bhi.n	8002dee <DMA_CheckFifoParam+0xce>
 8002d40:	a201      	add	r2, pc, #4	@ (adr r2, 8002d48 <DMA_CheckFifoParam+0x28>)
 8002d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d46:	bf00      	nop
 8002d48:	08002d59 	.word	0x08002d59
 8002d4c:	08002d6b 	.word	0x08002d6b
 8002d50:	08002d59 	.word	0x08002d59
 8002d54:	08002def 	.word	0x08002def
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d046      	beq.n	8002df2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d68:	e043      	b.n	8002df2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d72:	d140      	bne.n	8002df6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d78:	e03d      	b.n	8002df6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d82:	d121      	bne.n	8002dc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d837      	bhi.n	8002dfa <DMA_CheckFifoParam+0xda>
 8002d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d90 <DMA_CheckFifoParam+0x70>)
 8002d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d90:	08002da1 	.word	0x08002da1
 8002d94:	08002da7 	.word	0x08002da7
 8002d98:	08002da1 	.word	0x08002da1
 8002d9c:	08002db9 	.word	0x08002db9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	73fb      	strb	r3, [r7, #15]
      break;
 8002da4:	e030      	b.n	8002e08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002daa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d025      	beq.n	8002dfe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002db6:	e022      	b.n	8002dfe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dbc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002dc0:	d11f      	bne.n	8002e02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dc6:	e01c      	b.n	8002e02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d903      	bls.n	8002dd6 <DMA_CheckFifoParam+0xb6>
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d003      	beq.n	8002ddc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002dd4:	e018      	b.n	8002e08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	73fb      	strb	r3, [r7, #15]
      break;
 8002dda:	e015      	b.n	8002e08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00e      	beq.n	8002e06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	73fb      	strb	r3, [r7, #15]
      break;
 8002dec:	e00b      	b.n	8002e06 <DMA_CheckFifoParam+0xe6>
      break;
 8002dee:	bf00      	nop
 8002df0:	e00a      	b.n	8002e08 <DMA_CheckFifoParam+0xe8>
      break;
 8002df2:	bf00      	nop
 8002df4:	e008      	b.n	8002e08 <DMA_CheckFifoParam+0xe8>
      break;
 8002df6:	bf00      	nop
 8002df8:	e006      	b.n	8002e08 <DMA_CheckFifoParam+0xe8>
      break;
 8002dfa:	bf00      	nop
 8002dfc:	e004      	b.n	8002e08 <DMA_CheckFifoParam+0xe8>
      break;
 8002dfe:	bf00      	nop
 8002e00:	e002      	b.n	8002e08 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e02:	bf00      	nop
 8002e04:	e000      	b.n	8002e08 <DMA_CheckFifoParam+0xe8>
      break;
 8002e06:	bf00      	nop
    }
  } 
  
  return status; 
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop

08002e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b089      	sub	sp, #36	@ 0x24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
 8002e32:	e159      	b.n	80030e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e34:	2201      	movs	r2, #1
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	4013      	ands	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	f040 8148 	bne.w	80030e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d005      	beq.n	8002e6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d130      	bne.n	8002ecc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	2203      	movs	r2, #3
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	091b      	lsrs	r3, r3, #4
 8002eb6:	f003 0201 	and.w	r2, r3, #1
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d017      	beq.n	8002f08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 0303 	and.w	r3, r3, #3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d123      	bne.n	8002f5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	08da      	lsrs	r2, r3, #3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3208      	adds	r2, #8
 8002f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	220f      	movs	r2, #15
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4013      	ands	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	08da      	lsrs	r2, r3, #3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3208      	adds	r2, #8
 8002f56:	69b9      	ldr	r1, [r7, #24]
 8002f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	2203      	movs	r2, #3
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 0203 	and.w	r2, r3, #3
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 80a2 	beq.w	80030e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	4b57      	ldr	r3, [pc, #348]	@ (8003100 <HAL_GPIO_Init+0x2e8>)
 8002fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa6:	4a56      	ldr	r2, [pc, #344]	@ (8003100 <HAL_GPIO_Init+0x2e8>)
 8002fa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fae:	4b54      	ldr	r3, [pc, #336]	@ (8003100 <HAL_GPIO_Init+0x2e8>)
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fba:	4a52      	ldr	r2, [pc, #328]	@ (8003104 <HAL_GPIO_Init+0x2ec>)
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	089b      	lsrs	r3, r3, #2
 8002fc0:	3302      	adds	r3, #2
 8002fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	220f      	movs	r2, #15
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a49      	ldr	r2, [pc, #292]	@ (8003108 <HAL_GPIO_Init+0x2f0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d019      	beq.n	800301a <HAL_GPIO_Init+0x202>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a48      	ldr	r2, [pc, #288]	@ (800310c <HAL_GPIO_Init+0x2f4>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d013      	beq.n	8003016 <HAL_GPIO_Init+0x1fe>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a47      	ldr	r2, [pc, #284]	@ (8003110 <HAL_GPIO_Init+0x2f8>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d00d      	beq.n	8003012 <HAL_GPIO_Init+0x1fa>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a46      	ldr	r2, [pc, #280]	@ (8003114 <HAL_GPIO_Init+0x2fc>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d007      	beq.n	800300e <HAL_GPIO_Init+0x1f6>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a45      	ldr	r2, [pc, #276]	@ (8003118 <HAL_GPIO_Init+0x300>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d101      	bne.n	800300a <HAL_GPIO_Init+0x1f2>
 8003006:	2304      	movs	r3, #4
 8003008:	e008      	b.n	800301c <HAL_GPIO_Init+0x204>
 800300a:	2307      	movs	r3, #7
 800300c:	e006      	b.n	800301c <HAL_GPIO_Init+0x204>
 800300e:	2303      	movs	r3, #3
 8003010:	e004      	b.n	800301c <HAL_GPIO_Init+0x204>
 8003012:	2302      	movs	r3, #2
 8003014:	e002      	b.n	800301c <HAL_GPIO_Init+0x204>
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <HAL_GPIO_Init+0x204>
 800301a:	2300      	movs	r3, #0
 800301c:	69fa      	ldr	r2, [r7, #28]
 800301e:	f002 0203 	and.w	r2, r2, #3
 8003022:	0092      	lsls	r2, r2, #2
 8003024:	4093      	lsls	r3, r2
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4313      	orrs	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800302c:	4935      	ldr	r1, [pc, #212]	@ (8003104 <HAL_GPIO_Init+0x2ec>)
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	089b      	lsrs	r3, r3, #2
 8003032:	3302      	adds	r3, #2
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800303a:	4b38      	ldr	r3, [pc, #224]	@ (800311c <HAL_GPIO_Init+0x304>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	43db      	mvns	r3, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4013      	ands	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800305e:	4a2f      	ldr	r2, [pc, #188]	@ (800311c <HAL_GPIO_Init+0x304>)
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003064:	4b2d      	ldr	r3, [pc, #180]	@ (800311c <HAL_GPIO_Init+0x304>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	43db      	mvns	r3, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003088:	4a24      	ldr	r2, [pc, #144]	@ (800311c <HAL_GPIO_Init+0x304>)
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800308e:	4b23      	ldr	r3, [pc, #140]	@ (800311c <HAL_GPIO_Init+0x304>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	43db      	mvns	r3, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4013      	ands	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030b2:	4a1a      	ldr	r2, [pc, #104]	@ (800311c <HAL_GPIO_Init+0x304>)
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030b8:	4b18      	ldr	r3, [pc, #96]	@ (800311c <HAL_GPIO_Init+0x304>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030dc:	4a0f      	ldr	r2, [pc, #60]	@ (800311c <HAL_GPIO_Init+0x304>)
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	3301      	adds	r3, #1
 80030e6:	61fb      	str	r3, [r7, #28]
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	2b0f      	cmp	r3, #15
 80030ec:	f67f aea2 	bls.w	8002e34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030f0:	bf00      	nop
 80030f2:	bf00      	nop
 80030f4:	3724      	adds	r7, #36	@ 0x24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	40023800 	.word	0x40023800
 8003104:	40013800 	.word	0x40013800
 8003108:	40020000 	.word	0x40020000
 800310c:	40020400 	.word	0x40020400
 8003110:	40020800 	.word	0x40020800
 8003114:	40020c00 	.word	0x40020c00
 8003118:	40021000 	.word	0x40021000
 800311c:	40013c00 	.word	0x40013c00

08003120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	807b      	strh	r3, [r7, #2]
 800312c:	4613      	mov	r3, r2
 800312e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003130:	787b      	ldrb	r3, [r7, #1]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003136:	887a      	ldrh	r2, [r7, #2]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800313c:	e003      	b.n	8003146 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800313e:	887b      	ldrh	r3, [r7, #2]
 8003140:	041a      	lsls	r2, r3, #16
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	619a      	str	r2, [r3, #24]
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
	...

08003154 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800315e:	4b08      	ldr	r3, [pc, #32]	@ (8003180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003160:	695a      	ldr	r2, [r3, #20]
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	4013      	ands	r3, r2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d006      	beq.n	8003178 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800316a:	4a05      	ldr	r2, [pc, #20]	@ (8003180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800316c:	88fb      	ldrh	r3, [r7, #6]
 800316e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003170:	88fb      	ldrh	r3, [r7, #6]
 8003172:	4618      	mov	r0, r3
 8003174:	f7fd f9a8 	bl	80004c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40013c00 	.word	0x40013c00

08003184 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e12b      	b.n	80033ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d106      	bne.n	80031b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7fd fd6a 	bl	8000c84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2224      	movs	r2, #36	@ 0x24
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0201 	bic.w	r2, r2, #1
 80031c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031e8:	f002 fdc2 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 80031ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	4a81      	ldr	r2, [pc, #516]	@ (80033f8 <HAL_I2C_Init+0x274>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d807      	bhi.n	8003208 <HAL_I2C_Init+0x84>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4a80      	ldr	r2, [pc, #512]	@ (80033fc <HAL_I2C_Init+0x278>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	bf94      	ite	ls
 8003200:	2301      	movls	r3, #1
 8003202:	2300      	movhi	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	e006      	b.n	8003216 <HAL_I2C_Init+0x92>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4a7d      	ldr	r2, [pc, #500]	@ (8003400 <HAL_I2C_Init+0x27c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	bf94      	ite	ls
 8003210:	2301      	movls	r3, #1
 8003212:	2300      	movhi	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e0e7      	b.n	80033ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4a78      	ldr	r2, [pc, #480]	@ (8003404 <HAL_I2C_Init+0x280>)
 8003222:	fba2 2303 	umull	r2, r3, r2, r3
 8003226:	0c9b      	lsrs	r3, r3, #18
 8003228:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	430a      	orrs	r2, r1
 800323c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	4a6a      	ldr	r2, [pc, #424]	@ (80033f8 <HAL_I2C_Init+0x274>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d802      	bhi.n	8003258 <HAL_I2C_Init+0xd4>
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	3301      	adds	r3, #1
 8003256:	e009      	b.n	800326c <HAL_I2C_Init+0xe8>
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800325e:	fb02 f303 	mul.w	r3, r2, r3
 8003262:	4a69      	ldr	r2, [pc, #420]	@ (8003408 <HAL_I2C_Init+0x284>)
 8003264:	fba2 2303 	umull	r2, r3, r2, r3
 8003268:	099b      	lsrs	r3, r3, #6
 800326a:	3301      	adds	r3, #1
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6812      	ldr	r2, [r2, #0]
 8003270:	430b      	orrs	r3, r1
 8003272:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800327e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	495c      	ldr	r1, [pc, #368]	@ (80033f8 <HAL_I2C_Init+0x274>)
 8003288:	428b      	cmp	r3, r1
 800328a:	d819      	bhi.n	80032c0 <HAL_I2C_Init+0x13c>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	1e59      	subs	r1, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	fbb1 f3f3 	udiv	r3, r1, r3
 800329a:	1c59      	adds	r1, r3, #1
 800329c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80032a0:	400b      	ands	r3, r1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <HAL_I2C_Init+0x138>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	1e59      	subs	r1, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80032b4:	3301      	adds	r3, #1
 80032b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ba:	e051      	b.n	8003360 <HAL_I2C_Init+0x1dc>
 80032bc:	2304      	movs	r3, #4
 80032be:	e04f      	b.n	8003360 <HAL_I2C_Init+0x1dc>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d111      	bne.n	80032ec <HAL_I2C_Init+0x168>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	1e58      	subs	r0, r3, #1
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6859      	ldr	r1, [r3, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	440b      	add	r3, r1
 80032d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032da:	3301      	adds	r3, #1
 80032dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	bf0c      	ite	eq
 80032e4:	2301      	moveq	r3, #1
 80032e6:	2300      	movne	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	e012      	b.n	8003312 <HAL_I2C_Init+0x18e>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	1e58      	subs	r0, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6859      	ldr	r1, [r3, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	0099      	lsls	r1, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003302:	3301      	adds	r3, #1
 8003304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003308:	2b00      	cmp	r3, #0
 800330a:	bf0c      	ite	eq
 800330c:	2301      	moveq	r3, #1
 800330e:	2300      	movne	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_I2C_Init+0x196>
 8003316:	2301      	movs	r3, #1
 8003318:	e022      	b.n	8003360 <HAL_I2C_Init+0x1dc>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10e      	bne.n	8003340 <HAL_I2C_Init+0x1bc>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1e58      	subs	r0, r3, #1
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6859      	ldr	r1, [r3, #4]
 800332a:	460b      	mov	r3, r1
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	440b      	add	r3, r1
 8003330:	fbb0 f3f3 	udiv	r3, r0, r3
 8003334:	3301      	adds	r3, #1
 8003336:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800333a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800333e:	e00f      	b.n	8003360 <HAL_I2C_Init+0x1dc>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	1e58      	subs	r0, r3, #1
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6859      	ldr	r1, [r3, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	0099      	lsls	r1, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	fbb0 f3f3 	udiv	r3, r0, r3
 8003356:	3301      	adds	r3, #1
 8003358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800335c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	6809      	ldr	r1, [r1, #0]
 8003364:	4313      	orrs	r3, r2
 8003366:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69da      	ldr	r2, [r3, #28]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	430a      	orrs	r2, r1
 8003382:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800338e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6911      	ldr	r1, [r2, #16]
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	68d2      	ldr	r2, [r2, #12]
 800339a:	4311      	orrs	r1, r2
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	430b      	orrs	r3, r1
 80033a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695a      	ldr	r2, [r3, #20]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	000186a0 	.word	0x000186a0
 80033fc:	001e847f 	.word	0x001e847f
 8003400:	003d08ff 	.word	0x003d08ff
 8003404:	431bde83 	.word	0x431bde83
 8003408:	10624dd3 	.word	0x10624dd3

0800340c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800341e:	2b80      	cmp	r3, #128	@ 0x80
 8003420:	d103      	bne.n	800342a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2200      	movs	r2, #0
 8003428:	611a      	str	r2, [r3, #16]
  }
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
	...

08003438 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b088      	sub	sp, #32
 800343c:	af02      	add	r7, sp, #8
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	607a      	str	r2, [r7, #4]
 8003442:	461a      	mov	r2, r3
 8003444:	460b      	mov	r3, r1
 8003446:	817b      	strh	r3, [r7, #10]
 8003448:	4613      	mov	r3, r2
 800344a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800344c:	f7fe fb78 	bl	8001b40 <HAL_GetTick>
 8003450:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b20      	cmp	r3, #32
 800345c:	f040 80e0 	bne.w	8003620 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	2319      	movs	r3, #25
 8003466:	2201      	movs	r2, #1
 8003468:	4970      	ldr	r1, [pc, #448]	@ (800362c <HAL_I2C_Master_Transmit+0x1f4>)
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f001 fdea 	bl	8005044 <I2C_WaitOnFlagUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003476:	2302      	movs	r3, #2
 8003478:	e0d3      	b.n	8003622 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <HAL_I2C_Master_Transmit+0x50>
 8003484:	2302      	movs	r3, #2
 8003486:	e0cc      	b.n	8003622 <HAL_I2C_Master_Transmit+0x1ea>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b01      	cmp	r3, #1
 800349c:	d007      	beq.n	80034ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f042 0201 	orr.w	r2, r2, #1
 80034ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2221      	movs	r2, #33	@ 0x21
 80034c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2210      	movs	r2, #16
 80034ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	893a      	ldrh	r2, [r7, #8]
 80034de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4a50      	ldr	r2, [pc, #320]	@ (8003630 <HAL_I2C_Master_Transmit+0x1f8>)
 80034ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034f0:	8979      	ldrh	r1, [r7, #10]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	6a3a      	ldr	r2, [r7, #32]
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f001 fc7a 	bl	8004df0 <I2C_MasterRequestWrite>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e08d      	b.n	8003622 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003506:	2300      	movs	r3, #0
 8003508:	613b      	str	r3, [r7, #16]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	613b      	str	r3, [r7, #16]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	613b      	str	r3, [r7, #16]
 800351a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800351c:	e066      	b.n	80035ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	6a39      	ldr	r1, [r7, #32]
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f001 fea8 	bl	8005278 <I2C_WaitOnTXEFlagUntilTimeout>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00d      	beq.n	800354a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	2b04      	cmp	r3, #4
 8003534:	d107      	bne.n	8003546 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003544:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e06b      	b.n	8003622 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354e:	781a      	ldrb	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003564:	b29b      	uxth	r3, r3
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003572:	3b01      	subs	r3, #1
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b04      	cmp	r3, #4
 8003586:	d11b      	bne.n	80035c0 <HAL_I2C_Master_Transmit+0x188>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800358c:	2b00      	cmp	r3, #0
 800358e:	d017      	beq.n	80035c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003594:	781a      	ldrb	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	6a39      	ldr	r1, [r7, #32]
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f001 fe9f 	bl	8005308 <I2C_WaitOnBTFFlagUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00d      	beq.n	80035ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d107      	bne.n	80035e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e01a      	b.n	8003622 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d194      	bne.n	800351e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003602:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800361c:	2300      	movs	r3, #0
 800361e:	e000      	b.n	8003622 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003620:	2302      	movs	r3, #2
  }
}
 8003622:	4618      	mov	r0, r3
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	00100002 	.word	0x00100002
 8003630:	ffff0000 	.word	0xffff0000

08003634 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b088      	sub	sp, #32
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800363c:	2300      	movs	r3, #0
 800363e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003654:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800365c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	2b10      	cmp	r3, #16
 8003662:	d003      	beq.n	800366c <HAL_I2C_EV_IRQHandler+0x38>
 8003664:	7bfb      	ldrb	r3, [r7, #15]
 8003666:	2b40      	cmp	r3, #64	@ 0x40
 8003668:	f040 80b1 	bne.w	80037ce <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10d      	bne.n	80036a2 <HAL_I2C_EV_IRQHandler+0x6e>
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800368c:	d003      	beq.n	8003696 <HAL_I2C_EV_IRQHandler+0x62>
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003694:	d101      	bne.n	800369a <HAL_I2C_EV_IRQHandler+0x66>
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <HAL_I2C_EV_IRQHandler+0x68>
 800369a:	2300      	movs	r3, #0
 800369c:	2b01      	cmp	r3, #1
 800369e:	f000 8114 	beq.w	80038ca <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00b      	beq.n	80036c4 <HAL_I2C_EV_IRQHandler+0x90>
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d006      	beq.n	80036c4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f001 fecf 	bl	800545a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 fd7a 	bl	80041b6 <I2C_Master_SB>
 80036c2:	e083      	b.n	80037cc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d008      	beq.n	80036e0 <HAL_I2C_EV_IRQHandler+0xac>
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 fdf2 	bl	80042c2 <I2C_Master_ADD10>
 80036de:	e075      	b.n	80037cc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d008      	beq.n	80036fc <HAL_I2C_EV_IRQHandler+0xc8>
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 fe0e 	bl	8004316 <I2C_Master_ADDR>
 80036fa:	e067      	b.n	80037cc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	2b00      	cmp	r3, #0
 8003704:	d036      	beq.n	8003774 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003710:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003714:	f000 80db 	beq.w	80038ce <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00d      	beq.n	800373e <HAL_I2C_EV_IRQHandler+0x10a>
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003728:	2b00      	cmp	r3, #0
 800372a:	d008      	beq.n	800373e <HAL_I2C_EV_IRQHandler+0x10a>
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f003 0304 	and.w	r3, r3, #4
 8003732:	2b00      	cmp	r3, #0
 8003734:	d103      	bne.n	800373e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f9d6 	bl	8003ae8 <I2C_MasterTransmit_TXE>
 800373c:	e046      	b.n	80037cc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 80c2 	beq.w	80038ce <HAL_I2C_EV_IRQHandler+0x29a>
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 80bc 	beq.w	80038ce <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003756:	7bbb      	ldrb	r3, [r7, #14]
 8003758:	2b21      	cmp	r3, #33	@ 0x21
 800375a:	d103      	bne.n	8003764 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 fa5f 	bl	8003c20 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003762:	e0b4      	b.n	80038ce <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003764:	7bfb      	ldrb	r3, [r7, #15]
 8003766:	2b40      	cmp	r3, #64	@ 0x40
 8003768:	f040 80b1 	bne.w	80038ce <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 facd 	bl	8003d0c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003772:	e0ac      	b.n	80038ce <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800377e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003782:	f000 80a4 	beq.w	80038ce <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00d      	beq.n	80037ac <HAL_I2C_EV_IRQHandler+0x178>
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003796:	2b00      	cmp	r3, #0
 8003798:	d008      	beq.n	80037ac <HAL_I2C_EV_IRQHandler+0x178>
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d103      	bne.n	80037ac <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 fb49 	bl	8003e3c <I2C_MasterReceive_RXNE>
 80037aa:	e00f      	b.n	80037cc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 808b 	beq.w	80038ce <HAL_I2C_EV_IRQHandler+0x29a>
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 8085 	beq.w	80038ce <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 fc01 	bl	8003fcc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037ca:	e080      	b.n	80038ce <HAL_I2C_EV_IRQHandler+0x29a>
 80037cc:	e07f      	b.n	80038ce <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d004      	beq.n	80037e0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	61fb      	str	r3, [r7, #28]
 80037de:	e007      	b.n	80037f0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d011      	beq.n	800381e <HAL_I2C_EV_IRQHandler+0x1ea>
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00c      	beq.n	800381e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003814:	69b9      	ldr	r1, [r7, #24]
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 ffcc 	bl	80047b4 <I2C_Slave_ADDR>
 800381c:	e05a      	b.n	80038d4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	f003 0310 	and.w	r3, r3, #16
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <HAL_I2C_EV_IRQHandler+0x206>
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f001 f806 	bl	8004844 <I2C_Slave_STOPF>
 8003838:	e04c      	b.n	80038d4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800383a:	7bbb      	ldrb	r3, [r7, #14]
 800383c:	2b21      	cmp	r3, #33	@ 0x21
 800383e:	d002      	beq.n	8003846 <HAL_I2C_EV_IRQHandler+0x212>
 8003840:	7bbb      	ldrb	r3, [r7, #14]
 8003842:	2b29      	cmp	r3, #41	@ 0x29
 8003844:	d120      	bne.n	8003888 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00d      	beq.n	800386c <HAL_I2C_EV_IRQHandler+0x238>
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003856:	2b00      	cmp	r3, #0
 8003858:	d008      	beq.n	800386c <HAL_I2C_EV_IRQHandler+0x238>
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	d103      	bne.n	800386c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 fee7 	bl	8004638 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800386a:	e032      	b.n	80038d2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b00      	cmp	r3, #0
 8003874:	d02d      	beq.n	80038d2 <HAL_I2C_EV_IRQHandler+0x29e>
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800387c:	2b00      	cmp	r3, #0
 800387e:	d028      	beq.n	80038d2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 ff16 	bl	80046b2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003886:	e024      	b.n	80038d2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00d      	beq.n	80038ae <HAL_I2C_EV_IRQHandler+0x27a>
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003898:	2b00      	cmp	r3, #0
 800389a:	d008      	beq.n	80038ae <HAL_I2C_EV_IRQHandler+0x27a>
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	f003 0304 	and.w	r3, r3, #4
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d103      	bne.n	80038ae <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 ff24 	bl	80046f4 <I2C_SlaveReceive_RXNE>
 80038ac:	e012      	b.n	80038d4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00d      	beq.n	80038d4 <HAL_I2C_EV_IRQHandler+0x2a0>
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d008      	beq.n	80038d4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 ff54 	bl	8004770 <I2C_SlaveReceive_BTF>
 80038c8:	e004      	b.n	80038d4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80038ca:	bf00      	nop
 80038cc:	e002      	b.n	80038d4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038ce:	bf00      	nop
 80038d0:	e000      	b.n	80038d4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038d2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80038d4:	3720      	adds	r7, #32
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b08a      	sub	sp, #40	@ 0x28
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80038f2:	2300      	movs	r3, #0
 80038f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038fc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00d      	beq.n	8003924 <HAL_I2C_ER_IRQHandler+0x4a>
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d008      	beq.n	8003924 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003914:	f043 0301 	orr.w	r3, r3, #1
 8003918:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003922:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00d      	beq.n	800394a <HAL_I2C_ER_IRQHandler+0x70>
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003934:	2b00      	cmp	r3, #0
 8003936:	d008      	beq.n	800394a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393a:	f043 0302 	orr.w	r3, r3, #2
 800393e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003948:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003950:	2b00      	cmp	r3, #0
 8003952:	d03e      	beq.n	80039d2 <HAL_I2C_ER_IRQHandler+0xf8>
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800395a:	2b00      	cmp	r3, #0
 800395c:	d039      	beq.n	80039d2 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800395e:	7efb      	ldrb	r3, [r7, #27]
 8003960:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003966:	b29b      	uxth	r3, r3
 8003968:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003970:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003976:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003978:	7ebb      	ldrb	r3, [r7, #26]
 800397a:	2b20      	cmp	r3, #32
 800397c:	d112      	bne.n	80039a4 <HAL_I2C_ER_IRQHandler+0xca>
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10f      	bne.n	80039a4 <HAL_I2C_ER_IRQHandler+0xca>
 8003984:	7cfb      	ldrb	r3, [r7, #19]
 8003986:	2b21      	cmp	r3, #33	@ 0x21
 8003988:	d008      	beq.n	800399c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800398a:	7cfb      	ldrb	r3, [r7, #19]
 800398c:	2b29      	cmp	r3, #41	@ 0x29
 800398e:	d005      	beq.n	800399c <HAL_I2C_ER_IRQHandler+0xc2>
 8003990:	7cfb      	ldrb	r3, [r7, #19]
 8003992:	2b28      	cmp	r3, #40	@ 0x28
 8003994:	d106      	bne.n	80039a4 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b21      	cmp	r3, #33	@ 0x21
 800399a:	d103      	bne.n	80039a4 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f001 f881 	bl	8004aa4 <I2C_Slave_AF>
 80039a2:	e016      	b.n	80039d2 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039ac:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80039ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b0:	f043 0304 	orr.w	r3, r3, #4
 80039b4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80039b6:	7efb      	ldrb	r3, [r7, #27]
 80039b8:	2b10      	cmp	r3, #16
 80039ba:	d002      	beq.n	80039c2 <HAL_I2C_ER_IRQHandler+0xe8>
 80039bc:	7efb      	ldrb	r3, [r7, #27]
 80039be:	2b40      	cmp	r3, #64	@ 0x40
 80039c0:	d107      	bne.n	80039d2 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039d0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80039d2:	6a3b      	ldr	r3, [r7, #32]
 80039d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00d      	beq.n	80039f8 <HAL_I2C_ER_IRQHandler+0x11e>
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d008      	beq.n	80039f8 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80039e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e8:	f043 0308 	orr.w	r3, r3, #8
 80039ec:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80039f6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80039f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d008      	beq.n	8003a10 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a04:	431a      	orrs	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f001 f8be 	bl	8004b8c <I2C_ITError>
  }
}
 8003a10:	bf00      	nop
 8003a12:	3728      	adds	r7, #40	@ 0x28
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	70fb      	strb	r3, [r7, #3]
 8003a74:	4613      	mov	r3, r2
 8003a76:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003af6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003afe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b04:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d150      	bne.n	8003bb0 <I2C_MasterTransmit_TXE+0xc8>
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
 8003b10:	2b21      	cmp	r3, #33	@ 0x21
 8003b12:	d14d      	bne.n	8003bb0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d01d      	beq.n	8003b56 <I2C_MasterTransmit_TXE+0x6e>
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b20      	cmp	r3, #32
 8003b1e:	d01a      	beq.n	8003b56 <I2C_MasterTransmit_TXE+0x6e>
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b26:	d016      	beq.n	8003b56 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b36:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2211      	movs	r2, #17
 8003b3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7ff ff62 	bl	8003a18 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b54:	e060      	b.n	8003c18 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b64:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b74:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b40      	cmp	r3, #64	@ 0x40
 8003b8e:	d107      	bne.n	8003ba0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff ff7d 	bl	8003a98 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b9e:	e03b      	b.n	8003c18 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7ff ff35 	bl	8003a18 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003bae:	e033      	b.n	8003c18 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
 8003bb2:	2b21      	cmp	r3, #33	@ 0x21
 8003bb4:	d005      	beq.n	8003bc2 <I2C_MasterTransmit_TXE+0xda>
 8003bb6:	7bbb      	ldrb	r3, [r7, #14]
 8003bb8:	2b40      	cmp	r3, #64	@ 0x40
 8003bba:	d12d      	bne.n	8003c18 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
 8003bbe:	2b22      	cmp	r3, #34	@ 0x22
 8003bc0:	d12a      	bne.n	8003c18 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d108      	bne.n	8003bde <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bda:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003bdc:	e01c      	b.n	8003c18 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b40      	cmp	r3, #64	@ 0x40
 8003be8:	d103      	bne.n	8003bf2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f88e 	bl	8003d0c <I2C_MemoryTransmit_TXE_BTF>
}
 8003bf0:	e012      	b.n	8003c18 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf6:	781a      	ldrb	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003c16:	e7ff      	b.n	8003c18 <I2C_MasterTransmit_TXE+0x130>
 8003c18:	bf00      	nop
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b21      	cmp	r3, #33	@ 0x21
 8003c38:	d164      	bne.n	8003d04 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d012      	beq.n	8003c6a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c48:	781a      	ldrb	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003c68:	e04c      	b.n	8003d04 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d01d      	beq.n	8003cac <I2C_MasterTransmit_BTF+0x8c>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b20      	cmp	r3, #32
 8003c74:	d01a      	beq.n	8003cac <I2C_MasterTransmit_BTF+0x8c>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c7c:	d016      	beq.n	8003cac <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c8c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2211      	movs	r2, #17
 8003c92:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7ff feb7 	bl	8003a18 <HAL_I2C_MasterTxCpltCallback>
}
 8003caa:	e02b      	b.n	8003d04 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003cba:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cca:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b40      	cmp	r3, #64	@ 0x40
 8003ce4:	d107      	bne.n	8003cf6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7ff fed2 	bl	8003a98 <HAL_I2C_MemTxCpltCallback>
}
 8003cf4:	e006      	b.n	8003d04 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7ff fe8a 	bl	8003a18 <HAL_I2C_MasterTxCpltCallback>
}
 8003d04:	bf00      	nop
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d1a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d11d      	bne.n	8003d60 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d10b      	bne.n	8003d44 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d3c:	1c9a      	adds	r2, r3, #2
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003d42:	e077      	b.n	8003e34 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	121b      	asrs	r3, r3, #8
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003d5e:	e069      	b.n	8003e34 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d10b      	bne.n	8003d80 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d78:	1c5a      	adds	r2, r3, #1
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003d7e:	e059      	b.n	8003e34 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d152      	bne.n	8003e2e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
 8003d8a:	2b22      	cmp	r3, #34	@ 0x22
 8003d8c:	d10d      	bne.n	8003daa <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d9c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003da2:	1c5a      	adds	r2, r3, #1
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003da8:	e044      	b.n	8003e34 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d015      	beq.n	8003de0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003db4:	7bfb      	ldrb	r3, [r7, #15]
 8003db6:	2b21      	cmp	r3, #33	@ 0x21
 8003db8:	d112      	bne.n	8003de0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbe:	781a      	ldrb	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003dde:	e029      	b.n	8003e34 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d124      	bne.n	8003e34 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003dea:	7bfb      	ldrb	r3, [r7, #15]
 8003dec:	2b21      	cmp	r3, #33	@ 0x21
 8003dee:	d121      	bne.n	8003e34 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003dfe:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e0e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7ff fe36 	bl	8003a98 <HAL_I2C_MemTxCpltCallback>
}
 8003e2c:	e002      	b.n	8003e34 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7ff faec 	bl	800340c <I2C_Flush_DR>
}
 8003e34:	bf00      	nop
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b22      	cmp	r3, #34	@ 0x22
 8003e4e:	f040 80b9 	bne.w	8003fc4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e56:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2b03      	cmp	r3, #3
 8003e64:	d921      	bls.n	8003eaa <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e70:	b2d2      	uxtb	r2, r2
 8003e72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	f040 8096 	bne.w	8003fc4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ea6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003ea8:	e08c      	b.n	8003fc4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d07f      	beq.n	8003fb2 <I2C_MasterReceive_RXNE+0x176>
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d002      	beq.n	8003ebe <I2C_MasterReceive_RXNE+0x82>
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d179      	bne.n	8003fb2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f001 fa6a 	bl	8005398 <I2C_WaitOnSTOPRequestThroughIT>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d14c      	bne.n	8003f64 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ed8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ee8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef4:	b2d2      	uxtb	r2, r2
 8003ef6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efc:	1c5a      	adds	r2, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b40      	cmp	r3, #64	@ 0x40
 8003f22:	d10a      	bne.n	8003f3a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7ff fdba 	bl	8003aac <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f38:	e044      	b.n	8003fc4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d002      	beq.n	8003f4e <I2C_MasterReceive_RXNE+0x112>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b20      	cmp	r3, #32
 8003f4c:	d103      	bne.n	8003f56 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f54:	e002      	b.n	8003f5c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2212      	movs	r2, #18
 8003f5a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff fd65 	bl	8003a2c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f62:	e02f      	b.n	8003fc4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f72:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	691a      	ldr	r2, [r3, #16]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f86:	1c5a      	adds	r2, r3, #1
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	3b01      	subs	r3, #1
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff fd88 	bl	8003ac0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003fb0:	e008      	b.n	8003fc4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fc0:	605a      	str	r2, [r3, #4]
}
 8003fc2:	e7ff      	b.n	8003fc4 <I2C_MasterReceive_RXNE+0x188>
 8003fc4:	bf00      	nop
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	d11b      	bne.n	800401c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ff2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691a      	ldr	r2, [r3, #16]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004010:	b29b      	uxth	r3, r3
 8004012:	3b01      	subs	r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800401a:	e0c8      	b.n	80041ae <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004020:	b29b      	uxth	r3, r3
 8004022:	2b03      	cmp	r3, #3
 8004024:	d129      	bne.n	800407a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004034:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2b04      	cmp	r3, #4
 800403a:	d00a      	beq.n	8004052 <I2C_MasterReceive_BTF+0x86>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2b02      	cmp	r3, #2
 8004040:	d007      	beq.n	8004052 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004050:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405c:	b2d2      	uxtb	r2, r2
 800405e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800406e:	b29b      	uxth	r3, r3
 8004070:	3b01      	subs	r3, #1
 8004072:	b29a      	uxth	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004078:	e099      	b.n	80041ae <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407e:	b29b      	uxth	r3, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	f040 8081 	bne.w	8004188 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d002      	beq.n	8004092 <I2C_MasterReceive_BTF+0xc6>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b10      	cmp	r3, #16
 8004090:	d108      	bne.n	80040a4 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	e019      	b.n	80040d8 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d002      	beq.n	80040b0 <I2C_MasterReceive_BTF+0xe4>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d108      	bne.n	80040c2 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	e00a      	b.n	80040d8 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2b10      	cmp	r3, #16
 80040c6:	d007      	beq.n	80040d8 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040d6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691a      	ldr	r2, [r3, #16]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	691a      	ldr	r2, [r3, #16]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004132:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b40      	cmp	r3, #64	@ 0x40
 8004146:	d10a      	bne.n	800415e <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7ff fca8 	bl	8003aac <HAL_I2C_MemRxCpltCallback>
}
 800415c:	e027      	b.n	80041ae <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2b08      	cmp	r3, #8
 800416a:	d002      	beq.n	8004172 <I2C_MasterReceive_BTF+0x1a6>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2b20      	cmp	r3, #32
 8004170:	d103      	bne.n	800417a <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	631a      	str	r2, [r3, #48]	@ 0x30
 8004178:	e002      	b.n	8004180 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2212      	movs	r2, #18
 800417e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff fc53 	bl	8003a2c <HAL_I2C_MasterRxCpltCallback>
}
 8004186:	e012      	b.n	80041ae <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	3b01      	subs	r3, #1
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80041ae:	bf00      	nop
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b40      	cmp	r3, #64	@ 0x40
 80041c8:	d117      	bne.n	80041fa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d109      	bne.n	80041e6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	461a      	mov	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80041e2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80041e4:	e067      	b.n	80042b6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	f043 0301 	orr.w	r3, r3, #1
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	611a      	str	r2, [r3, #16]
}
 80041f8:	e05d      	b.n	80042b6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004202:	d133      	bne.n	800426c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b21      	cmp	r3, #33	@ 0x21
 800420e:	d109      	bne.n	8004224 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004214:	b2db      	uxtb	r3, r3
 8004216:	461a      	mov	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004220:	611a      	str	r2, [r3, #16]
 8004222:	e008      	b.n	8004236 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004228:	b2db      	uxtb	r3, r3
 800422a:	f043 0301 	orr.w	r3, r3, #1
 800422e:	b2da      	uxtb	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800423a:	2b00      	cmp	r3, #0
 800423c:	d004      	beq.n	8004248 <I2C_Master_SB+0x92>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004244:	2b00      	cmp	r3, #0
 8004246:	d108      	bne.n	800425a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800424c:	2b00      	cmp	r3, #0
 800424e:	d032      	beq.n	80042b6 <I2C_Master_SB+0x100>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004256:	2b00      	cmp	r3, #0
 8004258:	d02d      	beq.n	80042b6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004268:	605a      	str	r2, [r3, #4]
}
 800426a:	e024      	b.n	80042b6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10e      	bne.n	8004292 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004278:	b29b      	uxth	r3, r3
 800427a:	11db      	asrs	r3, r3, #7
 800427c:	b2db      	uxtb	r3, r3
 800427e:	f003 0306 	and.w	r3, r3, #6
 8004282:	b2db      	uxtb	r3, r3
 8004284:	f063 030f 	orn	r3, r3, #15
 8004288:	b2da      	uxtb	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	611a      	str	r2, [r3, #16]
}
 8004290:	e011      	b.n	80042b6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004296:	2b01      	cmp	r3, #1
 8004298:	d10d      	bne.n	80042b6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429e:	b29b      	uxth	r3, r3
 80042a0:	11db      	asrs	r3, r3, #7
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	f003 0306 	and.w	r3, r3, #6
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	f063 030e 	orn	r3, r3, #14
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	611a      	str	r2, [r3, #16]
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d004      	beq.n	80042e8 <I2C_Master_ADD10+0x26>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d108      	bne.n	80042fa <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00c      	beq.n	800430a <I2C_Master_ADD10+0x48>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d007      	beq.n	800430a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004308:	605a      	str	r2, [r3, #4]
  }
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004316:	b480      	push	{r7}
 8004318:	b091      	sub	sp, #68	@ 0x44
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004324:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800432c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004332:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b22      	cmp	r3, #34	@ 0x22
 800433e:	f040 8169 	bne.w	8004614 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10f      	bne.n	800436a <I2C_Master_ADDR+0x54>
 800434a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800434e:	2b40      	cmp	r3, #64	@ 0x40
 8004350:	d10b      	bne.n	800436a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004352:	2300      	movs	r3, #0
 8004354:	633b      	str	r3, [r7, #48]	@ 0x30
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	633b      	str	r3, [r7, #48]	@ 0x30
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	633b      	str	r3, [r7, #48]	@ 0x30
 8004366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004368:	e160      	b.n	800462c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800436e:	2b00      	cmp	r3, #0
 8004370:	d11d      	bne.n	80043ae <I2C_Master_ADDR+0x98>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800437a:	d118      	bne.n	80043ae <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800437c:	2300      	movs	r3, #0
 800437e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043a0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a6:	1c5a      	adds	r2, r3, #1
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	651a      	str	r2, [r3, #80]	@ 0x50
 80043ac:	e13e      	b.n	800462c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d113      	bne.n	80043e0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b8:	2300      	movs	r3, #0
 80043ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	e115      	b.n	800460c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	f040 808a 	bne.w	8004500 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80043ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80043f2:	d137      	bne.n	8004464 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004402:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800440e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004412:	d113      	bne.n	800443c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004422:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004424:	2300      	movs	r3, #0
 8004426:	627b      	str	r3, [r7, #36]	@ 0x24
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	627b      	str	r3, [r7, #36]	@ 0x24
 8004438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443a:	e0e7      	b.n	800460c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800443c:	2300      	movs	r3, #0
 800443e:	623b      	str	r3, [r7, #32]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	623b      	str	r3, [r7, #32]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	623b      	str	r3, [r7, #32]
 8004450:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	e0d3      	b.n	800460c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004466:	2b08      	cmp	r3, #8
 8004468:	d02e      	beq.n	80044c8 <I2C_Master_ADDR+0x1b2>
 800446a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800446c:	2b20      	cmp	r3, #32
 800446e:	d02b      	beq.n	80044c8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004472:	2b12      	cmp	r3, #18
 8004474:	d102      	bne.n	800447c <I2C_Master_ADDR+0x166>
 8004476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004478:	2b01      	cmp	r3, #1
 800447a:	d125      	bne.n	80044c8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800447c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800447e:	2b04      	cmp	r3, #4
 8004480:	d00e      	beq.n	80044a0 <I2C_Master_ADDR+0x18a>
 8004482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004484:	2b02      	cmp	r3, #2
 8004486:	d00b      	beq.n	80044a0 <I2C_Master_ADDR+0x18a>
 8004488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800448a:	2b10      	cmp	r3, #16
 800448c:	d008      	beq.n	80044a0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	e007      	b.n	80044b0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80044ae:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b0:	2300      	movs	r3, #0
 80044b2:	61fb      	str	r3, [r7, #28]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	61fb      	str	r3, [r7, #28]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	61fb      	str	r3, [r7, #28]
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	e0a1      	b.n	800460c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044d6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044d8:	2300      	movs	r3, #0
 80044da:	61bb      	str	r3, [r7, #24]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	61bb      	str	r3, [r7, #24]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	61bb      	str	r3, [r7, #24]
 80044ec:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	e085      	b.n	800460c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004504:	b29b      	uxth	r3, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d14d      	bne.n	80045a6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800450a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800450c:	2b04      	cmp	r3, #4
 800450e:	d016      	beq.n	800453e <I2C_Master_ADDR+0x228>
 8004510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004512:	2b02      	cmp	r3, #2
 8004514:	d013      	beq.n	800453e <I2C_Master_ADDR+0x228>
 8004516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004518:	2b10      	cmp	r3, #16
 800451a:	d010      	beq.n	800453e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800452a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	e007      	b.n	800454e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800454c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004558:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800455c:	d117      	bne.n	800458e <I2C_Master_ADDR+0x278>
 800455e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004560:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004564:	d00b      	beq.n	800457e <I2C_Master_ADDR+0x268>
 8004566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004568:	2b01      	cmp	r3, #1
 800456a:	d008      	beq.n	800457e <I2C_Master_ADDR+0x268>
 800456c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800456e:	2b08      	cmp	r3, #8
 8004570:	d005      	beq.n	800457e <I2C_Master_ADDR+0x268>
 8004572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004574:	2b10      	cmp	r3, #16
 8004576:	d002      	beq.n	800457e <I2C_Master_ADDR+0x268>
 8004578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800457a:	2b20      	cmp	r3, #32
 800457c:	d107      	bne.n	800458e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800458c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800458e:	2300      	movs	r3, #0
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	617b      	str	r3, [r7, #20]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	617b      	str	r3, [r7, #20]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	e032      	b.n	800460c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045b4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045c4:	d117      	bne.n	80045f6 <I2C_Master_ADDR+0x2e0>
 80045c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045cc:	d00b      	beq.n	80045e6 <I2C_Master_ADDR+0x2d0>
 80045ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d008      	beq.n	80045e6 <I2C_Master_ADDR+0x2d0>
 80045d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045d6:	2b08      	cmp	r3, #8
 80045d8:	d005      	beq.n	80045e6 <I2C_Master_ADDR+0x2d0>
 80045da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045dc:	2b10      	cmp	r3, #16
 80045de:	d002      	beq.n	80045e6 <I2C_Master_ADDR+0x2d0>
 80045e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e2:	2b20      	cmp	r3, #32
 80045e4:	d107      	bne.n	80045f6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80045f4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045f6:	2300      	movs	r3, #0
 80045f8:	613b      	str	r3, [r7, #16]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	613b      	str	r3, [r7, #16]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	613b      	str	r3, [r7, #16]
 800460a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004612:	e00b      	b.n	800462c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004614:	2300      	movs	r3, #0
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	68fb      	ldr	r3, [r7, #12]
}
 800462a:	e7ff      	b.n	800462c <I2C_Master_ADDR+0x316>
 800462c:	bf00      	nop
 800462e:	3744      	adds	r7, #68	@ 0x44
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004646:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800464c:	b29b      	uxth	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d02b      	beq.n	80046aa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004656:	781a      	ldrb	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800466c:	b29b      	uxth	r3, r3
 800466e:	3b01      	subs	r3, #1
 8004670:	b29a      	uxth	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800467a:	b29b      	uxth	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	d114      	bne.n	80046aa <I2C_SlaveTransmit_TXE+0x72>
 8004680:	7bfb      	ldrb	r3, [r7, #15]
 8004682:	2b29      	cmp	r3, #41	@ 0x29
 8004684:	d111      	bne.n	80046aa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004694:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2221      	movs	r2, #33	@ 0x21
 800469a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2228      	movs	r2, #40	@ 0x28
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff f9cb 	bl	8003a40 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80046aa:	bf00      	nop
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046be:	b29b      	uxth	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d011      	beq.n	80046e8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c8:	781a      	ldrb	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046de:	b29b      	uxth	r3, r3
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004702:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004708:	b29b      	uxth	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d02c      	beq.n	8004768 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800472a:	b29b      	uxth	r3, r3
 800472c:	3b01      	subs	r3, #1
 800472e:	b29a      	uxth	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004738:	b29b      	uxth	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d114      	bne.n	8004768 <I2C_SlaveReceive_RXNE+0x74>
 800473e:	7bfb      	ldrb	r3, [r7, #15]
 8004740:	2b2a      	cmp	r3, #42	@ 0x2a
 8004742:	d111      	bne.n	8004768 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004752:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2222      	movs	r2, #34	@ 0x22
 8004758:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2228      	movs	r2, #40	@ 0x28
 800475e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7ff f976 	bl	8003a54 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004768:	bf00      	nop
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800477c:	b29b      	uxth	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d012      	beq.n	80047a8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	691a      	ldr	r2, [r3, #16]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478c:	b2d2      	uxtb	r2, r2
 800478e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004794:	1c5a      	adds	r2, r3, #1
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800479e:	b29b      	uxth	r3, r3
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80047be:	2300      	movs	r3, #0
 80047c0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80047ce:	2b28      	cmp	r3, #40	@ 0x28
 80047d0:	d125      	bne.n	800481e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047e0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80047ec:	2301      	movs	r3, #1
 80047ee:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d103      	bne.n	8004802 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	81bb      	strh	r3, [r7, #12]
 8004800:	e002      	b.n	8004808 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004810:	89ba      	ldrh	r2, [r7, #12]
 8004812:	7bfb      	ldrb	r3, [r7, #15]
 8004814:	4619      	mov	r1, r3
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7ff f926 	bl	8003a68 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800481c:	e00e      	b.n	800483c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800481e:	2300      	movs	r3, #0
 8004820:	60bb      	str	r3, [r7, #8]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	60bb      	str	r3, [r7, #8]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	60bb      	str	r3, [r7, #8]
 8004832:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800483c:	bf00      	nop
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004852:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004862:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004864:	2300      	movs	r3, #0
 8004866:	60bb      	str	r3, [r7, #8]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	60bb      	str	r3, [r7, #8]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0201 	orr.w	r2, r2, #1
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004890:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800489c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048a0:	d172      	bne.n	8004988 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
 80048a4:	2b22      	cmp	r3, #34	@ 0x22
 80048a6:	d002      	beq.n	80048ae <I2C_Slave_STOPF+0x6a>
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
 80048aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80048ac:	d135      	bne.n	800491a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d005      	beq.n	80048d2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ca:	f043 0204 	orr.w	r2, r3, #4
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048e0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fe f9a8 	bl	8002c3c <HAL_DMA_GetState>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d049      	beq.n	8004986 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f6:	4a69      	ldr	r2, [pc, #420]	@ (8004a9c <I2C_Slave_STOPF+0x258>)
 80048f8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fd fff0 	bl	80028e4 <HAL_DMA_Abort_IT>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d03d      	beq.n	8004986 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004914:	4610      	mov	r0, r2
 8004916:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004918:	e035      	b.n	8004986 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	b29a      	uxth	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d005      	beq.n	800493e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004936:	f043 0204 	orr.w	r2, r3, #4
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800494c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004952:	4618      	mov	r0, r3
 8004954:	f7fe f972 	bl	8002c3c <HAL_DMA_GetState>
 8004958:	4603      	mov	r3, r0
 800495a:	2b01      	cmp	r3, #1
 800495c:	d014      	beq.n	8004988 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004962:	4a4e      	ldr	r2, [pc, #312]	@ (8004a9c <I2C_Slave_STOPF+0x258>)
 8004964:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800496a:	4618      	mov	r0, r3
 800496c:	f7fd ffba 	bl	80028e4 <HAL_DMA_Abort_IT>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d008      	beq.n	8004988 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800497a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004980:	4610      	mov	r0, r2
 8004982:	4798      	blx	r3
 8004984:	e000      	b.n	8004988 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004986:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800498c:	b29b      	uxth	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d03e      	beq.n	8004a10 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b04      	cmp	r3, #4
 800499e:	d112      	bne.n	80049c6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	691a      	ldr	r2, [r3, #16]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b2:	1c5a      	adds	r2, r3, #1
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049bc:	b29b      	uxth	r3, r3
 80049be:	3b01      	subs	r3, #1
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d0:	2b40      	cmp	r3, #64	@ 0x40
 80049d2:	d112      	bne.n	80049fa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	691a      	ldr	r2, [r3, #16]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049de:	b2d2      	uxtb	r2, r2
 80049e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e6:	1c5a      	adds	r2, r3, #1
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a08:	f043 0204 	orr.w	r2, r3, #4
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f8b7 	bl	8004b8c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004a1e:	e039      	b.n	8004a94 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
 8004a22:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a24:	d109      	bne.n	8004a3a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2228      	movs	r2, #40	@ 0x28
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f7ff f80d 	bl	8003a54 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b28      	cmp	r3, #40	@ 0x28
 8004a44:	d111      	bne.n	8004a6a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a15      	ldr	r2, [pc, #84]	@ (8004aa0 <I2C_Slave_STOPF+0x25c>)
 8004a4a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7ff f80e 	bl	8003a84 <HAL_I2C_ListenCpltCallback>
}
 8004a68:	e014      	b.n	8004a94 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a6e:	2b22      	cmp	r3, #34	@ 0x22
 8004a70:	d002      	beq.n	8004a78 <I2C_Slave_STOPF+0x234>
 8004a72:	7bfb      	ldrb	r3, [r7, #15]
 8004a74:	2b22      	cmp	r3, #34	@ 0x22
 8004a76:	d10d      	bne.n	8004a94 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2220      	movs	r2, #32
 8004a82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7fe ffe0 	bl	8003a54 <HAL_I2C_SlaveRxCpltCallback>
}
 8004a94:	bf00      	nop
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	08004ef5 	.word	0x08004ef5
 8004aa0:	ffff0000 	.word	0xffff0000

08004aa4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d002      	beq.n	8004ac6 <I2C_Slave_AF+0x22>
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	2b20      	cmp	r3, #32
 8004ac4:	d129      	bne.n	8004b1a <I2C_Slave_AF+0x76>
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
 8004ac8:	2b28      	cmp	r3, #40	@ 0x28
 8004aca:	d126      	bne.n	8004b1a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a2e      	ldr	r2, [pc, #184]	@ (8004b88 <I2C_Slave_AF+0xe4>)
 8004ad0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ae0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004aea:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004afa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2220      	movs	r2, #32
 8004b06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7fe ffb6 	bl	8003a84 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004b18:	e031      	b.n	8004b7e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
 8004b1c:	2b21      	cmp	r3, #33	@ 0x21
 8004b1e:	d129      	bne.n	8004b74 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a19      	ldr	r2, [pc, #100]	@ (8004b88 <I2C_Slave_AF+0xe4>)
 8004b24:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2221      	movs	r2, #33	@ 0x21
 8004b2a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b4a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b54:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b64:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7fe fc50 	bl	800340c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7fe ff67 	bl	8003a40 <HAL_I2C_SlaveTxCpltCallback>
}
 8004b72:	e004      	b.n	8004b7e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b7c:	615a      	str	r2, [r3, #20]
}
 8004b7e:	bf00      	nop
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	ffff0000 	.word	0xffff0000

08004b8c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b9a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ba2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004ba4:	7bbb      	ldrb	r3, [r7, #14]
 8004ba6:	2b10      	cmp	r3, #16
 8004ba8:	d002      	beq.n	8004bb0 <I2C_ITError+0x24>
 8004baa:	7bbb      	ldrb	r3, [r7, #14]
 8004bac:	2b40      	cmp	r3, #64	@ 0x40
 8004bae:	d10a      	bne.n	8004bc6 <I2C_ITError+0x3a>
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
 8004bb2:	2b22      	cmp	r3, #34	@ 0x22
 8004bb4:	d107      	bne.n	8004bc6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bc4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
 8004bc8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004bcc:	2b28      	cmp	r3, #40	@ 0x28
 8004bce:	d107      	bne.n	8004be0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2228      	movs	r2, #40	@ 0x28
 8004bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004bde:	e015      	b.n	8004c0c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bee:	d00a      	beq.n	8004c06 <I2C_ITError+0x7a>
 8004bf0:	7bfb      	ldrb	r3, [r7, #15]
 8004bf2:	2b60      	cmp	r3, #96	@ 0x60
 8004bf4:	d007      	beq.n	8004c06 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c1a:	d162      	bne.n	8004ce2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c2a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d020      	beq.n	8004c7c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c3e:	4a6a      	ldr	r2, [pc, #424]	@ (8004de8 <I2C_ITError+0x25c>)
 8004c40:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fd fe4c 	bl	80028e4 <HAL_DMA_Abort_IT>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 8089 	beq.w	8004d66 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0201 	bic.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2220      	movs	r2, #32
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004c76:	4610      	mov	r0, r2
 8004c78:	4798      	blx	r3
 8004c7a:	e074      	b.n	8004d66 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c80:	4a59      	ldr	r2, [pc, #356]	@ (8004de8 <I2C_ITError+0x25c>)
 8004c82:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7fd fe2b 	bl	80028e4 <HAL_DMA_Abort_IT>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d068      	beq.n	8004d66 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c9e:	2b40      	cmp	r3, #64	@ 0x40
 8004ca0:	d10b      	bne.n	8004cba <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	691a      	ldr	r2, [r3, #16]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cac:	b2d2      	uxtb	r2, r2
 8004cae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0201 	bic.w	r2, r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004cdc:	4610      	mov	r0, r2
 8004cde:	4798      	blx	r3
 8004ce0:	e041      	b.n	8004d66 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b60      	cmp	r3, #96	@ 0x60
 8004cec:	d125      	bne.n	8004d3a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d06:	2b40      	cmp	r3, #64	@ 0x40
 8004d08:	d10b      	bne.n	8004d22 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	691a      	ldr	r2, [r3, #16]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d14:	b2d2      	uxtb	r2, r2
 8004d16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1c:	1c5a      	adds	r2, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0201 	bic.w	r2, r2, #1
 8004d30:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7fe fece 	bl	8003ad4 <HAL_I2C_AbortCpltCallback>
 8004d38:	e015      	b.n	8004d66 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d44:	2b40      	cmp	r3, #64	@ 0x40
 8004d46:	d10b      	bne.n	8004d60 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	691a      	ldr	r2, [r3, #16]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5a:	1c5a      	adds	r2, r3, #1
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f7fe fead 	bl	8003ac0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10e      	bne.n	8004d94 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d109      	bne.n	8004d94 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d104      	bne.n	8004d94 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d007      	beq.n	8004da4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004da2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004daa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d113      	bne.n	8004de0 <I2C_ITError+0x254>
 8004db8:	7bfb      	ldrb	r3, [r7, #15]
 8004dba:	2b28      	cmp	r3, #40	@ 0x28
 8004dbc:	d110      	bne.n	8004de0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a0a      	ldr	r2, [pc, #40]	@ (8004dec <I2C_ITError+0x260>)
 8004dc2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7fe fe52 	bl	8003a84 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004de0:	bf00      	nop
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	08004ef5 	.word	0x08004ef5
 8004dec:	ffff0000 	.word	0xffff0000

08004df0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b088      	sub	sp, #32
 8004df4:	af02      	add	r7, sp, #8
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	607a      	str	r2, [r7, #4]
 8004dfa:	603b      	str	r3, [r7, #0]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e04:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d006      	beq.n	8004e1a <I2C_MasterRequestWrite+0x2a>
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d003      	beq.n	8004e1a <I2C_MasterRequestWrite+0x2a>
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004e18:	d108      	bne.n	8004e2c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	e00b      	b.n	8004e44 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e30:	2b12      	cmp	r3, #18
 8004e32:	d107      	bne.n	8004e44 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 f8f7 	bl	8005044 <I2C_WaitOnFlagUntilTimeout>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00d      	beq.n	8004e78 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e6a:	d103      	bne.n	8004e74 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e72:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e035      	b.n	8004ee4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e80:	d108      	bne.n	8004e94 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e82:	897b      	ldrh	r3, [r7, #10]
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	461a      	mov	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e90:	611a      	str	r2, [r3, #16]
 8004e92:	e01b      	b.n	8004ecc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e94:	897b      	ldrh	r3, [r7, #10]
 8004e96:	11db      	asrs	r3, r3, #7
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	f003 0306 	and.w	r3, r3, #6
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	f063 030f 	orn	r3, r3, #15
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	490e      	ldr	r1, [pc, #56]	@ (8004eec <I2C_MasterRequestWrite+0xfc>)
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 f940 	bl	8005138 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e010      	b.n	8004ee4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ec2:	897b      	ldrh	r3, [r7, #10]
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	4907      	ldr	r1, [pc, #28]	@ (8004ef0 <I2C_MasterRequestWrite+0x100>)
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 f930 	bl	8005138 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3718      	adds	r7, #24
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	00010008 	.word	0x00010008
 8004ef0:	00010002 	.word	0x00010002

08004ef4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f04:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f0c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f0e:	4b4b      	ldr	r3, [pc, #300]	@ (800503c <I2C_DMAAbort+0x148>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	08db      	lsrs	r3, r3, #3
 8004f14:	4a4a      	ldr	r2, [pc, #296]	@ (8005040 <I2C_DMAAbort+0x14c>)
 8004f16:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1a:	0a1a      	lsrs	r2, r3, #8
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	00da      	lsls	r2, r3, #3
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d106      	bne.n	8004f3c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f32:	f043 0220 	orr.w	r2, r3, #32
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004f3a:	e00a      	b.n	8004f52 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f50:	d0ea      	beq.n	8004f28 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f5e:	2200      	movs	r2, #0
 8004f60:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6e:	2200      	movs	r2, #0
 8004f70:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f80:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2200      	movs	r2, #0
 8004f86:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f94:	2200      	movs	r2, #0
 8004f96:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d003      	beq.n	8004fa8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0201 	bic.w	r2, r2, #1
 8004fb6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b60      	cmp	r3, #96	@ 0x60
 8004fc2:	d10e      	bne.n	8004fe2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004fda:	6978      	ldr	r0, [r7, #20]
 8004fdc:	f7fe fd7a 	bl	8003ad4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004fe0:	e027      	b.n	8005032 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004fe2:	7cfb      	ldrb	r3, [r7, #19]
 8004fe4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004fe8:	2b28      	cmp	r3, #40	@ 0x28
 8004fea:	d117      	bne.n	800501c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0201 	orr.w	r2, r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800500a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	2200      	movs	r2, #0
 8005010:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2228      	movs	r2, #40	@ 0x28
 8005016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800501a:	e007      	b.n	800502c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	2220      	movs	r2, #32
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800502c:	6978      	ldr	r0, [r7, #20]
 800502e:	f7fe fd47 	bl	8003ac0 <HAL_I2C_ErrorCallback>
}
 8005032:	bf00      	nop
 8005034:	3718      	adds	r7, #24
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	20000000 	.word	0x20000000
 8005040:	14f8b589 	.word	0x14f8b589

08005044 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	603b      	str	r3, [r7, #0]
 8005050:	4613      	mov	r3, r2
 8005052:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005054:	e048      	b.n	80050e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800505c:	d044      	beq.n	80050e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800505e:	f7fc fd6f 	bl	8001b40 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	429a      	cmp	r2, r3
 800506c:	d302      	bcc.n	8005074 <I2C_WaitOnFlagUntilTimeout+0x30>
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d139      	bne.n	80050e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	0c1b      	lsrs	r3, r3, #16
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b01      	cmp	r3, #1
 800507c:	d10d      	bne.n	800509a <I2C_WaitOnFlagUntilTimeout+0x56>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	43da      	mvns	r2, r3
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	4013      	ands	r3, r2
 800508a:	b29b      	uxth	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	bf0c      	ite	eq
 8005090:	2301      	moveq	r3, #1
 8005092:	2300      	movne	r3, #0
 8005094:	b2db      	uxtb	r3, r3
 8005096:	461a      	mov	r2, r3
 8005098:	e00c      	b.n	80050b4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	43da      	mvns	r2, r3
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	4013      	ands	r3, r2
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	bf0c      	ite	eq
 80050ac:	2301      	moveq	r3, #1
 80050ae:	2300      	movne	r3, #0
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	461a      	mov	r2, r3
 80050b4:	79fb      	ldrb	r3, [r7, #7]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d116      	bne.n	80050e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2220      	movs	r2, #32
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d4:	f043 0220 	orr.w	r2, r3, #32
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e023      	b.n	8005130 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	0c1b      	lsrs	r3, r3, #16
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d10d      	bne.n	800510e <I2C_WaitOnFlagUntilTimeout+0xca>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	43da      	mvns	r2, r3
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	4013      	ands	r3, r2
 80050fe:	b29b      	uxth	r3, r3
 8005100:	2b00      	cmp	r3, #0
 8005102:	bf0c      	ite	eq
 8005104:	2301      	moveq	r3, #1
 8005106:	2300      	movne	r3, #0
 8005108:	b2db      	uxtb	r3, r3
 800510a:	461a      	mov	r2, r3
 800510c:	e00c      	b.n	8005128 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	43da      	mvns	r2, r3
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	4013      	ands	r3, r2
 800511a:	b29b      	uxth	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	bf0c      	ite	eq
 8005120:	2301      	moveq	r3, #1
 8005122:	2300      	movne	r3, #0
 8005124:	b2db      	uxtb	r3, r3
 8005126:	461a      	mov	r2, r3
 8005128:	79fb      	ldrb	r3, [r7, #7]
 800512a:	429a      	cmp	r2, r3
 800512c:	d093      	beq.n	8005056 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
 8005144:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005146:	e071      	b.n	800522c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005152:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005156:	d123      	bne.n	80051a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005166:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005170:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2220      	movs	r2, #32
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518c:	f043 0204 	orr.w	r2, r3, #4
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e067      	b.n	8005270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051a6:	d041      	beq.n	800522c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051a8:	f7fc fcca 	bl	8001b40 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d302      	bcc.n	80051be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d136      	bne.n	800522c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	0c1b      	lsrs	r3, r3, #16
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d10c      	bne.n	80051e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	43da      	mvns	r2, r3
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	4013      	ands	r3, r2
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	bf14      	ite	ne
 80051da:	2301      	movne	r3, #1
 80051dc:	2300      	moveq	r3, #0
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	e00b      	b.n	80051fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	43da      	mvns	r2, r3
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	4013      	ands	r3, r2
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	bf14      	ite	ne
 80051f4:	2301      	movne	r3, #1
 80051f6:	2300      	moveq	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d016      	beq.n	800522c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2220      	movs	r2, #32
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005218:	f043 0220 	orr.w	r2, r3, #32
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e021      	b.n	8005270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	0c1b      	lsrs	r3, r3, #16
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b01      	cmp	r3, #1
 8005234:	d10c      	bne.n	8005250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	43da      	mvns	r2, r3
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	4013      	ands	r3, r2
 8005242:	b29b      	uxth	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	bf14      	ite	ne
 8005248:	2301      	movne	r3, #1
 800524a:	2300      	moveq	r3, #0
 800524c:	b2db      	uxtb	r3, r3
 800524e:	e00b      	b.n	8005268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	43da      	mvns	r2, r3
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	4013      	ands	r3, r2
 800525c:	b29b      	uxth	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	bf14      	ite	ne
 8005262:	2301      	movne	r3, #1
 8005264:	2300      	moveq	r3, #0
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	f47f af6d 	bne.w	8005148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005284:	e034      	b.n	80052f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 f8b8 	bl	80053fc <I2C_IsAcknowledgeFailed>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e034      	b.n	8005300 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800529c:	d028      	beq.n	80052f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800529e:	f7fc fc4f 	bl	8001b40 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d302      	bcc.n	80052b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d11d      	bne.n	80052f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052be:	2b80      	cmp	r3, #128	@ 0x80
 80052c0:	d016      	beq.n	80052f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2220      	movs	r2, #32
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052dc:	f043 0220 	orr.w	r2, r3, #32
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e007      	b.n	8005300 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052fa:	2b80      	cmp	r3, #128	@ 0x80
 80052fc:	d1c3      	bne.n	8005286 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005314:	e034      	b.n	8005380 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 f870 	bl	80053fc <I2C_IsAcknowledgeFailed>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e034      	b.n	8005390 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800532c:	d028      	beq.n	8005380 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800532e:	f7fc fc07 	bl	8001b40 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	429a      	cmp	r2, r3
 800533c:	d302      	bcc.n	8005344 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d11d      	bne.n	8005380 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	f003 0304 	and.w	r3, r3, #4
 800534e:	2b04      	cmp	r3, #4
 8005350:	d016      	beq.n	8005380 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2220      	movs	r2, #32
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536c:	f043 0220 	orr.w	r2, r3, #32
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e007      	b.n	8005390 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	f003 0304 	and.w	r3, r3, #4
 800538a:	2b04      	cmp	r3, #4
 800538c:	d1c3      	bne.n	8005316 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053a0:	2300      	movs	r3, #0
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80053a4:	4b13      	ldr	r3, [pc, #76]	@ (80053f4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	08db      	lsrs	r3, r3, #3
 80053aa:	4a13      	ldr	r2, [pc, #76]	@ (80053f8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80053ac:	fba2 2303 	umull	r2, r3, r2, r3
 80053b0:	0a1a      	lsrs	r2, r3, #8
 80053b2:	4613      	mov	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	3b01      	subs	r3, #1
 80053be:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d107      	bne.n	80053d6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ca:	f043 0220 	orr.w	r2, r3, #32
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e008      	b.n	80053e8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053e4:	d0e9      	beq.n	80053ba <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	20000000 	.word	0x20000000
 80053f8:	14f8b589 	.word	0x14f8b589

080053fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800540e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005412:	d11b      	bne.n	800544c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800541c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2220      	movs	r2, #32
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005438:	f043 0204 	orr.w	r2, r3, #4
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e000      	b.n	800544e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800545a:	b480      	push	{r7}
 800545c:	b083      	sub	sp, #12
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005466:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800546a:	d103      	bne.n	8005474 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005472:	e007      	b.n	8005484 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005478:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800547c:	d102      	bne.n	8005484 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2208      	movs	r2, #8
 8005482:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e267      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d075      	beq.n	800559a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80054ae:	4b88      	ldr	r3, [pc, #544]	@ (80056d0 <HAL_RCC_OscConfig+0x240>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 030c 	and.w	r3, r3, #12
 80054b6:	2b04      	cmp	r3, #4
 80054b8:	d00c      	beq.n	80054d4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054ba:	4b85      	ldr	r3, [pc, #532]	@ (80056d0 <HAL_RCC_OscConfig+0x240>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80054c2:	2b08      	cmp	r3, #8
 80054c4:	d112      	bne.n	80054ec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054c6:	4b82      	ldr	r3, [pc, #520]	@ (80056d0 <HAL_RCC_OscConfig+0x240>)
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054d2:	d10b      	bne.n	80054ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054d4:	4b7e      	ldr	r3, [pc, #504]	@ (80056d0 <HAL_RCC_OscConfig+0x240>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d05b      	beq.n	8005598 <HAL_RCC_OscConfig+0x108>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d157      	bne.n	8005598 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e242      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054f4:	d106      	bne.n	8005504 <HAL_RCC_OscConfig+0x74>
 80054f6:	4b76      	ldr	r3, [pc, #472]	@ (80056d0 <HAL_RCC_OscConfig+0x240>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a75      	ldr	r2, [pc, #468]	@ (80056d0 <HAL_RCC_OscConfig+0x240>)
 80054fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005500:	6013      	str	r3, [r2, #0]
 8005502:	e01d      	b.n	8005540 <HAL_RCC_OscConfig+0xb0>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800550c:	d10c      	bne.n	8005528 <HAL_RCC_OscConfig+0x98>
 800550e:	4b70      	ldr	r3, [pc, #448]	@ (80056d0 <HAL_RCC_OscConfig+0x240>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a6f      	ldr	r2, [pc, #444]	@ (80056d0 <HAL_RCC_OscConfig+0x240>)
 8005514:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005518:	6013      	str	r3, [r2, #0]
 800551a:	4b6d      	ldr	r3, [pc, #436]	@ (80056d0 <HAL_RCC_OscConfig+0x240>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a6c      	ldr	r2, [pc, #432]	@ (80056d0 <HAL_RCC_OscConfig+0x240>)
 8005520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005524:	6013      	str	r3, [r2, #0]
 8005526:	e00b      	b.n	8005540 <HAL_RCC_OscConfig+0xb0>
 8005528:	4b69      	ldr	r3, [pc, #420]	@ (80056d0 <HAL_RCC_OscConfig+0x240>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a68      	ldr	r2, [pc, #416]	@ (80056d0 <HAL_RCC_OscConfig+0x240>)
 800552e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005532:	6013      	str	r3, [r2, #0]
 8005534:	4b66      	ldr	r3, [pc, #408]	@ (80056d0 <HAL_RCC_OscConfig+0x240>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a65      	ldr	r2, [pc, #404]	@ (80056d0 <HAL_RCC_OscConfig+0x240>)
 800553a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800553e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d013      	beq.n	8005570 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005548:	f7fc fafa 	bl	8001b40 <HAL_GetTick>
 800554c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800554e:	e008      	b.n	8005562 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005550:	f7fc faf6 	bl	8001b40 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b64      	cmp	r3, #100	@ 0x64
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e207      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005562:	4b5b      	ldr	r3, [pc, #364]	@ (80056d0 <HAL_RCC_OscConfig+0x240>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0f0      	beq.n	8005550 <HAL_RCC_OscConfig+0xc0>
 800556e:	e014      	b.n	800559a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005570:	f7fc fae6 	bl	8001b40 <HAL_GetTick>
 8005574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005576:	e008      	b.n	800558a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005578:	f7fc fae2 	bl	8001b40 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b64      	cmp	r3, #100	@ 0x64
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e1f3      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800558a:	4b51      	ldr	r3, [pc, #324]	@ (80056d0 <HAL_RCC_OscConfig+0x240>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1f0      	bne.n	8005578 <HAL_RCC_OscConfig+0xe8>
 8005596:	e000      	b.n	800559a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d063      	beq.n	800566e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80055a6:	4b4a      	ldr	r3, [pc, #296]	@ (80056d0 <HAL_RCC_OscConfig+0x240>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f003 030c 	and.w	r3, r3, #12
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00b      	beq.n	80055ca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055b2:	4b47      	ldr	r3, [pc, #284]	@ (80056d0 <HAL_RCC_OscConfig+0x240>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80055ba:	2b08      	cmp	r3, #8
 80055bc:	d11c      	bne.n	80055f8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055be:	4b44      	ldr	r3, [pc, #272]	@ (80056d0 <HAL_RCC_OscConfig+0x240>)
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d116      	bne.n	80055f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055ca:	4b41      	ldr	r3, [pc, #260]	@ (80056d0 <HAL_RCC_OscConfig+0x240>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d005      	beq.n	80055e2 <HAL_RCC_OscConfig+0x152>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d001      	beq.n	80055e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e1c7      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055e2:	4b3b      	ldr	r3, [pc, #236]	@ (80056d0 <HAL_RCC_OscConfig+0x240>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	4937      	ldr	r1, [pc, #220]	@ (80056d0 <HAL_RCC_OscConfig+0x240>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055f6:	e03a      	b.n	800566e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d020      	beq.n	8005642 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005600:	4b34      	ldr	r3, [pc, #208]	@ (80056d4 <HAL_RCC_OscConfig+0x244>)
 8005602:	2201      	movs	r2, #1
 8005604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005606:	f7fc fa9b 	bl	8001b40 <HAL_GetTick>
 800560a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800560c:	e008      	b.n	8005620 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800560e:	f7fc fa97 	bl	8001b40 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	2b02      	cmp	r3, #2
 800561a:	d901      	bls.n	8005620 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e1a8      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005620:	4b2b      	ldr	r3, [pc, #172]	@ (80056d0 <HAL_RCC_OscConfig+0x240>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d0f0      	beq.n	800560e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800562c:	4b28      	ldr	r3, [pc, #160]	@ (80056d0 <HAL_RCC_OscConfig+0x240>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	4925      	ldr	r1, [pc, #148]	@ (80056d0 <HAL_RCC_OscConfig+0x240>)
 800563c:	4313      	orrs	r3, r2
 800563e:	600b      	str	r3, [r1, #0]
 8005640:	e015      	b.n	800566e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005642:	4b24      	ldr	r3, [pc, #144]	@ (80056d4 <HAL_RCC_OscConfig+0x244>)
 8005644:	2200      	movs	r2, #0
 8005646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005648:	f7fc fa7a 	bl	8001b40 <HAL_GetTick>
 800564c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800564e:	e008      	b.n	8005662 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005650:	f7fc fa76 	bl	8001b40 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b02      	cmp	r3, #2
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e187      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005662:	4b1b      	ldr	r3, [pc, #108]	@ (80056d0 <HAL_RCC_OscConfig+0x240>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1f0      	bne.n	8005650 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0308 	and.w	r3, r3, #8
 8005676:	2b00      	cmp	r3, #0
 8005678:	d036      	beq.n	80056e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d016      	beq.n	80056b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005682:	4b15      	ldr	r3, [pc, #84]	@ (80056d8 <HAL_RCC_OscConfig+0x248>)
 8005684:	2201      	movs	r2, #1
 8005686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005688:	f7fc fa5a 	bl	8001b40 <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800568e:	e008      	b.n	80056a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005690:	f7fc fa56 	bl	8001b40 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b02      	cmp	r3, #2
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e167      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056a2:	4b0b      	ldr	r3, [pc, #44]	@ (80056d0 <HAL_RCC_OscConfig+0x240>)
 80056a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d0f0      	beq.n	8005690 <HAL_RCC_OscConfig+0x200>
 80056ae:	e01b      	b.n	80056e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056b0:	4b09      	ldr	r3, [pc, #36]	@ (80056d8 <HAL_RCC_OscConfig+0x248>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056b6:	f7fc fa43 	bl	8001b40 <HAL_GetTick>
 80056ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056bc:	e00e      	b.n	80056dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056be:	f7fc fa3f 	bl	8001b40 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d907      	bls.n	80056dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e150      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
 80056d0:	40023800 	.word	0x40023800
 80056d4:	42470000 	.word	0x42470000
 80056d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056dc:	4b88      	ldr	r3, [pc, #544]	@ (8005900 <HAL_RCC_OscConfig+0x470>)
 80056de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1ea      	bne.n	80056be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0304 	and.w	r3, r3, #4
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f000 8097 	beq.w	8005824 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056f6:	2300      	movs	r3, #0
 80056f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056fa:	4b81      	ldr	r3, [pc, #516]	@ (8005900 <HAL_RCC_OscConfig+0x470>)
 80056fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10f      	bne.n	8005726 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005706:	2300      	movs	r3, #0
 8005708:	60bb      	str	r3, [r7, #8]
 800570a:	4b7d      	ldr	r3, [pc, #500]	@ (8005900 <HAL_RCC_OscConfig+0x470>)
 800570c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570e:	4a7c      	ldr	r2, [pc, #496]	@ (8005900 <HAL_RCC_OscConfig+0x470>)
 8005710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005714:	6413      	str	r3, [r2, #64]	@ 0x40
 8005716:	4b7a      	ldr	r3, [pc, #488]	@ (8005900 <HAL_RCC_OscConfig+0x470>)
 8005718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800571e:	60bb      	str	r3, [r7, #8]
 8005720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005722:	2301      	movs	r3, #1
 8005724:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005726:	4b77      	ldr	r3, [pc, #476]	@ (8005904 <HAL_RCC_OscConfig+0x474>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800572e:	2b00      	cmp	r3, #0
 8005730:	d118      	bne.n	8005764 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005732:	4b74      	ldr	r3, [pc, #464]	@ (8005904 <HAL_RCC_OscConfig+0x474>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a73      	ldr	r2, [pc, #460]	@ (8005904 <HAL_RCC_OscConfig+0x474>)
 8005738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800573c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800573e:	f7fc f9ff 	bl	8001b40 <HAL_GetTick>
 8005742:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005744:	e008      	b.n	8005758 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005746:	f7fc f9fb 	bl	8001b40 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d901      	bls.n	8005758 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e10c      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005758:	4b6a      	ldr	r3, [pc, #424]	@ (8005904 <HAL_RCC_OscConfig+0x474>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0f0      	beq.n	8005746 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d106      	bne.n	800577a <HAL_RCC_OscConfig+0x2ea>
 800576c:	4b64      	ldr	r3, [pc, #400]	@ (8005900 <HAL_RCC_OscConfig+0x470>)
 800576e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005770:	4a63      	ldr	r2, [pc, #396]	@ (8005900 <HAL_RCC_OscConfig+0x470>)
 8005772:	f043 0301 	orr.w	r3, r3, #1
 8005776:	6713      	str	r3, [r2, #112]	@ 0x70
 8005778:	e01c      	b.n	80057b4 <HAL_RCC_OscConfig+0x324>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	2b05      	cmp	r3, #5
 8005780:	d10c      	bne.n	800579c <HAL_RCC_OscConfig+0x30c>
 8005782:	4b5f      	ldr	r3, [pc, #380]	@ (8005900 <HAL_RCC_OscConfig+0x470>)
 8005784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005786:	4a5e      	ldr	r2, [pc, #376]	@ (8005900 <HAL_RCC_OscConfig+0x470>)
 8005788:	f043 0304 	orr.w	r3, r3, #4
 800578c:	6713      	str	r3, [r2, #112]	@ 0x70
 800578e:	4b5c      	ldr	r3, [pc, #368]	@ (8005900 <HAL_RCC_OscConfig+0x470>)
 8005790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005792:	4a5b      	ldr	r2, [pc, #364]	@ (8005900 <HAL_RCC_OscConfig+0x470>)
 8005794:	f043 0301 	orr.w	r3, r3, #1
 8005798:	6713      	str	r3, [r2, #112]	@ 0x70
 800579a:	e00b      	b.n	80057b4 <HAL_RCC_OscConfig+0x324>
 800579c:	4b58      	ldr	r3, [pc, #352]	@ (8005900 <HAL_RCC_OscConfig+0x470>)
 800579e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057a0:	4a57      	ldr	r2, [pc, #348]	@ (8005900 <HAL_RCC_OscConfig+0x470>)
 80057a2:	f023 0301 	bic.w	r3, r3, #1
 80057a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80057a8:	4b55      	ldr	r3, [pc, #340]	@ (8005900 <HAL_RCC_OscConfig+0x470>)
 80057aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ac:	4a54      	ldr	r2, [pc, #336]	@ (8005900 <HAL_RCC_OscConfig+0x470>)
 80057ae:	f023 0304 	bic.w	r3, r3, #4
 80057b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d015      	beq.n	80057e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057bc:	f7fc f9c0 	bl	8001b40 <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057c2:	e00a      	b.n	80057da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057c4:	f7fc f9bc 	bl	8001b40 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d901      	bls.n	80057da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e0cb      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057da:	4b49      	ldr	r3, [pc, #292]	@ (8005900 <HAL_RCC_OscConfig+0x470>)
 80057dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d0ee      	beq.n	80057c4 <HAL_RCC_OscConfig+0x334>
 80057e6:	e014      	b.n	8005812 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057e8:	f7fc f9aa 	bl	8001b40 <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057ee:	e00a      	b.n	8005806 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057f0:	f7fc f9a6 	bl	8001b40 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057fe:	4293      	cmp	r3, r2
 8005800:	d901      	bls.n	8005806 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e0b5      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005806:	4b3e      	ldr	r3, [pc, #248]	@ (8005900 <HAL_RCC_OscConfig+0x470>)
 8005808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1ee      	bne.n	80057f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005812:	7dfb      	ldrb	r3, [r7, #23]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d105      	bne.n	8005824 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005818:	4b39      	ldr	r3, [pc, #228]	@ (8005900 <HAL_RCC_OscConfig+0x470>)
 800581a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581c:	4a38      	ldr	r2, [pc, #224]	@ (8005900 <HAL_RCC_OscConfig+0x470>)
 800581e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005822:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 80a1 	beq.w	8005970 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800582e:	4b34      	ldr	r3, [pc, #208]	@ (8005900 <HAL_RCC_OscConfig+0x470>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f003 030c 	and.w	r3, r3, #12
 8005836:	2b08      	cmp	r3, #8
 8005838:	d05c      	beq.n	80058f4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	2b02      	cmp	r3, #2
 8005840:	d141      	bne.n	80058c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005842:	4b31      	ldr	r3, [pc, #196]	@ (8005908 <HAL_RCC_OscConfig+0x478>)
 8005844:	2200      	movs	r2, #0
 8005846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005848:	f7fc f97a 	bl	8001b40 <HAL_GetTick>
 800584c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800584e:	e008      	b.n	8005862 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005850:	f7fc f976 	bl	8001b40 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	2b02      	cmp	r3, #2
 800585c:	d901      	bls.n	8005862 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e087      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005862:	4b27      	ldr	r3, [pc, #156]	@ (8005900 <HAL_RCC_OscConfig+0x470>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1f0      	bne.n	8005850 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	69da      	ldr	r2, [r3, #28]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587c:	019b      	lsls	r3, r3, #6
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005884:	085b      	lsrs	r3, r3, #1
 8005886:	3b01      	subs	r3, #1
 8005888:	041b      	lsls	r3, r3, #16
 800588a:	431a      	orrs	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005890:	061b      	lsls	r3, r3, #24
 8005892:	491b      	ldr	r1, [pc, #108]	@ (8005900 <HAL_RCC_OscConfig+0x470>)
 8005894:	4313      	orrs	r3, r2
 8005896:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005898:	4b1b      	ldr	r3, [pc, #108]	@ (8005908 <HAL_RCC_OscConfig+0x478>)
 800589a:	2201      	movs	r2, #1
 800589c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800589e:	f7fc f94f 	bl	8001b40 <HAL_GetTick>
 80058a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058a4:	e008      	b.n	80058b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058a6:	f7fc f94b 	bl	8001b40 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d901      	bls.n	80058b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e05c      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058b8:	4b11      	ldr	r3, [pc, #68]	@ (8005900 <HAL_RCC_OscConfig+0x470>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0f0      	beq.n	80058a6 <HAL_RCC_OscConfig+0x416>
 80058c4:	e054      	b.n	8005970 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058c6:	4b10      	ldr	r3, [pc, #64]	@ (8005908 <HAL_RCC_OscConfig+0x478>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058cc:	f7fc f938 	bl	8001b40 <HAL_GetTick>
 80058d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058d2:	e008      	b.n	80058e6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058d4:	f7fc f934 	bl	8001b40 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e045      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058e6:	4b06      	ldr	r3, [pc, #24]	@ (8005900 <HAL_RCC_OscConfig+0x470>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1f0      	bne.n	80058d4 <HAL_RCC_OscConfig+0x444>
 80058f2:	e03d      	b.n	8005970 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d107      	bne.n	800590c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e038      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
 8005900:	40023800 	.word	0x40023800
 8005904:	40007000 	.word	0x40007000
 8005908:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800590c:	4b1b      	ldr	r3, [pc, #108]	@ (800597c <HAL_RCC_OscConfig+0x4ec>)
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d028      	beq.n	800596c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005924:	429a      	cmp	r2, r3
 8005926:	d121      	bne.n	800596c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005932:	429a      	cmp	r2, r3
 8005934:	d11a      	bne.n	800596c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800593c:	4013      	ands	r3, r2
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005942:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005944:	4293      	cmp	r3, r2
 8005946:	d111      	bne.n	800596c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005952:	085b      	lsrs	r3, r3, #1
 8005954:	3b01      	subs	r3, #1
 8005956:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005958:	429a      	cmp	r2, r3
 800595a:	d107      	bne.n	800596c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005966:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005968:	429a      	cmp	r2, r3
 800596a:	d001      	beq.n	8005970 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e000      	b.n	8005972 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3718      	adds	r7, #24
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	40023800 	.word	0x40023800

08005980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e0cc      	b.n	8005b2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005994:	4b68      	ldr	r3, [pc, #416]	@ (8005b38 <HAL_RCC_ClockConfig+0x1b8>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0307 	and.w	r3, r3, #7
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d90c      	bls.n	80059bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059a2:	4b65      	ldr	r3, [pc, #404]	@ (8005b38 <HAL_RCC_ClockConfig+0x1b8>)
 80059a4:	683a      	ldr	r2, [r7, #0]
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059aa:	4b63      	ldr	r3, [pc, #396]	@ (8005b38 <HAL_RCC_ClockConfig+0x1b8>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0307 	and.w	r3, r3, #7
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d001      	beq.n	80059bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e0b8      	b.n	8005b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d020      	beq.n	8005a0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d005      	beq.n	80059e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059d4:	4b59      	ldr	r3, [pc, #356]	@ (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	4a58      	ldr	r2, [pc, #352]	@ (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 80059da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80059de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0308 	and.w	r3, r3, #8
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d005      	beq.n	80059f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059ec:	4b53      	ldr	r3, [pc, #332]	@ (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	4a52      	ldr	r2, [pc, #328]	@ (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 80059f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80059f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059f8:	4b50      	ldr	r3, [pc, #320]	@ (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	494d      	ldr	r1, [pc, #308]	@ (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d044      	beq.n	8005aa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d107      	bne.n	8005a2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a1e:	4b47      	ldr	r3, [pc, #284]	@ (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d119      	bne.n	8005a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e07f      	b.n	8005b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d003      	beq.n	8005a3e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a3a:	2b03      	cmp	r3, #3
 8005a3c:	d107      	bne.n	8005a4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a3e:	4b3f      	ldr	r3, [pc, #252]	@ (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d109      	bne.n	8005a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e06f      	b.n	8005b2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a4e:	4b3b      	ldr	r3, [pc, #236]	@ (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e067      	b.n	8005b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a5e:	4b37      	ldr	r3, [pc, #220]	@ (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f023 0203 	bic.w	r2, r3, #3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	4934      	ldr	r1, [pc, #208]	@ (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a70:	f7fc f866 	bl	8001b40 <HAL_GetTick>
 8005a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a76:	e00a      	b.n	8005a8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a78:	f7fc f862 	bl	8001b40 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e04f      	b.n	8005b2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a8e:	4b2b      	ldr	r3, [pc, #172]	@ (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f003 020c 	and.w	r2, r3, #12
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d1eb      	bne.n	8005a78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005aa0:	4b25      	ldr	r3, [pc, #148]	@ (8005b38 <HAL_RCC_ClockConfig+0x1b8>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d20c      	bcs.n	8005ac8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aae:	4b22      	ldr	r3, [pc, #136]	@ (8005b38 <HAL_RCC_ClockConfig+0x1b8>)
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	b2d2      	uxtb	r2, r2
 8005ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ab6:	4b20      	ldr	r3, [pc, #128]	@ (8005b38 <HAL_RCC_ClockConfig+0x1b8>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0307 	and.w	r3, r3, #7
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d001      	beq.n	8005ac8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e032      	b.n	8005b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0304 	and.w	r3, r3, #4
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d008      	beq.n	8005ae6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ad4:	4b19      	ldr	r3, [pc, #100]	@ (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	4916      	ldr	r1, [pc, #88]	@ (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0308 	and.w	r3, r3, #8
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d009      	beq.n	8005b06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005af2:	4b12      	ldr	r3, [pc, #72]	@ (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	00db      	lsls	r3, r3, #3
 8005b00:	490e      	ldr	r1, [pc, #56]	@ (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b06:	f000 f821 	bl	8005b4c <HAL_RCC_GetSysClockFreq>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b3c <HAL_RCC_ClockConfig+0x1bc>)
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	091b      	lsrs	r3, r3, #4
 8005b12:	f003 030f 	and.w	r3, r3, #15
 8005b16:	490a      	ldr	r1, [pc, #40]	@ (8005b40 <HAL_RCC_ClockConfig+0x1c0>)
 8005b18:	5ccb      	ldrb	r3, [r1, r3]
 8005b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b1e:	4a09      	ldr	r2, [pc, #36]	@ (8005b44 <HAL_RCC_ClockConfig+0x1c4>)
 8005b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005b22:	4b09      	ldr	r3, [pc, #36]	@ (8005b48 <HAL_RCC_ClockConfig+0x1c8>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fb ffc6 	bl	8001ab8 <HAL_InitTick>

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	40023c00 	.word	0x40023c00
 8005b3c:	40023800 	.word	0x40023800
 8005b40:	08007898 	.word	0x08007898
 8005b44:	20000000 	.word	0x20000000
 8005b48:	20000018 	.word	0x20000018

08005b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b50:	b094      	sub	sp, #80	@ 0x50
 8005b52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005b60:	2300      	movs	r3, #0
 8005b62:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b64:	4b79      	ldr	r3, [pc, #484]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f003 030c 	and.w	r3, r3, #12
 8005b6c:	2b08      	cmp	r3, #8
 8005b6e:	d00d      	beq.n	8005b8c <HAL_RCC_GetSysClockFreq+0x40>
 8005b70:	2b08      	cmp	r3, #8
 8005b72:	f200 80e1 	bhi.w	8005d38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d002      	beq.n	8005b80 <HAL_RCC_GetSysClockFreq+0x34>
 8005b7a:	2b04      	cmp	r3, #4
 8005b7c:	d003      	beq.n	8005b86 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b7e:	e0db      	b.n	8005d38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b80:	4b73      	ldr	r3, [pc, #460]	@ (8005d50 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b82:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b84:	e0db      	b.n	8005d3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b86:	4b73      	ldr	r3, [pc, #460]	@ (8005d54 <HAL_RCC_GetSysClockFreq+0x208>)
 8005b88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b8a:	e0d8      	b.n	8005d3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b8c:	4b6f      	ldr	r3, [pc, #444]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b94:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b96:	4b6d      	ldr	r3, [pc, #436]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d063      	beq.n	8005c6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ba2:	4b6a      	ldr	r3, [pc, #424]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	099b      	lsrs	r3, r3, #6
 8005ba8:	2200      	movs	r2, #0
 8005baa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005bac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005bbe:	4622      	mov	r2, r4
 8005bc0:	462b      	mov	r3, r5
 8005bc2:	f04f 0000 	mov.w	r0, #0
 8005bc6:	f04f 0100 	mov.w	r1, #0
 8005bca:	0159      	lsls	r1, r3, #5
 8005bcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bd0:	0150      	lsls	r0, r2, #5
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	4621      	mov	r1, r4
 8005bd8:	1a51      	subs	r1, r2, r1
 8005bda:	6139      	str	r1, [r7, #16]
 8005bdc:	4629      	mov	r1, r5
 8005bde:	eb63 0301 	sbc.w	r3, r3, r1
 8005be2:	617b      	str	r3, [r7, #20]
 8005be4:	f04f 0200 	mov.w	r2, #0
 8005be8:	f04f 0300 	mov.w	r3, #0
 8005bec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bf0:	4659      	mov	r1, fp
 8005bf2:	018b      	lsls	r3, r1, #6
 8005bf4:	4651      	mov	r1, sl
 8005bf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005bfa:	4651      	mov	r1, sl
 8005bfc:	018a      	lsls	r2, r1, #6
 8005bfe:	4651      	mov	r1, sl
 8005c00:	ebb2 0801 	subs.w	r8, r2, r1
 8005c04:	4659      	mov	r1, fp
 8005c06:	eb63 0901 	sbc.w	r9, r3, r1
 8005c0a:	f04f 0200 	mov.w	r2, #0
 8005c0e:	f04f 0300 	mov.w	r3, #0
 8005c12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c1e:	4690      	mov	r8, r2
 8005c20:	4699      	mov	r9, r3
 8005c22:	4623      	mov	r3, r4
 8005c24:	eb18 0303 	adds.w	r3, r8, r3
 8005c28:	60bb      	str	r3, [r7, #8]
 8005c2a:	462b      	mov	r3, r5
 8005c2c:	eb49 0303 	adc.w	r3, r9, r3
 8005c30:	60fb      	str	r3, [r7, #12]
 8005c32:	f04f 0200 	mov.w	r2, #0
 8005c36:	f04f 0300 	mov.w	r3, #0
 8005c3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c3e:	4629      	mov	r1, r5
 8005c40:	024b      	lsls	r3, r1, #9
 8005c42:	4621      	mov	r1, r4
 8005c44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c48:	4621      	mov	r1, r4
 8005c4a:	024a      	lsls	r2, r1, #9
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	4619      	mov	r1, r3
 8005c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c52:	2200      	movs	r2, #0
 8005c54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c5c:	f7fa fabc 	bl	80001d8 <__aeabi_uldivmod>
 8005c60:	4602      	mov	r2, r0
 8005c62:	460b      	mov	r3, r1
 8005c64:	4613      	mov	r3, r2
 8005c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c68:	e058      	b.n	8005d1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c6a:	4b38      	ldr	r3, [pc, #224]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	099b      	lsrs	r3, r3, #6
 8005c70:	2200      	movs	r2, #0
 8005c72:	4618      	mov	r0, r3
 8005c74:	4611      	mov	r1, r2
 8005c76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c7a:	623b      	str	r3, [r7, #32]
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c84:	4642      	mov	r2, r8
 8005c86:	464b      	mov	r3, r9
 8005c88:	f04f 0000 	mov.w	r0, #0
 8005c8c:	f04f 0100 	mov.w	r1, #0
 8005c90:	0159      	lsls	r1, r3, #5
 8005c92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c96:	0150      	lsls	r0, r2, #5
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4641      	mov	r1, r8
 8005c9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ca8:	f04f 0200 	mov.w	r2, #0
 8005cac:	f04f 0300 	mov.w	r3, #0
 8005cb0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005cb4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005cb8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005cbc:	ebb2 040a 	subs.w	r4, r2, sl
 8005cc0:	eb63 050b 	sbc.w	r5, r3, fp
 8005cc4:	f04f 0200 	mov.w	r2, #0
 8005cc8:	f04f 0300 	mov.w	r3, #0
 8005ccc:	00eb      	lsls	r3, r5, #3
 8005cce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cd2:	00e2      	lsls	r2, r4, #3
 8005cd4:	4614      	mov	r4, r2
 8005cd6:	461d      	mov	r5, r3
 8005cd8:	4643      	mov	r3, r8
 8005cda:	18e3      	adds	r3, r4, r3
 8005cdc:	603b      	str	r3, [r7, #0]
 8005cde:	464b      	mov	r3, r9
 8005ce0:	eb45 0303 	adc.w	r3, r5, r3
 8005ce4:	607b      	str	r3, [r7, #4]
 8005ce6:	f04f 0200 	mov.w	r2, #0
 8005cea:	f04f 0300 	mov.w	r3, #0
 8005cee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cf2:	4629      	mov	r1, r5
 8005cf4:	028b      	lsls	r3, r1, #10
 8005cf6:	4621      	mov	r1, r4
 8005cf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005cfc:	4621      	mov	r1, r4
 8005cfe:	028a      	lsls	r2, r1, #10
 8005d00:	4610      	mov	r0, r2
 8005d02:	4619      	mov	r1, r3
 8005d04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d06:	2200      	movs	r2, #0
 8005d08:	61bb      	str	r3, [r7, #24]
 8005d0a:	61fa      	str	r2, [r7, #28]
 8005d0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d10:	f7fa fa62 	bl	80001d8 <__aeabi_uldivmod>
 8005d14:	4602      	mov	r2, r0
 8005d16:	460b      	mov	r3, r1
 8005d18:	4613      	mov	r3, r2
 8005d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	0c1b      	lsrs	r3, r3, #16
 8005d22:	f003 0303 	and.w	r3, r3, #3
 8005d26:	3301      	adds	r3, #1
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005d2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d36:	e002      	b.n	8005d3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d38:	4b05      	ldr	r3, [pc, #20]	@ (8005d50 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3750      	adds	r7, #80	@ 0x50
 8005d44:	46bd      	mov	sp, r7
 8005d46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d4a:	bf00      	nop
 8005d4c:	40023800 	.word	0x40023800
 8005d50:	00f42400 	.word	0x00f42400
 8005d54:	007a1200 	.word	0x007a1200

08005d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d5c:	4b03      	ldr	r3, [pc, #12]	@ (8005d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	20000000 	.word	0x20000000

08005d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d74:	f7ff fff0 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	4b05      	ldr	r3, [pc, #20]	@ (8005d90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	0a9b      	lsrs	r3, r3, #10
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	4903      	ldr	r1, [pc, #12]	@ (8005d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d86:	5ccb      	ldrb	r3, [r1, r3]
 8005d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	40023800 	.word	0x40023800
 8005d94:	080078a8 	.word	0x080078a8

08005d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d9c:	f7ff ffdc 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8005da0:	4602      	mov	r2, r0
 8005da2:	4b05      	ldr	r3, [pc, #20]	@ (8005db8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	0b5b      	lsrs	r3, r3, #13
 8005da8:	f003 0307 	and.w	r3, r3, #7
 8005dac:	4903      	ldr	r1, [pc, #12]	@ (8005dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dae:	5ccb      	ldrb	r3, [r1, r3]
 8005db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	40023800 	.word	0x40023800
 8005dbc:	080078a8 	.word	0x080078a8

08005dc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d101      	bne.n	8005dd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e041      	b.n	8005e56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d106      	bne.n	8005dec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7fa ffa4 	bl	8000d34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2202      	movs	r2, #2
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	4610      	mov	r0, r2
 8005e00:	f000 fa9e 	bl	8006340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
	...

08005e60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d001      	beq.n	8005e78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e044      	b.n	8005f02 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68da      	ldr	r2, [r3, #12]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f042 0201 	orr.w	r2, r2, #1
 8005e8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a1e      	ldr	r2, [pc, #120]	@ (8005f10 <HAL_TIM_Base_Start_IT+0xb0>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d018      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x6c>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ea2:	d013      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x6c>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a1a      	ldr	r2, [pc, #104]	@ (8005f14 <HAL_TIM_Base_Start_IT+0xb4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d00e      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x6c>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a19      	ldr	r2, [pc, #100]	@ (8005f18 <HAL_TIM_Base_Start_IT+0xb8>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d009      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x6c>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a17      	ldr	r2, [pc, #92]	@ (8005f1c <HAL_TIM_Base_Start_IT+0xbc>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d004      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x6c>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a16      	ldr	r2, [pc, #88]	@ (8005f20 <HAL_TIM_Base_Start_IT+0xc0>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d111      	bne.n	8005ef0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f003 0307 	and.w	r3, r3, #7
 8005ed6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2b06      	cmp	r3, #6
 8005edc:	d010      	beq.n	8005f00 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f042 0201 	orr.w	r2, r2, #1
 8005eec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eee:	e007      	b.n	8005f00 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f042 0201 	orr.w	r2, r2, #1
 8005efe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	40010000 	.word	0x40010000
 8005f14:	40000400 	.word	0x40000400
 8005f18:	40000800 	.word	0x40000800
 8005f1c:	40000c00 	.word	0x40000c00
 8005f20:	40014000 	.word	0x40014000

08005f24 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f022 0201 	bic.w	r2, r2, #1
 8005f3a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6a1a      	ldr	r2, [r3, #32]
 8005f42:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005f46:	4013      	ands	r3, r2
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10f      	bne.n	8005f6c <HAL_TIM_Base_Stop_IT+0x48>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6a1a      	ldr	r2, [r3, #32]
 8005f52:	f240 4344 	movw	r3, #1092	@ 0x444
 8005f56:	4013      	ands	r3, r2
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d107      	bne.n	8005f6c <HAL_TIM_Base_Stop_IT+0x48>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f022 0201 	bic.w	r2, r2, #1
 8005f6a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b084      	sub	sp, #16
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	f003 0302 	and.w	r3, r3, #2
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d020      	beq.n	8005fe6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d01b      	beq.n	8005fe6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f06f 0202 	mvn.w	r2, #2
 8005fb6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	f003 0303 	and.w	r3, r3, #3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d003      	beq.n	8005fd4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 f999 	bl	8006304 <HAL_TIM_IC_CaptureCallback>
 8005fd2:	e005      	b.n	8005fe0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f98b 	bl	80062f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f99c 	bl	8006318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	f003 0304 	and.w	r3, r3, #4
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d020      	beq.n	8006032 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f003 0304 	and.w	r3, r3, #4
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d01b      	beq.n	8006032 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f06f 0204 	mvn.w	r2, #4
 8006002:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2202      	movs	r2, #2
 8006008:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006014:	2b00      	cmp	r3, #0
 8006016:	d003      	beq.n	8006020 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 f973 	bl	8006304 <HAL_TIM_IC_CaptureCallback>
 800601e:	e005      	b.n	800602c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 f965 	bl	80062f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f976 	bl	8006318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	f003 0308 	and.w	r3, r3, #8
 8006038:	2b00      	cmp	r3, #0
 800603a:	d020      	beq.n	800607e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f003 0308 	and.w	r3, r3, #8
 8006042:	2b00      	cmp	r3, #0
 8006044:	d01b      	beq.n	800607e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f06f 0208 	mvn.w	r2, #8
 800604e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2204      	movs	r2, #4
 8006054:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	69db      	ldr	r3, [r3, #28]
 800605c:	f003 0303 	and.w	r3, r3, #3
 8006060:	2b00      	cmp	r3, #0
 8006062:	d003      	beq.n	800606c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 f94d 	bl	8006304 <HAL_TIM_IC_CaptureCallback>
 800606a:	e005      	b.n	8006078 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f93f 	bl	80062f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f950 	bl	8006318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	f003 0310 	and.w	r3, r3, #16
 8006084:	2b00      	cmp	r3, #0
 8006086:	d020      	beq.n	80060ca <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f003 0310 	and.w	r3, r3, #16
 800608e:	2b00      	cmp	r3, #0
 8006090:	d01b      	beq.n	80060ca <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f06f 0210 	mvn.w	r2, #16
 800609a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2208      	movs	r2, #8
 80060a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	69db      	ldr	r3, [r3, #28]
 80060a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d003      	beq.n	80060b8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f927 	bl	8006304 <HAL_TIM_IC_CaptureCallback>
 80060b6:	e005      	b.n	80060c4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 f919 	bl	80062f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f92a 	bl	8006318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00c      	beq.n	80060ee <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d007      	beq.n	80060ee <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f06f 0201 	mvn.w	r2, #1
 80060e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f7fa fa0b 	bl	8000504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00c      	beq.n	8006112 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d007      	beq.n	8006112 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800610a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fab5 	bl	800667c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00c      	beq.n	8006136 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006122:	2b00      	cmp	r3, #0
 8006124:	d007      	beq.n	8006136 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800612e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f8fb 	bl	800632c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	f003 0320 	and.w	r3, r3, #32
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00c      	beq.n	800615a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f003 0320 	and.w	r3, r3, #32
 8006146:	2b00      	cmp	r3, #0
 8006148:	d007      	beq.n	800615a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f06f 0220 	mvn.w	r2, #32
 8006152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fa87 	bl	8006668 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800615a:	bf00      	nop
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b084      	sub	sp, #16
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800616c:	2300      	movs	r3, #0
 800616e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006176:	2b01      	cmp	r3, #1
 8006178:	d101      	bne.n	800617e <HAL_TIM_ConfigClockSource+0x1c>
 800617a:	2302      	movs	r3, #2
 800617c:	e0b4      	b.n	80062e8 <HAL_TIM_ConfigClockSource+0x186>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2202      	movs	r2, #2
 800618a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800619c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061a4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061b6:	d03e      	beq.n	8006236 <HAL_TIM_ConfigClockSource+0xd4>
 80061b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061bc:	f200 8087 	bhi.w	80062ce <HAL_TIM_ConfigClockSource+0x16c>
 80061c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061c4:	f000 8086 	beq.w	80062d4 <HAL_TIM_ConfigClockSource+0x172>
 80061c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061cc:	d87f      	bhi.n	80062ce <HAL_TIM_ConfigClockSource+0x16c>
 80061ce:	2b70      	cmp	r3, #112	@ 0x70
 80061d0:	d01a      	beq.n	8006208 <HAL_TIM_ConfigClockSource+0xa6>
 80061d2:	2b70      	cmp	r3, #112	@ 0x70
 80061d4:	d87b      	bhi.n	80062ce <HAL_TIM_ConfigClockSource+0x16c>
 80061d6:	2b60      	cmp	r3, #96	@ 0x60
 80061d8:	d050      	beq.n	800627c <HAL_TIM_ConfigClockSource+0x11a>
 80061da:	2b60      	cmp	r3, #96	@ 0x60
 80061dc:	d877      	bhi.n	80062ce <HAL_TIM_ConfigClockSource+0x16c>
 80061de:	2b50      	cmp	r3, #80	@ 0x50
 80061e0:	d03c      	beq.n	800625c <HAL_TIM_ConfigClockSource+0xfa>
 80061e2:	2b50      	cmp	r3, #80	@ 0x50
 80061e4:	d873      	bhi.n	80062ce <HAL_TIM_ConfigClockSource+0x16c>
 80061e6:	2b40      	cmp	r3, #64	@ 0x40
 80061e8:	d058      	beq.n	800629c <HAL_TIM_ConfigClockSource+0x13a>
 80061ea:	2b40      	cmp	r3, #64	@ 0x40
 80061ec:	d86f      	bhi.n	80062ce <HAL_TIM_ConfigClockSource+0x16c>
 80061ee:	2b30      	cmp	r3, #48	@ 0x30
 80061f0:	d064      	beq.n	80062bc <HAL_TIM_ConfigClockSource+0x15a>
 80061f2:	2b30      	cmp	r3, #48	@ 0x30
 80061f4:	d86b      	bhi.n	80062ce <HAL_TIM_ConfigClockSource+0x16c>
 80061f6:	2b20      	cmp	r3, #32
 80061f8:	d060      	beq.n	80062bc <HAL_TIM_ConfigClockSource+0x15a>
 80061fa:	2b20      	cmp	r3, #32
 80061fc:	d867      	bhi.n	80062ce <HAL_TIM_ConfigClockSource+0x16c>
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d05c      	beq.n	80062bc <HAL_TIM_ConfigClockSource+0x15a>
 8006202:	2b10      	cmp	r3, #16
 8006204:	d05a      	beq.n	80062bc <HAL_TIM_ConfigClockSource+0x15a>
 8006206:	e062      	b.n	80062ce <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006218:	f000 f998 	bl	800654c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800622a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	609a      	str	r2, [r3, #8]
      break;
 8006234:	e04f      	b.n	80062d6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006246:	f000 f981 	bl	800654c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	689a      	ldr	r2, [r3, #8]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006258:	609a      	str	r2, [r3, #8]
      break;
 800625a:	e03c      	b.n	80062d6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006268:	461a      	mov	r2, r3
 800626a:	f000 f8f5 	bl	8006458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2150      	movs	r1, #80	@ 0x50
 8006274:	4618      	mov	r0, r3
 8006276:	f000 f94e 	bl	8006516 <TIM_ITRx_SetConfig>
      break;
 800627a:	e02c      	b.n	80062d6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006288:	461a      	mov	r2, r3
 800628a:	f000 f914 	bl	80064b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2160      	movs	r1, #96	@ 0x60
 8006294:	4618      	mov	r0, r3
 8006296:	f000 f93e 	bl	8006516 <TIM_ITRx_SetConfig>
      break;
 800629a:	e01c      	b.n	80062d6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062a8:	461a      	mov	r2, r3
 80062aa:	f000 f8d5 	bl	8006458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2140      	movs	r1, #64	@ 0x40
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 f92e 	bl	8006516 <TIM_ITRx_SetConfig>
      break;
 80062ba:	e00c      	b.n	80062d6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4619      	mov	r1, r3
 80062c6:	4610      	mov	r0, r2
 80062c8:	f000 f925 	bl	8006516 <TIM_ITRx_SetConfig>
      break;
 80062cc:	e003      	b.n	80062d6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	73fb      	strb	r3, [r7, #15]
      break;
 80062d2:	e000      	b.n	80062d6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80062d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80062e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a3a      	ldr	r2, [pc, #232]	@ (800643c <TIM_Base_SetConfig+0xfc>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d00f      	beq.n	8006378 <TIM_Base_SetConfig+0x38>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800635e:	d00b      	beq.n	8006378 <TIM_Base_SetConfig+0x38>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a37      	ldr	r2, [pc, #220]	@ (8006440 <TIM_Base_SetConfig+0x100>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d007      	beq.n	8006378 <TIM_Base_SetConfig+0x38>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a36      	ldr	r2, [pc, #216]	@ (8006444 <TIM_Base_SetConfig+0x104>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d003      	beq.n	8006378 <TIM_Base_SetConfig+0x38>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a35      	ldr	r2, [pc, #212]	@ (8006448 <TIM_Base_SetConfig+0x108>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d108      	bne.n	800638a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800637e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	4313      	orrs	r3, r2
 8006388:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a2b      	ldr	r2, [pc, #172]	@ (800643c <TIM_Base_SetConfig+0xfc>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d01b      	beq.n	80063ca <TIM_Base_SetConfig+0x8a>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006398:	d017      	beq.n	80063ca <TIM_Base_SetConfig+0x8a>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a28      	ldr	r2, [pc, #160]	@ (8006440 <TIM_Base_SetConfig+0x100>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d013      	beq.n	80063ca <TIM_Base_SetConfig+0x8a>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a27      	ldr	r2, [pc, #156]	@ (8006444 <TIM_Base_SetConfig+0x104>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d00f      	beq.n	80063ca <TIM_Base_SetConfig+0x8a>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a26      	ldr	r2, [pc, #152]	@ (8006448 <TIM_Base_SetConfig+0x108>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d00b      	beq.n	80063ca <TIM_Base_SetConfig+0x8a>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a25      	ldr	r2, [pc, #148]	@ (800644c <TIM_Base_SetConfig+0x10c>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d007      	beq.n	80063ca <TIM_Base_SetConfig+0x8a>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a24      	ldr	r2, [pc, #144]	@ (8006450 <TIM_Base_SetConfig+0x110>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d003      	beq.n	80063ca <TIM_Base_SetConfig+0x8a>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a23      	ldr	r2, [pc, #140]	@ (8006454 <TIM_Base_SetConfig+0x114>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d108      	bne.n	80063dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	4313      	orrs	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	689a      	ldr	r2, [r3, #8]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a0e      	ldr	r2, [pc, #56]	@ (800643c <TIM_Base_SetConfig+0xfc>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d103      	bne.n	8006410 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	691a      	ldr	r2, [r3, #16]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	2b01      	cmp	r3, #1
 8006420:	d105      	bne.n	800642e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	f023 0201 	bic.w	r2, r3, #1
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	611a      	str	r2, [r3, #16]
  }
}
 800642e:	bf00      	nop
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	40010000 	.word	0x40010000
 8006440:	40000400 	.word	0x40000400
 8006444:	40000800 	.word	0x40000800
 8006448:	40000c00 	.word	0x40000c00
 800644c:	40014000 	.word	0x40014000
 8006450:	40014400 	.word	0x40014400
 8006454:	40014800 	.word	0x40014800

08006458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6a1b      	ldr	r3, [r3, #32]
 8006468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	f023 0201 	bic.w	r2, r3, #1
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	011b      	lsls	r3, r3, #4
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	4313      	orrs	r3, r2
 800648c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f023 030a 	bic.w	r3, r3, #10
 8006494:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	4313      	orrs	r3, r2
 800649c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	621a      	str	r2, [r3, #32]
}
 80064aa:	bf00      	nop
 80064ac:	371c      	adds	r7, #28
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b087      	sub	sp, #28
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	60f8      	str	r0, [r7, #12]
 80064be:	60b9      	str	r1, [r7, #8]
 80064c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	f023 0210 	bic.w	r2, r3, #16
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	031b      	lsls	r3, r3, #12
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80064f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	011b      	lsls	r3, r3, #4
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	621a      	str	r2, [r3, #32]
}
 800650a:	bf00      	nop
 800650c:	371c      	adds	r7, #28
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006516:	b480      	push	{r7}
 8006518:	b085      	sub	sp, #20
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
 800651e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800652c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800652e:	683a      	ldr	r2, [r7, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	4313      	orrs	r3, r2
 8006534:	f043 0307 	orr.w	r3, r3, #7
 8006538:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	609a      	str	r2, [r3, #8]
}
 8006540:	bf00      	nop
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800654c:	b480      	push	{r7}
 800654e:	b087      	sub	sp, #28
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
 8006558:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006566:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	021a      	lsls	r2, r3, #8
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	431a      	orrs	r2, r3
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	4313      	orrs	r3, r2
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	4313      	orrs	r3, r2
 8006578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	609a      	str	r2, [r3, #8]
}
 8006580:	bf00      	nop
 8006582:	371c      	adds	r7, #28
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800659c:	2b01      	cmp	r3, #1
 800659e:	d101      	bne.n	80065a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065a0:	2302      	movs	r3, #2
 80065a2:	e050      	b.n	8006646 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2202      	movs	r2, #2
 80065b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a1c      	ldr	r2, [pc, #112]	@ (8006654 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d018      	beq.n	800661a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065f0:	d013      	beq.n	800661a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a18      	ldr	r2, [pc, #96]	@ (8006658 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d00e      	beq.n	800661a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a16      	ldr	r2, [pc, #88]	@ (800665c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d009      	beq.n	800661a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a15      	ldr	r2, [pc, #84]	@ (8006660 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d004      	beq.n	800661a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a13      	ldr	r2, [pc, #76]	@ (8006664 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d10c      	bne.n	8006634 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006620:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	4313      	orrs	r3, r2
 800662a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68ba      	ldr	r2, [r7, #8]
 8006632:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	40010000 	.word	0x40010000
 8006658:	40000400 	.word	0x40000400
 800665c:	40000800 	.word	0x40000800
 8006660:	40000c00 	.word	0x40000c00
 8006664:	40014000 	.word	0x40014000

08006668 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e042      	b.n	8006728 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d106      	bne.n	80066bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f7fa fbbe 	bl	8000e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2224      	movs	r2, #36	@ 0x24
 80066c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68da      	ldr	r2, [r3, #12]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 fe21 	bl	800731c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	691a      	ldr	r2, [r3, #16]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	695a      	ldr	r2, [r3, #20]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68da      	ldr	r2, [r3, #12]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006708:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2220      	movs	r2, #32
 8006714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2220      	movs	r2, #32
 800671c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	4613      	mov	r3, r2
 800673c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b20      	cmp	r3, #32
 8006748:	d112      	bne.n	8006770 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <HAL_UART_Receive_IT+0x26>
 8006750:	88fb      	ldrh	r3, [r7, #6]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e00b      	b.n	8006772 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006760:	88fb      	ldrh	r3, [r7, #6]
 8006762:	461a      	mov	r2, r3
 8006764:	68b9      	ldr	r1, [r7, #8]
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f000 fbd9 	bl	8006f1e <UART_Start_Receive_IT>
 800676c:	4603      	mov	r3, r0
 800676e:	e000      	b.n	8006772 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006770:	2302      	movs	r3, #2
  }
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
	...

0800677c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b08c      	sub	sp, #48	@ 0x30
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	4613      	mov	r3, r2
 8006788:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b20      	cmp	r3, #32
 8006794:	d156      	bne.n	8006844 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <HAL_UART_Transmit_DMA+0x26>
 800679c:	88fb      	ldrh	r3, [r7, #6]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e04f      	b.n	8006846 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	88fa      	ldrh	r2, [r7, #6]
 80067b0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	88fa      	ldrh	r2, [r7, #6]
 80067b6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2221      	movs	r2, #33	@ 0x21
 80067c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ca:	4a21      	ldr	r2, [pc, #132]	@ (8006850 <HAL_UART_Transmit_DMA+0xd4>)
 80067cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d2:	4a20      	ldr	r2, [pc, #128]	@ (8006854 <HAL_UART_Transmit_DMA+0xd8>)
 80067d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067da:	4a1f      	ldr	r2, [pc, #124]	@ (8006858 <HAL_UART_Transmit_DMA+0xdc>)
 80067dc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067e2:	2200      	movs	r2, #0
 80067e4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80067e6:	f107 0308 	add.w	r3, r7, #8
 80067ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80067f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067f2:	6819      	ldr	r1, [r3, #0]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	3304      	adds	r3, #4
 80067fa:	461a      	mov	r2, r3
 80067fc:	88fb      	ldrh	r3, [r7, #6]
 80067fe:	f7fb ffa9 	bl	8002754 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800680a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3314      	adds	r3, #20
 8006812:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	e853 3f00 	ldrex	r3, [r3]
 800681a:	617b      	str	r3, [r7, #20]
   return(result);
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006822:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	3314      	adds	r3, #20
 800682a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800682c:	627a      	str	r2, [r7, #36]	@ 0x24
 800682e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006830:	6a39      	ldr	r1, [r7, #32]
 8006832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006834:	e841 2300 	strex	r3, r2, [r1]
 8006838:	61fb      	str	r3, [r7, #28]
   return(result);
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1e5      	bne.n	800680c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006840:	2300      	movs	r3, #0
 8006842:	e000      	b.n	8006846 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006844:	2302      	movs	r3, #2
  }
}
 8006846:	4618      	mov	r0, r3
 8006848:	3730      	adds	r7, #48	@ 0x30
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	08006dd5 	.word	0x08006dd5
 8006854:	08006e6f 	.word	0x08006e6f
 8006858:	08006e8b 	.word	0x08006e8b

0800685c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b0ba      	sub	sp, #232	@ 0xe8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006882:	2300      	movs	r3, #0
 8006884:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006888:	2300      	movs	r3, #0
 800688a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800688e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006892:	f003 030f 	and.w	r3, r3, #15
 8006896:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800689a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10f      	bne.n	80068c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068a6:	f003 0320 	and.w	r3, r3, #32
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d009      	beq.n	80068c2 <HAL_UART_IRQHandler+0x66>
 80068ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068b2:	f003 0320 	and.w	r3, r3, #32
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fc70 	bl	80071a0 <UART_Receive_IT>
      return;
 80068c0:	e25b      	b.n	8006d7a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80068c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f000 80de 	beq.w	8006a88 <HAL_UART_IRQHandler+0x22c>
 80068cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d106      	bne.n	80068e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80068d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068dc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 80d1 	beq.w	8006a88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80068e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00b      	beq.n	800690a <HAL_UART_IRQHandler+0xae>
 80068f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d005      	beq.n	800690a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006902:	f043 0201 	orr.w	r2, r3, #1
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800690a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800690e:	f003 0304 	and.w	r3, r3, #4
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00b      	beq.n	800692e <HAL_UART_IRQHandler+0xd2>
 8006916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b00      	cmp	r3, #0
 8006920:	d005      	beq.n	800692e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006926:	f043 0202 	orr.w	r2, r3, #2
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800692e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006932:	f003 0302 	and.w	r3, r3, #2
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00b      	beq.n	8006952 <HAL_UART_IRQHandler+0xf6>
 800693a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b00      	cmp	r3, #0
 8006944:	d005      	beq.n	8006952 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800694a:	f043 0204 	orr.w	r2, r3, #4
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006956:	f003 0308 	and.w	r3, r3, #8
 800695a:	2b00      	cmp	r3, #0
 800695c:	d011      	beq.n	8006982 <HAL_UART_IRQHandler+0x126>
 800695e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006962:	f003 0320 	and.w	r3, r3, #32
 8006966:	2b00      	cmp	r3, #0
 8006968:	d105      	bne.n	8006976 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800696a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b00      	cmp	r3, #0
 8006974:	d005      	beq.n	8006982 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800697a:	f043 0208 	orr.w	r2, r3, #8
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006986:	2b00      	cmp	r3, #0
 8006988:	f000 81f2 	beq.w	8006d70 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800698c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006990:	f003 0320 	and.w	r3, r3, #32
 8006994:	2b00      	cmp	r3, #0
 8006996:	d008      	beq.n	80069aa <HAL_UART_IRQHandler+0x14e>
 8006998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800699c:	f003 0320 	and.w	r3, r3, #32
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fbfb 	bl	80071a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069b4:	2b40      	cmp	r3, #64	@ 0x40
 80069b6:	bf0c      	ite	eq
 80069b8:	2301      	moveq	r3, #1
 80069ba:	2300      	movne	r3, #0
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069c6:	f003 0308 	and.w	r3, r3, #8
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d103      	bne.n	80069d6 <HAL_UART_IRQHandler+0x17a>
 80069ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d04f      	beq.n	8006a76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fb03 	bl	8006fe2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e6:	2b40      	cmp	r3, #64	@ 0x40
 80069e8:	d141      	bne.n	8006a6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3314      	adds	r3, #20
 80069f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80069f8:	e853 3f00 	ldrex	r3, [r3]
 80069fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006a00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3314      	adds	r3, #20
 8006a12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006a16:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006a1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006a22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006a26:	e841 2300 	strex	r3, r2, [r1]
 8006a2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006a2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1d9      	bne.n	80069ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d013      	beq.n	8006a66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a42:	4a7e      	ldr	r2, [pc, #504]	@ (8006c3c <HAL_UART_IRQHandler+0x3e0>)
 8006a44:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7fb ff4a 	bl	80028e4 <HAL_DMA_Abort_IT>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d016      	beq.n	8006a84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006a60:	4610      	mov	r0, r2
 8006a62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a64:	e00e      	b.n	8006a84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f99e 	bl	8006da8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a6c:	e00a      	b.n	8006a84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f99a 	bl	8006da8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a74:	e006      	b.n	8006a84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f996 	bl	8006da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006a82:	e175      	b.n	8006d70 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a84:	bf00      	nop
    return;
 8006a86:	e173      	b.n	8006d70 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	f040 814f 	bne.w	8006d30 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a96:	f003 0310 	and.w	r3, r3, #16
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f000 8148 	beq.w	8006d30 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006aa4:	f003 0310 	and.w	r3, r3, #16
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 8141 	beq.w	8006d30 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60bb      	str	r3, [r7, #8]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	60bb      	str	r3, [r7, #8]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	60bb      	str	r3, [r7, #8]
 8006ac2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ace:	2b40      	cmp	r3, #64	@ 0x40
 8006ad0:	f040 80b6 	bne.w	8006c40 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ae0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 8145 	beq.w	8006d74 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006aee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006af2:	429a      	cmp	r2, r3
 8006af4:	f080 813e 	bcs.w	8006d74 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006afe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b04:	69db      	ldr	r3, [r3, #28]
 8006b06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b0a:	f000 8088 	beq.w	8006c1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	330c      	adds	r3, #12
 8006b14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b1c:	e853 3f00 	ldrex	r3, [r3]
 8006b20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006b24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	330c      	adds	r3, #12
 8006b36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006b3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006b3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b42:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006b46:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b4a:	e841 2300 	strex	r3, r2, [r1]
 8006b4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006b52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1d9      	bne.n	8006b0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	3314      	adds	r3, #20
 8006b60:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b64:	e853 3f00 	ldrex	r3, [r3]
 8006b68:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b6c:	f023 0301 	bic.w	r3, r3, #1
 8006b70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3314      	adds	r3, #20
 8006b7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b7e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b82:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b84:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b86:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b8a:	e841 2300 	strex	r3, r2, [r1]
 8006b8e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1e1      	bne.n	8006b5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	3314      	adds	r3, #20
 8006b9c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ba0:	e853 3f00 	ldrex	r3, [r3]
 8006ba4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006ba6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ba8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3314      	adds	r3, #20
 8006bb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006bba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006bbc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006bc0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006bc2:	e841 2300 	strex	r3, r2, [r1]
 8006bc6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006bc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1e3      	bne.n	8006b96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2220      	movs	r2, #32
 8006bd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	330c      	adds	r3, #12
 8006be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006be6:	e853 3f00 	ldrex	r3, [r3]
 8006bea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006bec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bee:	f023 0310 	bic.w	r3, r3, #16
 8006bf2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	330c      	adds	r3, #12
 8006bfc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006c00:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006c02:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c04:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c08:	e841 2300 	strex	r3, r2, [r1]
 8006c0c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1e3      	bne.n	8006bdc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7fb fdf3 	bl	8002804 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2202      	movs	r2, #2
 8006c22:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	4619      	mov	r1, r3
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f8c1 	bl	8006dbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c3a:	e09b      	b.n	8006d74 <HAL_UART_IRQHandler+0x518>
 8006c3c:	080070a9 	.word	0x080070a9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 808e 	beq.w	8006d78 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006c5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 8089 	beq.w	8006d78 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	330c      	adds	r3, #12
 8006c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c70:	e853 3f00 	ldrex	r3, [r3]
 8006c74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	330c      	adds	r3, #12
 8006c86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006c8a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c92:	e841 2300 	strex	r3, r2, [r1]
 8006c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1e3      	bne.n	8006c66 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3314      	adds	r3, #20
 8006ca4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca8:	e853 3f00 	ldrex	r3, [r3]
 8006cac:	623b      	str	r3, [r7, #32]
   return(result);
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	f023 0301 	bic.w	r3, r3, #1
 8006cb4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3314      	adds	r3, #20
 8006cbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006cc2:	633a      	str	r2, [r7, #48]	@ 0x30
 8006cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cca:	e841 2300 	strex	r3, r2, [r1]
 8006cce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1e3      	bne.n	8006c9e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2220      	movs	r2, #32
 8006cda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	330c      	adds	r3, #12
 8006cea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	e853 3f00 	ldrex	r3, [r3]
 8006cf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f023 0310 	bic.w	r3, r3, #16
 8006cfa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	330c      	adds	r3, #12
 8006d04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006d08:	61fa      	str	r2, [r7, #28]
 8006d0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0c:	69b9      	ldr	r1, [r7, #24]
 8006d0e:	69fa      	ldr	r2, [r7, #28]
 8006d10:	e841 2300 	strex	r3, r2, [r1]
 8006d14:	617b      	str	r3, [r7, #20]
   return(result);
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1e3      	bne.n	8006ce4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2202      	movs	r2, #2
 8006d20:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d26:	4619      	mov	r1, r3
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 f847 	bl	8006dbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d2e:	e023      	b.n	8006d78 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d009      	beq.n	8006d50 <HAL_UART_IRQHandler+0x4f4>
 8006d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d003      	beq.n	8006d50 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f9c1 	bl	80070d0 <UART_Transmit_IT>
    return;
 8006d4e:	e014      	b.n	8006d7a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00e      	beq.n	8006d7a <HAL_UART_IRQHandler+0x51e>
 8006d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d008      	beq.n	8006d7a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 fa01 	bl	8007170 <UART_EndTransmit_IT>
    return;
 8006d6e:	e004      	b.n	8006d7a <HAL_UART_IRQHandler+0x51e>
    return;
 8006d70:	bf00      	nop
 8006d72:	e002      	b.n	8006d7a <HAL_UART_IRQHandler+0x51e>
      return;
 8006d74:	bf00      	nop
 8006d76:	e000      	b.n	8006d7a <HAL_UART_IRQHandler+0x51e>
      return;
 8006d78:	bf00      	nop
  }
}
 8006d7a:	37e8      	adds	r7, #232	@ 0xe8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b090      	sub	sp, #64	@ 0x40
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d137      	bne.n	8006e60 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006df0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006df2:	2200      	movs	r2, #0
 8006df4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	3314      	adds	r3, #20
 8006dfc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e00:	e853 3f00 	ldrex	r3, [r3]
 8006e04:	623b      	str	r3, [r7, #32]
   return(result);
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	3314      	adds	r3, #20
 8006e14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e16:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e1e:	e841 2300 	strex	r3, r2, [r1]
 8006e22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1e5      	bne.n	8006df6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	330c      	adds	r3, #12
 8006e30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	e853 3f00 	ldrex	r3, [r3]
 8006e38:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e40:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	330c      	adds	r3, #12
 8006e48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e4a:	61fa      	str	r2, [r7, #28]
 8006e4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4e:	69b9      	ldr	r1, [r7, #24]
 8006e50:	69fa      	ldr	r2, [r7, #28]
 8006e52:	e841 2300 	strex	r3, r2, [r1]
 8006e56:	617b      	str	r3, [r7, #20]
   return(result);
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1e5      	bne.n	8006e2a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e5e:	e002      	b.n	8006e66 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006e60:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006e62:	f7ff ff8d 	bl	8006d80 <HAL_UART_TxCpltCallback>
}
 8006e66:	bf00      	nop
 8006e68:	3740      	adds	r7, #64	@ 0x40
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b084      	sub	sp, #16
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e7a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f7ff ff89 	bl	8006d94 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e82:	bf00      	nop
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b084      	sub	sp, #16
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e9a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	695b      	ldr	r3, [r3, #20]
 8006ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ea6:	2b80      	cmp	r3, #128	@ 0x80
 8006ea8:	bf0c      	ite	eq
 8006eaa:	2301      	moveq	r3, #1
 8006eac:	2300      	movne	r3, #0
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b21      	cmp	r3, #33	@ 0x21
 8006ebc:	d108      	bne.n	8006ed0 <UART_DMAError+0x46>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d005      	beq.n	8006ed0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006eca:	68b8      	ldr	r0, [r7, #8]
 8006ecc:	f000 f861 	bl	8006f92 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eda:	2b40      	cmp	r3, #64	@ 0x40
 8006edc:	bf0c      	ite	eq
 8006ede:	2301      	moveq	r3, #1
 8006ee0:	2300      	movne	r3, #0
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b22      	cmp	r3, #34	@ 0x22
 8006ef0:	d108      	bne.n	8006f04 <UART_DMAError+0x7a>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d005      	beq.n	8006f04 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	2200      	movs	r2, #0
 8006efc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006efe:	68b8      	ldr	r0, [r7, #8]
 8006f00:	f000 f86f 	bl	8006fe2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f08:	f043 0210 	orr.w	r2, r3, #16
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f10:	68b8      	ldr	r0, [r7, #8]
 8006f12:	f7ff ff49 	bl	8006da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f16:	bf00      	nop
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b085      	sub	sp, #20
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	60f8      	str	r0, [r7, #12]
 8006f26:	60b9      	str	r1, [r7, #8]
 8006f28:	4613      	mov	r3, r2
 8006f2a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	88fa      	ldrh	r2, [r7, #6]
 8006f36:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	88fa      	ldrh	r2, [r7, #6]
 8006f3c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2222      	movs	r2, #34	@ 0x22
 8006f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d007      	beq.n	8006f64 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68da      	ldr	r2, [r3, #12]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f62:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	695a      	ldr	r2, [r3, #20]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f042 0201 	orr.w	r2, r2, #1
 8006f72:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68da      	ldr	r2, [r3, #12]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f042 0220 	orr.w	r2, r2, #32
 8006f82:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3714      	adds	r7, #20
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr

08006f92 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006f92:	b480      	push	{r7}
 8006f94:	b089      	sub	sp, #36	@ 0x24
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	330c      	adds	r3, #12
 8006fa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	e853 3f00 	ldrex	r3, [r3]
 8006fa8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006fb0:	61fb      	str	r3, [r7, #28]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	330c      	adds	r3, #12
 8006fb8:	69fa      	ldr	r2, [r7, #28]
 8006fba:	61ba      	str	r2, [r7, #24]
 8006fbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbe:	6979      	ldr	r1, [r7, #20]
 8006fc0:	69ba      	ldr	r2, [r7, #24]
 8006fc2:	e841 2300 	strex	r3, r2, [r1]
 8006fc6:	613b      	str	r3, [r7, #16]
   return(result);
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1e5      	bne.n	8006f9a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2220      	movs	r2, #32
 8006fd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006fd6:	bf00      	nop
 8006fd8:	3724      	adds	r7, #36	@ 0x24
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b095      	sub	sp, #84	@ 0x54
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	330c      	adds	r3, #12
 8006ff0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ff4:	e853 3f00 	ldrex	r3, [r3]
 8006ff8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007000:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	330c      	adds	r3, #12
 8007008:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800700a:	643a      	str	r2, [r7, #64]	@ 0x40
 800700c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007010:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007012:	e841 2300 	strex	r3, r2, [r1]
 8007016:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1e5      	bne.n	8006fea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3314      	adds	r3, #20
 8007024:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	e853 3f00 	ldrex	r3, [r3]
 800702c:	61fb      	str	r3, [r7, #28]
   return(result);
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	f023 0301 	bic.w	r3, r3, #1
 8007034:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	3314      	adds	r3, #20
 800703c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800703e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007040:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007042:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007044:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007046:	e841 2300 	strex	r3, r2, [r1]
 800704a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800704c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1e5      	bne.n	800701e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007056:	2b01      	cmp	r3, #1
 8007058:	d119      	bne.n	800708e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	330c      	adds	r3, #12
 8007060:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	e853 3f00 	ldrex	r3, [r3]
 8007068:	60bb      	str	r3, [r7, #8]
   return(result);
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	f023 0310 	bic.w	r3, r3, #16
 8007070:	647b      	str	r3, [r7, #68]	@ 0x44
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	330c      	adds	r3, #12
 8007078:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800707a:	61ba      	str	r2, [r7, #24]
 800707c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707e:	6979      	ldr	r1, [r7, #20]
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	e841 2300 	strex	r3, r2, [r1]
 8007086:	613b      	str	r3, [r7, #16]
   return(result);
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1e5      	bne.n	800705a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2220      	movs	r2, #32
 8007092:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800709c:	bf00      	nop
 800709e:	3754      	adds	r7, #84	@ 0x54
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f7ff fe70 	bl	8006da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070c8:	bf00      	nop
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b21      	cmp	r3, #33	@ 0x21
 80070e2:	d13e      	bne.n	8007162 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070ec:	d114      	bne.n	8007118 <UART_Transmit_IT+0x48>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d110      	bne.n	8007118 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	881b      	ldrh	r3, [r3, #0]
 8007100:	461a      	mov	r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800710a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	1c9a      	adds	r2, r3, #2
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	621a      	str	r2, [r3, #32]
 8007116:	e008      	b.n	800712a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a1b      	ldr	r3, [r3, #32]
 800711c:	1c59      	adds	r1, r3, #1
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	6211      	str	r1, [r2, #32]
 8007122:	781a      	ldrb	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800712e:	b29b      	uxth	r3, r3
 8007130:	3b01      	subs	r3, #1
 8007132:	b29b      	uxth	r3, r3
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	4619      	mov	r1, r3
 8007138:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10f      	bne.n	800715e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68da      	ldr	r2, [r3, #12]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800714c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68da      	ldr	r2, [r3, #12]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800715c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800715e:	2300      	movs	r3, #0
 8007160:	e000      	b.n	8007164 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007162:	2302      	movs	r3, #2
  }
}
 8007164:	4618      	mov	r0, r3
 8007166:	3714      	adds	r7, #20
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68da      	ldr	r2, [r3, #12]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007186:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2220      	movs	r2, #32
 800718c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f7ff fdf5 	bl	8006d80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b08c      	sub	sp, #48	@ 0x30
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	2b22      	cmp	r3, #34	@ 0x22
 80071b2:	f040 80ae 	bne.w	8007312 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071be:	d117      	bne.n	80071f0 <UART_Receive_IT+0x50>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d113      	bne.n	80071f0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80071c8:	2300      	movs	r3, #0
 80071ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	b29b      	uxth	r3, r3
 80071da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071de:	b29a      	uxth	r2, r3
 80071e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e8:	1c9a      	adds	r2, r3, #2
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80071ee:	e026      	b.n	800723e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80071f6:	2300      	movs	r3, #0
 80071f8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007202:	d007      	beq.n	8007214 <UART_Receive_IT+0x74>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10a      	bne.n	8007222 <UART_Receive_IT+0x82>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d106      	bne.n	8007222 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	b2da      	uxtb	r2, r3
 800721c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800721e:	701a      	strb	r2, [r3, #0]
 8007220:	e008      	b.n	8007234 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	b2db      	uxtb	r3, r3
 800722a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800722e:	b2da      	uxtb	r2, r3
 8007230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007232:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007238:	1c5a      	adds	r2, r3, #1
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007242:	b29b      	uxth	r3, r3
 8007244:	3b01      	subs	r3, #1
 8007246:	b29b      	uxth	r3, r3
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	4619      	mov	r1, r3
 800724c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800724e:	2b00      	cmp	r3, #0
 8007250:	d15d      	bne.n	800730e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68da      	ldr	r2, [r3, #12]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f022 0220 	bic.w	r2, r2, #32
 8007260:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68da      	ldr	r2, [r3, #12]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007270:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	695a      	ldr	r2, [r3, #20]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f022 0201 	bic.w	r2, r2, #1
 8007280:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2220      	movs	r2, #32
 8007286:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007294:	2b01      	cmp	r3, #1
 8007296:	d135      	bne.n	8007304 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	330c      	adds	r3, #12
 80072a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	e853 3f00 	ldrex	r3, [r3]
 80072ac:	613b      	str	r3, [r7, #16]
   return(result);
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	f023 0310 	bic.w	r3, r3, #16
 80072b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	330c      	adds	r3, #12
 80072bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072be:	623a      	str	r2, [r7, #32]
 80072c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c2:	69f9      	ldr	r1, [r7, #28]
 80072c4:	6a3a      	ldr	r2, [r7, #32]
 80072c6:	e841 2300 	strex	r3, r2, [r1]
 80072ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1e5      	bne.n	800729e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 0310 	and.w	r3, r3, #16
 80072dc:	2b10      	cmp	r3, #16
 80072de:	d10a      	bne.n	80072f6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072e0:	2300      	movs	r3, #0
 80072e2:	60fb      	str	r3, [r7, #12]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	60fb      	str	r3, [r7, #12]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	60fb      	str	r3, [r7, #12]
 80072f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80072fa:	4619      	mov	r1, r3
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f7ff fd5d 	bl	8006dbc <HAL_UARTEx_RxEventCallback>
 8007302:	e002      	b.n	800730a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f7f9 fee3 	bl	80010d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800730a:	2300      	movs	r3, #0
 800730c:	e002      	b.n	8007314 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800730e:	2300      	movs	r3, #0
 8007310:	e000      	b.n	8007314 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007312:	2302      	movs	r3, #2
  }
}
 8007314:	4618      	mov	r0, r3
 8007316:	3730      	adds	r7, #48	@ 0x30
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800731c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007320:	b0c0      	sub	sp, #256	@ 0x100
 8007322:	af00      	add	r7, sp, #0
 8007324:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007338:	68d9      	ldr	r1, [r3, #12]
 800733a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	ea40 0301 	orr.w	r3, r0, r1
 8007344:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800734a:	689a      	ldr	r2, [r3, #8]
 800734c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	431a      	orrs	r2, r3
 8007354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	431a      	orrs	r2, r3
 800735c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007360:	69db      	ldr	r3, [r3, #28]
 8007362:	4313      	orrs	r3, r2
 8007364:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007374:	f021 010c 	bic.w	r1, r1, #12
 8007378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007382:	430b      	orrs	r3, r1
 8007384:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007396:	6999      	ldr	r1, [r3, #24]
 8007398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	ea40 0301 	orr.w	r3, r0, r1
 80073a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80073a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	4b8f      	ldr	r3, [pc, #572]	@ (80075e8 <UART_SetConfig+0x2cc>)
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d005      	beq.n	80073bc <UART_SetConfig+0xa0>
 80073b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	4b8d      	ldr	r3, [pc, #564]	@ (80075ec <UART_SetConfig+0x2d0>)
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d104      	bne.n	80073c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80073bc:	f7fe fcec 	bl	8005d98 <HAL_RCC_GetPCLK2Freq>
 80073c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80073c4:	e003      	b.n	80073ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80073c6:	f7fe fcd3 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 80073ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073d2:	69db      	ldr	r3, [r3, #28]
 80073d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073d8:	f040 810c 	bne.w	80075f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073e0:	2200      	movs	r2, #0
 80073e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80073e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80073ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80073ee:	4622      	mov	r2, r4
 80073f0:	462b      	mov	r3, r5
 80073f2:	1891      	adds	r1, r2, r2
 80073f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80073f6:	415b      	adcs	r3, r3
 80073f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80073fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80073fe:	4621      	mov	r1, r4
 8007400:	eb12 0801 	adds.w	r8, r2, r1
 8007404:	4629      	mov	r1, r5
 8007406:	eb43 0901 	adc.w	r9, r3, r1
 800740a:	f04f 0200 	mov.w	r2, #0
 800740e:	f04f 0300 	mov.w	r3, #0
 8007412:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007416:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800741a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800741e:	4690      	mov	r8, r2
 8007420:	4699      	mov	r9, r3
 8007422:	4623      	mov	r3, r4
 8007424:	eb18 0303 	adds.w	r3, r8, r3
 8007428:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800742c:	462b      	mov	r3, r5
 800742e:	eb49 0303 	adc.w	r3, r9, r3
 8007432:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007442:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007446:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800744a:	460b      	mov	r3, r1
 800744c:	18db      	adds	r3, r3, r3
 800744e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007450:	4613      	mov	r3, r2
 8007452:	eb42 0303 	adc.w	r3, r2, r3
 8007456:	657b      	str	r3, [r7, #84]	@ 0x54
 8007458:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800745c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007460:	f7f8 feba 	bl	80001d8 <__aeabi_uldivmod>
 8007464:	4602      	mov	r2, r0
 8007466:	460b      	mov	r3, r1
 8007468:	4b61      	ldr	r3, [pc, #388]	@ (80075f0 <UART_SetConfig+0x2d4>)
 800746a:	fba3 2302 	umull	r2, r3, r3, r2
 800746e:	095b      	lsrs	r3, r3, #5
 8007470:	011c      	lsls	r4, r3, #4
 8007472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007476:	2200      	movs	r2, #0
 8007478:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800747c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007480:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007484:	4642      	mov	r2, r8
 8007486:	464b      	mov	r3, r9
 8007488:	1891      	adds	r1, r2, r2
 800748a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800748c:	415b      	adcs	r3, r3
 800748e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007490:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007494:	4641      	mov	r1, r8
 8007496:	eb12 0a01 	adds.w	sl, r2, r1
 800749a:	4649      	mov	r1, r9
 800749c:	eb43 0b01 	adc.w	fp, r3, r1
 80074a0:	f04f 0200 	mov.w	r2, #0
 80074a4:	f04f 0300 	mov.w	r3, #0
 80074a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80074ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80074b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074b4:	4692      	mov	sl, r2
 80074b6:	469b      	mov	fp, r3
 80074b8:	4643      	mov	r3, r8
 80074ba:	eb1a 0303 	adds.w	r3, sl, r3
 80074be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80074c2:	464b      	mov	r3, r9
 80074c4:	eb4b 0303 	adc.w	r3, fp, r3
 80074c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80074cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80074d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80074dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80074e0:	460b      	mov	r3, r1
 80074e2:	18db      	adds	r3, r3, r3
 80074e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80074e6:	4613      	mov	r3, r2
 80074e8:	eb42 0303 	adc.w	r3, r2, r3
 80074ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80074ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80074f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80074f6:	f7f8 fe6f 	bl	80001d8 <__aeabi_uldivmod>
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	4611      	mov	r1, r2
 8007500:	4b3b      	ldr	r3, [pc, #236]	@ (80075f0 <UART_SetConfig+0x2d4>)
 8007502:	fba3 2301 	umull	r2, r3, r3, r1
 8007506:	095b      	lsrs	r3, r3, #5
 8007508:	2264      	movs	r2, #100	@ 0x64
 800750a:	fb02 f303 	mul.w	r3, r2, r3
 800750e:	1acb      	subs	r3, r1, r3
 8007510:	00db      	lsls	r3, r3, #3
 8007512:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007516:	4b36      	ldr	r3, [pc, #216]	@ (80075f0 <UART_SetConfig+0x2d4>)
 8007518:	fba3 2302 	umull	r2, r3, r3, r2
 800751c:	095b      	lsrs	r3, r3, #5
 800751e:	005b      	lsls	r3, r3, #1
 8007520:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007524:	441c      	add	r4, r3
 8007526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800752a:	2200      	movs	r2, #0
 800752c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007530:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007534:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007538:	4642      	mov	r2, r8
 800753a:	464b      	mov	r3, r9
 800753c:	1891      	adds	r1, r2, r2
 800753e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007540:	415b      	adcs	r3, r3
 8007542:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007544:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007548:	4641      	mov	r1, r8
 800754a:	1851      	adds	r1, r2, r1
 800754c:	6339      	str	r1, [r7, #48]	@ 0x30
 800754e:	4649      	mov	r1, r9
 8007550:	414b      	adcs	r3, r1
 8007552:	637b      	str	r3, [r7, #52]	@ 0x34
 8007554:	f04f 0200 	mov.w	r2, #0
 8007558:	f04f 0300 	mov.w	r3, #0
 800755c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007560:	4659      	mov	r1, fp
 8007562:	00cb      	lsls	r3, r1, #3
 8007564:	4651      	mov	r1, sl
 8007566:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800756a:	4651      	mov	r1, sl
 800756c:	00ca      	lsls	r2, r1, #3
 800756e:	4610      	mov	r0, r2
 8007570:	4619      	mov	r1, r3
 8007572:	4603      	mov	r3, r0
 8007574:	4642      	mov	r2, r8
 8007576:	189b      	adds	r3, r3, r2
 8007578:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800757c:	464b      	mov	r3, r9
 800757e:	460a      	mov	r2, r1
 8007580:	eb42 0303 	adc.w	r3, r2, r3
 8007584:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007594:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007598:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800759c:	460b      	mov	r3, r1
 800759e:	18db      	adds	r3, r3, r3
 80075a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075a2:	4613      	mov	r3, r2
 80075a4:	eb42 0303 	adc.w	r3, r2, r3
 80075a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80075ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80075b2:	f7f8 fe11 	bl	80001d8 <__aeabi_uldivmod>
 80075b6:	4602      	mov	r2, r0
 80075b8:	460b      	mov	r3, r1
 80075ba:	4b0d      	ldr	r3, [pc, #52]	@ (80075f0 <UART_SetConfig+0x2d4>)
 80075bc:	fba3 1302 	umull	r1, r3, r3, r2
 80075c0:	095b      	lsrs	r3, r3, #5
 80075c2:	2164      	movs	r1, #100	@ 0x64
 80075c4:	fb01 f303 	mul.w	r3, r1, r3
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	00db      	lsls	r3, r3, #3
 80075cc:	3332      	adds	r3, #50	@ 0x32
 80075ce:	4a08      	ldr	r2, [pc, #32]	@ (80075f0 <UART_SetConfig+0x2d4>)
 80075d0:	fba2 2303 	umull	r2, r3, r2, r3
 80075d4:	095b      	lsrs	r3, r3, #5
 80075d6:	f003 0207 	and.w	r2, r3, #7
 80075da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4422      	add	r2, r4
 80075e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80075e4:	e106      	b.n	80077f4 <UART_SetConfig+0x4d8>
 80075e6:	bf00      	nop
 80075e8:	40011000 	.word	0x40011000
 80075ec:	40011400 	.word	0x40011400
 80075f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075f8:	2200      	movs	r2, #0
 80075fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80075fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007602:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007606:	4642      	mov	r2, r8
 8007608:	464b      	mov	r3, r9
 800760a:	1891      	adds	r1, r2, r2
 800760c:	6239      	str	r1, [r7, #32]
 800760e:	415b      	adcs	r3, r3
 8007610:	627b      	str	r3, [r7, #36]	@ 0x24
 8007612:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007616:	4641      	mov	r1, r8
 8007618:	1854      	adds	r4, r2, r1
 800761a:	4649      	mov	r1, r9
 800761c:	eb43 0501 	adc.w	r5, r3, r1
 8007620:	f04f 0200 	mov.w	r2, #0
 8007624:	f04f 0300 	mov.w	r3, #0
 8007628:	00eb      	lsls	r3, r5, #3
 800762a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800762e:	00e2      	lsls	r2, r4, #3
 8007630:	4614      	mov	r4, r2
 8007632:	461d      	mov	r5, r3
 8007634:	4643      	mov	r3, r8
 8007636:	18e3      	adds	r3, r4, r3
 8007638:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800763c:	464b      	mov	r3, r9
 800763e:	eb45 0303 	adc.w	r3, r5, r3
 8007642:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007652:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007656:	f04f 0200 	mov.w	r2, #0
 800765a:	f04f 0300 	mov.w	r3, #0
 800765e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007662:	4629      	mov	r1, r5
 8007664:	008b      	lsls	r3, r1, #2
 8007666:	4621      	mov	r1, r4
 8007668:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800766c:	4621      	mov	r1, r4
 800766e:	008a      	lsls	r2, r1, #2
 8007670:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007674:	f7f8 fdb0 	bl	80001d8 <__aeabi_uldivmod>
 8007678:	4602      	mov	r2, r0
 800767a:	460b      	mov	r3, r1
 800767c:	4b60      	ldr	r3, [pc, #384]	@ (8007800 <UART_SetConfig+0x4e4>)
 800767e:	fba3 2302 	umull	r2, r3, r3, r2
 8007682:	095b      	lsrs	r3, r3, #5
 8007684:	011c      	lsls	r4, r3, #4
 8007686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800768a:	2200      	movs	r2, #0
 800768c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007690:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007694:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007698:	4642      	mov	r2, r8
 800769a:	464b      	mov	r3, r9
 800769c:	1891      	adds	r1, r2, r2
 800769e:	61b9      	str	r1, [r7, #24]
 80076a0:	415b      	adcs	r3, r3
 80076a2:	61fb      	str	r3, [r7, #28]
 80076a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076a8:	4641      	mov	r1, r8
 80076aa:	1851      	adds	r1, r2, r1
 80076ac:	6139      	str	r1, [r7, #16]
 80076ae:	4649      	mov	r1, r9
 80076b0:	414b      	adcs	r3, r1
 80076b2:	617b      	str	r3, [r7, #20]
 80076b4:	f04f 0200 	mov.w	r2, #0
 80076b8:	f04f 0300 	mov.w	r3, #0
 80076bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80076c0:	4659      	mov	r1, fp
 80076c2:	00cb      	lsls	r3, r1, #3
 80076c4:	4651      	mov	r1, sl
 80076c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076ca:	4651      	mov	r1, sl
 80076cc:	00ca      	lsls	r2, r1, #3
 80076ce:	4610      	mov	r0, r2
 80076d0:	4619      	mov	r1, r3
 80076d2:	4603      	mov	r3, r0
 80076d4:	4642      	mov	r2, r8
 80076d6:	189b      	adds	r3, r3, r2
 80076d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80076dc:	464b      	mov	r3, r9
 80076de:	460a      	mov	r2, r1
 80076e0:	eb42 0303 	adc.w	r3, r2, r3
 80076e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80076e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80076f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80076f4:	f04f 0200 	mov.w	r2, #0
 80076f8:	f04f 0300 	mov.w	r3, #0
 80076fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007700:	4649      	mov	r1, r9
 8007702:	008b      	lsls	r3, r1, #2
 8007704:	4641      	mov	r1, r8
 8007706:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800770a:	4641      	mov	r1, r8
 800770c:	008a      	lsls	r2, r1, #2
 800770e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007712:	f7f8 fd61 	bl	80001d8 <__aeabi_uldivmod>
 8007716:	4602      	mov	r2, r0
 8007718:	460b      	mov	r3, r1
 800771a:	4611      	mov	r1, r2
 800771c:	4b38      	ldr	r3, [pc, #224]	@ (8007800 <UART_SetConfig+0x4e4>)
 800771e:	fba3 2301 	umull	r2, r3, r3, r1
 8007722:	095b      	lsrs	r3, r3, #5
 8007724:	2264      	movs	r2, #100	@ 0x64
 8007726:	fb02 f303 	mul.w	r3, r2, r3
 800772a:	1acb      	subs	r3, r1, r3
 800772c:	011b      	lsls	r3, r3, #4
 800772e:	3332      	adds	r3, #50	@ 0x32
 8007730:	4a33      	ldr	r2, [pc, #204]	@ (8007800 <UART_SetConfig+0x4e4>)
 8007732:	fba2 2303 	umull	r2, r3, r2, r3
 8007736:	095b      	lsrs	r3, r3, #5
 8007738:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800773c:	441c      	add	r4, r3
 800773e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007742:	2200      	movs	r2, #0
 8007744:	673b      	str	r3, [r7, #112]	@ 0x70
 8007746:	677a      	str	r2, [r7, #116]	@ 0x74
 8007748:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800774c:	4642      	mov	r2, r8
 800774e:	464b      	mov	r3, r9
 8007750:	1891      	adds	r1, r2, r2
 8007752:	60b9      	str	r1, [r7, #8]
 8007754:	415b      	adcs	r3, r3
 8007756:	60fb      	str	r3, [r7, #12]
 8007758:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800775c:	4641      	mov	r1, r8
 800775e:	1851      	adds	r1, r2, r1
 8007760:	6039      	str	r1, [r7, #0]
 8007762:	4649      	mov	r1, r9
 8007764:	414b      	adcs	r3, r1
 8007766:	607b      	str	r3, [r7, #4]
 8007768:	f04f 0200 	mov.w	r2, #0
 800776c:	f04f 0300 	mov.w	r3, #0
 8007770:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007774:	4659      	mov	r1, fp
 8007776:	00cb      	lsls	r3, r1, #3
 8007778:	4651      	mov	r1, sl
 800777a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800777e:	4651      	mov	r1, sl
 8007780:	00ca      	lsls	r2, r1, #3
 8007782:	4610      	mov	r0, r2
 8007784:	4619      	mov	r1, r3
 8007786:	4603      	mov	r3, r0
 8007788:	4642      	mov	r2, r8
 800778a:	189b      	adds	r3, r3, r2
 800778c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800778e:	464b      	mov	r3, r9
 8007790:	460a      	mov	r2, r1
 8007792:	eb42 0303 	adc.w	r3, r2, r3
 8007796:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80077a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80077a4:	f04f 0200 	mov.w	r2, #0
 80077a8:	f04f 0300 	mov.w	r3, #0
 80077ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80077b0:	4649      	mov	r1, r9
 80077b2:	008b      	lsls	r3, r1, #2
 80077b4:	4641      	mov	r1, r8
 80077b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077ba:	4641      	mov	r1, r8
 80077bc:	008a      	lsls	r2, r1, #2
 80077be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80077c2:	f7f8 fd09 	bl	80001d8 <__aeabi_uldivmod>
 80077c6:	4602      	mov	r2, r0
 80077c8:	460b      	mov	r3, r1
 80077ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007800 <UART_SetConfig+0x4e4>)
 80077cc:	fba3 1302 	umull	r1, r3, r3, r2
 80077d0:	095b      	lsrs	r3, r3, #5
 80077d2:	2164      	movs	r1, #100	@ 0x64
 80077d4:	fb01 f303 	mul.w	r3, r1, r3
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	011b      	lsls	r3, r3, #4
 80077dc:	3332      	adds	r3, #50	@ 0x32
 80077de:	4a08      	ldr	r2, [pc, #32]	@ (8007800 <UART_SetConfig+0x4e4>)
 80077e0:	fba2 2303 	umull	r2, r3, r2, r3
 80077e4:	095b      	lsrs	r3, r3, #5
 80077e6:	f003 020f 	and.w	r2, r3, #15
 80077ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4422      	add	r2, r4
 80077f2:	609a      	str	r2, [r3, #8]
}
 80077f4:	bf00      	nop
 80077f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80077fa:	46bd      	mov	sp, r7
 80077fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007800:	51eb851f 	.word	0x51eb851f

08007804 <memset>:
 8007804:	4402      	add	r2, r0
 8007806:	4603      	mov	r3, r0
 8007808:	4293      	cmp	r3, r2
 800780a:	d100      	bne.n	800780e <memset+0xa>
 800780c:	4770      	bx	lr
 800780e:	f803 1b01 	strb.w	r1, [r3], #1
 8007812:	e7f9      	b.n	8007808 <memset+0x4>

08007814 <__libc_init_array>:
 8007814:	b570      	push	{r4, r5, r6, lr}
 8007816:	4d0d      	ldr	r5, [pc, #52]	@ (800784c <__libc_init_array+0x38>)
 8007818:	4c0d      	ldr	r4, [pc, #52]	@ (8007850 <__libc_init_array+0x3c>)
 800781a:	1b64      	subs	r4, r4, r5
 800781c:	10a4      	asrs	r4, r4, #2
 800781e:	2600      	movs	r6, #0
 8007820:	42a6      	cmp	r6, r4
 8007822:	d109      	bne.n	8007838 <__libc_init_array+0x24>
 8007824:	4d0b      	ldr	r5, [pc, #44]	@ (8007854 <__libc_init_array+0x40>)
 8007826:	4c0c      	ldr	r4, [pc, #48]	@ (8007858 <__libc_init_array+0x44>)
 8007828:	f000 f826 	bl	8007878 <_init>
 800782c:	1b64      	subs	r4, r4, r5
 800782e:	10a4      	asrs	r4, r4, #2
 8007830:	2600      	movs	r6, #0
 8007832:	42a6      	cmp	r6, r4
 8007834:	d105      	bne.n	8007842 <__libc_init_array+0x2e>
 8007836:	bd70      	pop	{r4, r5, r6, pc}
 8007838:	f855 3b04 	ldr.w	r3, [r5], #4
 800783c:	4798      	blx	r3
 800783e:	3601      	adds	r6, #1
 8007840:	e7ee      	b.n	8007820 <__libc_init_array+0xc>
 8007842:	f855 3b04 	ldr.w	r3, [r5], #4
 8007846:	4798      	blx	r3
 8007848:	3601      	adds	r6, #1
 800784a:	e7f2      	b.n	8007832 <__libc_init_array+0x1e>
 800784c:	080078c0 	.word	0x080078c0
 8007850:	080078c0 	.word	0x080078c0
 8007854:	080078c0 	.word	0x080078c0
 8007858:	080078c4 	.word	0x080078c4

0800785c <memcpy>:
 800785c:	440a      	add	r2, r1
 800785e:	4291      	cmp	r1, r2
 8007860:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007864:	d100      	bne.n	8007868 <memcpy+0xc>
 8007866:	4770      	bx	lr
 8007868:	b510      	push	{r4, lr}
 800786a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800786e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007872:	4291      	cmp	r1, r2
 8007874:	d1f9      	bne.n	800786a <memcpy+0xe>
 8007876:	bd10      	pop	{r4, pc}

08007878 <_init>:
 8007878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787a:	bf00      	nop
 800787c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800787e:	bc08      	pop	{r3}
 8007880:	469e      	mov	lr, r3
 8007882:	4770      	bx	lr

08007884 <_fini>:
 8007884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007886:	bf00      	nop
 8007888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800788a:	bc08      	pop	{r3}
 800788c:	469e      	mov	lr, r3
 800788e:	4770      	bx	lr
