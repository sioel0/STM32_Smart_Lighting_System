
Smart_Lighting_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075e8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08007780  08007780  00008780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077a8  080077a8  00009020  2**0
                  CONTENTS
  4 .ARM          00000008  080077a8  080077a8  000087a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077b0  080077b0  00009020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077b0  080077b0  000087b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080077b4  080077b4  000087b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  080077b8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000020  080077d8  00009020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  080077d8  000092c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000142ab  00000000  00000000  00009050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fe2  00000000  00000000  0001d2fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  000202e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e90  00000000  00000000  00021590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018de3  00000000  00000000  00022420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a5b  00000000  00000000  0003b203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d0ab  00000000  00000000  00052c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000efd09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cc0  00000000  00000000  000efd4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000f4a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000020 	.word	0x20000020
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007768 	.word	0x08007768

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000024 	.word	0x20000024
 80001d4:	08007768 	.word	0x08007768

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == PANIC_BUTTON_PIN) {
 80004d2:	88fb      	ldrh	r3, [r7, #6]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d109      	bne.n	80004ec <HAL_GPIO_EXTI_Callback+0x24>
		if(panic_is_active()) {
 80004d8:	f001 f8ec 	bl	80016b4 <panic_is_active>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d004      	beq.n	80004ec <HAL_GPIO_EXTI_Callback+0x24>
			panic_button_set();
 80004e2:	f001 f951 	bl	8001788 <panic_button_set>
			comm_send_data(panic_packet);
 80004e6:	4806      	ldr	r0, [pc, #24]	@ (8000500 <HAL_GPIO_EXTI_Callback+0x38>)
 80004e8:	f000 fdfe 	bl	80010e8 <comm_send_data>
		}
	}
	if(GPIO_Pin == MOVEMENT_SENSOR_PIN) {
 80004ec:	88fb      	ldrh	r3, [r7, #6]
 80004ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80004f2:	d101      	bne.n	80004f8 <HAL_GPIO_EXTI_Callback+0x30>
		sensors_movement_detected();
 80004f4:	f001 fa44 	bl	8001980 <sensors_movement_detected>
	}
}
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	08007784 	.word	0x08007784

08000504 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) {
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a10      	ldr	r2, [pc, #64]	@ (8000554 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d101      	bne.n	800051a <HAL_TIM_PeriodElapsedCallback+0x16>
		panic_timer_elapsed();
 8000516:	f001 f9df 	bl	80018d8 <panic_timer_elapsed>
	}
	if(htim->Instance == TIM4) {
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a0e      	ldr	r2, [pc, #56]	@ (8000558 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d101      	bne.n	8000528 <HAL_TIM_PeriodElapsedCallback+0x24>
		light_level_check();
 8000524:	f000 ff7c 	bl	8001420 <light_level_check>
	}
	if(htim->Instance == TIM9) {
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a0b      	ldr	r2, [pc, #44]	@ (800055c <HAL_TIM_PeriodElapsedCallback+0x58>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d104      	bne.n	800053c <HAL_TIM_PeriodElapsedCallback+0x38>
		sensors_movement_detected_reset();
 8000532:	f001 fa3d 	bl	80019b0 <sensors_movement_detected_reset>
		HAL_TIM_Base_Stop_IT(&htim9);
 8000536:	480a      	ldr	r0, [pc, #40]	@ (8000560 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000538:	f005 fc6c 	bl	8005e14 <HAL_TIM_Base_Stop_IT>
	}
	if(htim->Instance == TIM11) {
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a08      	ldr	r2, [pc, #32]	@ (8000564 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d102      	bne.n	800054c <HAL_TIM_PeriodElapsedCallback+0x48>
		comm_send_data(periodic_packet);
 8000546:	4808      	ldr	r0, [pc, #32]	@ (8000568 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000548:	f000 fdce 	bl	80010e8 <comm_send_data>
	}
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40000400 	.word	0x40000400
 8000558:	40000800 	.word	0x40000800
 800055c:	40014000 	.word	0x40014000
 8000560:	20000168 	.word	0x20000168
 8000564:	40014800 	.word	0x40014800
 8000568:	08007780 	.word	0x08007780

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f001 fa2a 	bl	80019c8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f820 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 fa4a 	bl	8000a10 <MX_GPIO_Init>
  MX_DMA_Init();
 800057c:	f000 fa28 	bl	80009d0 <MX_DMA_Init>
  MX_TIM3_Init();
 8000580:	f000 f902 	bl	8000788 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000584:	f000 f880 	bl	8000688 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000588:	f000 f8d0 	bl	800072c <MX_I2C1_Init>
  MX_TIM9_Init();
 800058c:	f000 f998 	bl	80008c0 <MX_TIM9_Init>
  MX_TIM4_Init();
 8000590:	f000 f948 	bl	8000824 <MX_TIM4_Init>
  MX_TIM11_Init();
 8000594:	f000 f9ce 	bl	8000934 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 8000598:	f000 f9f0 	bl	800097c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  light_init();
 800059c:	f000 fe65 	bl	800126a <light_init>
  panic_activate();
 80005a0:	f001 f894 	bl	80016cc <panic_activate>
  light_deactivate();
 80005a4:	f000 ff2c 	bl	8001400 <light_deactivate>
  comm_init();
 80005a8:	f000 fdae 	bl	8001108 <comm_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	panic_main();
 80005ac:	f001 f8a6 	bl	80016fc <panic_main>
	light_main();
 80005b0:	f000 ff42 	bl	8001438 <light_main>
	panic_main();
 80005b4:	bf00      	nop
 80005b6:	e7f9      	b.n	80005ac <main+0x40>

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	@ 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2230      	movs	r2, #48	@ 0x30
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f007 f894 	bl	80076f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	4b27      	ldr	r3, [pc, #156]	@ (8000680 <SystemClock_Config+0xc8>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e4:	4a26      	ldr	r2, [pc, #152]	@ (8000680 <SystemClock_Config+0xc8>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80005ec:	4b24      	ldr	r3, [pc, #144]	@ (8000680 <SystemClock_Config+0xc8>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	4b21      	ldr	r3, [pc, #132]	@ (8000684 <SystemClock_Config+0xcc>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a20      	ldr	r2, [pc, #128]	@ (8000684 <SystemClock_Config+0xcc>)
 8000602:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b1e      	ldr	r3, [pc, #120]	@ (8000684 <SystemClock_Config+0xcc>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000614:	2301      	movs	r3, #1
 8000616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000618:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800061c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000626:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000628:	2304      	movs	r3, #4
 800062a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800062c:	23c0      	movs	r3, #192	@ 0xc0
 800062e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000630:	2304      	movs	r3, #4
 8000632:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000634:	2308      	movs	r3, #8
 8000636:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 0320 	add.w	r3, r7, #32
 800063c:	4618      	mov	r0, r3
 800063e:	f004 fe9f 	bl	8005380 <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000648:	f000 faa0 	bl	8000b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000650:	2302      	movs	r3, #2
 8000652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000658:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800065c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	2103      	movs	r1, #3
 8000668:	4618      	mov	r0, r3
 800066a:	f005 f901 	bl	8005870 <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000674:	f000 fa8a 	bl	8000b8c <Error_Handler>
  }
}
 8000678:	bf00      	nop
 800067a:	3750      	adds	r7, #80	@ 0x50
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800068e:	463b      	mov	r3, r7
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800069a:	4b21      	ldr	r3, [pc, #132]	@ (8000720 <MX_ADC1_Init+0x98>)
 800069c:	4a21      	ldr	r2, [pc, #132]	@ (8000724 <MX_ADC1_Init+0x9c>)
 800069e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000720 <MX_ADC1_Init+0x98>)
 80006a2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000720 <MX_ADC1_Init+0x98>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000720 <MX_ADC1_Init+0x98>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000720 <MX_ADC1_Init+0x98>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ba:	4b19      	ldr	r3, [pc, #100]	@ (8000720 <MX_ADC1_Init+0x98>)
 80006bc:	2200      	movs	r2, #0
 80006be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006c2:	4b17      	ldr	r3, [pc, #92]	@ (8000720 <MX_ADC1_Init+0x98>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c8:	4b15      	ldr	r3, [pc, #84]	@ (8000720 <MX_ADC1_Init+0x98>)
 80006ca:	4a17      	ldr	r2, [pc, #92]	@ (8000728 <MX_ADC1_Init+0xa0>)
 80006cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ce:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <MX_ADC1_Init+0x98>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <MX_ADC1_Init+0x98>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006da:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_ADC1_Init+0x98>)
 80006dc:	2200      	movs	r2, #0
 80006de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <MX_ADC1_Init+0x98>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e8:	480d      	ldr	r0, [pc, #52]	@ (8000720 <MX_ADC1_Init+0x98>)
 80006ea:	f001 f9df 	bl	8001aac <HAL_ADC_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006f4:	f000 fa4a 	bl	8000b8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006fc:	2301      	movs	r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000700:	2307      	movs	r3, #7
 8000702:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	4805      	ldr	r0, [pc, #20]	@ (8000720 <MX_ADC1_Init+0x98>)
 800070a:	f001 fb93 	bl	8001e34 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000714:	f000 fa3a 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	2000003c 	.word	0x2000003c
 8000724:	40012000 	.word	0x40012000
 8000728:	0f000001 	.word	0x0f000001

0800072c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000730:	4b12      	ldr	r3, [pc, #72]	@ (800077c <MX_I2C1_Init+0x50>)
 8000732:	4a13      	ldr	r2, [pc, #76]	@ (8000780 <MX_I2C1_Init+0x54>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000736:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_I2C1_Init+0x50>)
 8000738:	4a12      	ldr	r2, [pc, #72]	@ (8000784 <MX_I2C1_Init+0x58>)
 800073a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800073c:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <MX_I2C1_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_I2C1_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_I2C1_Init+0x50>)
 800074a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800074e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000750:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <MX_I2C1_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000756:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_I2C1_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075c:	4b07      	ldr	r3, [pc, #28]	@ (800077c <MX_I2C1_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000762:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_I2C1_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	@ (800077c <MX_I2C1_Init+0x50>)
 800076a:	f002 fc83 	bl	8003074 <HAL_I2C_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000774:	f000 fa0a 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000084 	.word	0x20000084
 8000780:	40005400 	.word	0x40005400
 8000784:	00061a80 	.word	0x00061a80

08000788 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078e:	f107 0308 	add.w	r3, r7, #8
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079c:	463b      	mov	r3, r7
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007a4:	4b1d      	ldr	r3, [pc, #116]	@ (800081c <MX_TIM3_Init+0x94>)
 80007a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000820 <MX_TIM3_Init+0x98>)
 80007a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47999;
 80007aa:	4b1c      	ldr	r3, [pc, #112]	@ (800081c <MX_TIM3_Init+0x94>)
 80007ac:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80007b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	@ (800081c <MX_TIM3_Init+0x94>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80007b8:	4b18      	ldr	r3, [pc, #96]	@ (800081c <MX_TIM3_Init+0x94>)
 80007ba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c0:	4b16      	ldr	r3, [pc, #88]	@ (800081c <MX_TIM3_Init+0x94>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c6:	4b15      	ldr	r3, [pc, #84]	@ (800081c <MX_TIM3_Init+0x94>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007cc:	4813      	ldr	r0, [pc, #76]	@ (800081c <MX_TIM3_Init+0x94>)
 80007ce:	f005 fa6f 	bl	8005cb0 <HAL_TIM_Base_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80007d8:	f000 f9d8 	bl	8000b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	4619      	mov	r1, r3
 80007e8:	480c      	ldr	r0, [pc, #48]	@ (800081c <MX_TIM3_Init+0x94>)
 80007ea:	f005 fc32 	bl	8006052 <HAL_TIM_ConfigClockSource>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80007f4:	f000 f9ca 	bl	8000b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f8:	2300      	movs	r3, #0
 80007fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000800:	463b      	mov	r3, r7
 8000802:	4619      	mov	r1, r3
 8000804:	4805      	ldr	r0, [pc, #20]	@ (800081c <MX_TIM3_Init+0x94>)
 8000806:	f005 fe39 	bl	800647c <HAL_TIMEx_MasterConfigSynchronization>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000810:	f000 f9bc 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	3718      	adds	r7, #24
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200000d8 	.word	0x200000d8
 8000820:	40000400 	.word	0x40000400

08000824 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800082a:	f107 0308 	add.w	r3, r7, #8
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000838:	463b      	mov	r3, r7
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000840:	4b1d      	ldr	r3, [pc, #116]	@ (80008b8 <MX_TIM4_Init+0x94>)
 8000842:	4a1e      	ldr	r2, [pc, #120]	@ (80008bc <MX_TIM4_Init+0x98>)
 8000844:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47999;
 8000846:	4b1c      	ldr	r3, [pc, #112]	@ (80008b8 <MX_TIM4_Init+0x94>)
 8000848:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 800084c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084e:	4b1a      	ldr	r3, [pc, #104]	@ (80008b8 <MX_TIM4_Init+0x94>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8000854:	4b18      	ldr	r3, [pc, #96]	@ (80008b8 <MX_TIM4_Init+0x94>)
 8000856:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800085a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800085c:	4b16      	ldr	r3, [pc, #88]	@ (80008b8 <MX_TIM4_Init+0x94>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000862:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <MX_TIM4_Init+0x94>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000868:	4813      	ldr	r0, [pc, #76]	@ (80008b8 <MX_TIM4_Init+0x94>)
 800086a:	f005 fa21 	bl	8005cb0 <HAL_TIM_Base_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000874:	f000 f98a 	bl	8000b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000878:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800087c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800087e:	f107 0308 	add.w	r3, r7, #8
 8000882:	4619      	mov	r1, r3
 8000884:	480c      	ldr	r0, [pc, #48]	@ (80008b8 <MX_TIM4_Init+0x94>)
 8000886:	f005 fbe4 	bl	8006052 <HAL_TIM_ConfigClockSource>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000890:	f000 f97c 	bl	8000b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000894:	2300      	movs	r3, #0
 8000896:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000898:	2300      	movs	r3, #0
 800089a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800089c:	463b      	mov	r3, r7
 800089e:	4619      	mov	r1, r3
 80008a0:	4805      	ldr	r0, [pc, #20]	@ (80008b8 <MX_TIM4_Init+0x94>)
 80008a2:	f005 fdeb 	bl	800647c <HAL_TIMEx_MasterConfigSynchronization>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80008ac:	f000 f96e 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000120 	.word	0x20000120
 80008bc:	40000800 	.word	0x40000800

080008c0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008c6:	463b      	mov	r3, r7
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80008d2:	4b16      	ldr	r3, [pc, #88]	@ (800092c <MX_TIM9_Init+0x6c>)
 80008d4:	4a16      	ldr	r2, [pc, #88]	@ (8000930 <MX_TIM9_Init+0x70>)
 80008d6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 19999;
 80008d8:	4b14      	ldr	r3, [pc, #80]	@ (800092c <MX_TIM9_Init+0x6c>)
 80008da:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80008de:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e0:	4b12      	ldr	r3, [pc, #72]	@ (800092c <MX_TIM9_Init+0x6c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 47999;
 80008e6:	4b11      	ldr	r3, [pc, #68]	@ (800092c <MX_TIM9_Init+0x6c>)
 80008e8:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80008ec:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ee:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <MX_TIM9_Init+0x6c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f4:	4b0d      	ldr	r3, [pc, #52]	@ (800092c <MX_TIM9_Init+0x6c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80008fa:	480c      	ldr	r0, [pc, #48]	@ (800092c <MX_TIM9_Init+0x6c>)
 80008fc:	f005 f9d8 	bl	8005cb0 <HAL_TIM_Base_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8000906:	f000 f941 	bl	8000b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800090a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800090e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000910:	463b      	mov	r3, r7
 8000912:	4619      	mov	r1, r3
 8000914:	4805      	ldr	r0, [pc, #20]	@ (800092c <MX_TIM9_Init+0x6c>)
 8000916:	f005 fb9c 	bl	8006052 <HAL_TIM_ConfigClockSource>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8000920:	f000 f934 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000168 	.word	0x20000168
 8000930:	40014000 	.word	0x40014000

08000934 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000938:	4b0e      	ldr	r3, [pc, #56]	@ (8000974 <MX_TIM11_Init+0x40>)
 800093a:	4a0f      	ldr	r2, [pc, #60]	@ (8000978 <MX_TIM11_Init+0x44>)
 800093c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 47999;
 800093e:	4b0d      	ldr	r3, [pc, #52]	@ (8000974 <MX_TIM11_Init+0x40>)
 8000940:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8000944:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000946:	4b0b      	ldr	r3, [pc, #44]	@ (8000974 <MX_TIM11_Init+0x40>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 4999;
 800094c:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <MX_TIM11_Init+0x40>)
 800094e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000952:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000954:	4b07      	ldr	r3, [pc, #28]	@ (8000974 <MX_TIM11_Init+0x40>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <MX_TIM11_Init+0x40>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	@ (8000974 <MX_TIM11_Init+0x40>)
 8000962:	f005 f9a5 	bl	8005cb0 <HAL_TIM_Base_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 800096c:	f000 f90e 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	200001b0 	.word	0x200001b0
 8000978:	40014800 	.word	0x40014800

0800097c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000980:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 8000982:	4a12      	ldr	r2, [pc, #72]	@ (80009cc <MX_USART2_UART_Init+0x50>)
 8000984:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000986:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 8000988:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800098c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 80009ae:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80009b2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009b4:	4804      	ldr	r0, [pc, #16]	@ (80009c8 <MX_USART2_UART_Init+0x4c>)
 80009b6:	f005 fde3 	bl	8006580 <HAL_UART_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 80009c0:	f000 f8e4 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200001f8 	.word	0x200001f8
 80009cc:	40004400 	.word	0x40004400

080009d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <MX_DMA_Init+0x3c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	4a0b      	ldr	r2, [pc, #44]	@ (8000a0c <MX_DMA_Init+0x3c>)
 80009e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e6:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <MX_DMA_Init+0x3c>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	2011      	movs	r0, #17
 80009f8:	f001 fd3b 	bl	8002472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80009fc:	2011      	movs	r0, #17
 80009fe:	f001 fd54 	bl	80024aa <HAL_NVIC_EnableIRQ>

}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800

08000a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08c      	sub	sp, #48	@ 0x30
 8000a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	61bb      	str	r3, [r7, #24]
 8000a2a:	4b54      	ldr	r3, [pc, #336]	@ (8000b7c <MX_GPIO_Init+0x16c>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a53      	ldr	r2, [pc, #332]	@ (8000b7c <MX_GPIO_Init+0x16c>)
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b51      	ldr	r3, [pc, #324]	@ (8000b7c <MX_GPIO_Init+0x16c>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	61bb      	str	r3, [r7, #24]
 8000a40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
 8000a46:	4b4d      	ldr	r3, [pc, #308]	@ (8000b7c <MX_GPIO_Init+0x16c>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	4a4c      	ldr	r2, [pc, #304]	@ (8000b7c <MX_GPIO_Init+0x16c>)
 8000a4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a52:	4b4a      	ldr	r3, [pc, #296]	@ (8000b7c <MX_GPIO_Init+0x16c>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	4b46      	ldr	r3, [pc, #280]	@ (8000b7c <MX_GPIO_Init+0x16c>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	4a45      	ldr	r2, [pc, #276]	@ (8000b7c <MX_GPIO_Init+0x16c>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6e:	4b43      	ldr	r3, [pc, #268]	@ (8000b7c <MX_GPIO_Init+0x16c>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	4b3f      	ldr	r3, [pc, #252]	@ (8000b7c <MX_GPIO_Init+0x16c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	4a3e      	ldr	r2, [pc, #248]	@ (8000b7c <MX_GPIO_Init+0x16c>)
 8000a84:	f043 0310 	orr.w	r3, r3, #16
 8000a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8a:	4b3c      	ldr	r3, [pc, #240]	@ (8000b7c <MX_GPIO_Init+0x16c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	f003 0310 	and.w	r3, r3, #16
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	4b38      	ldr	r3, [pc, #224]	@ (8000b7c <MX_GPIO_Init+0x16c>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	4a37      	ldr	r2, [pc, #220]	@ (8000b7c <MX_GPIO_Init+0x16c>)
 8000aa0:	f043 0308 	orr.w	r3, r3, #8
 8000aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa6:	4b35      	ldr	r3, [pc, #212]	@ (8000b7c <MX_GPIO_Init+0x16c>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	f003 0308 	and.w	r3, r3, #8
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	4b31      	ldr	r3, [pc, #196]	@ (8000b7c <MX_GPIO_Init+0x16c>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a30      	ldr	r2, [pc, #192]	@ (8000b7c <MX_GPIO_Init+0x16c>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b2e      	ldr	r3, [pc, #184]	@ (8000b7c <MX_GPIO_Init+0x16c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Panic_Buzzer_GPIO_Port, Panic_Buzzer_Pin, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2180      	movs	r1, #128	@ 0x80
 8000ad2:	482b      	ldr	r0, [pc, #172]	@ (8000b80 <MX_GPIO_Init+0x170>)
 8000ad4:	f002 fa9c 	bl	8003010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WC_Reset_GPIO_Port, WC_Reset_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ade:	4829      	ldr	r0, [pc, #164]	@ (8000b84 <MX_GPIO_Init+0x174>)
 8000ae0:	f002 fa96 	bl	8003010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Panic_Buzzer_Pin */
  GPIO_InitStruct.Pin = Panic_Buzzer_Pin;
 8000ae4:	2380      	movs	r3, #128	@ 0x80
 8000ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Panic_Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	4821      	ldr	r0, [pc, #132]	@ (8000b80 <MX_GPIO_Init+0x170>)
 8000afc:	f002 f904 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : WC_Reset_Pin */
  GPIO_InitStruct.Pin = WC_Reset_Pin;
 8000b00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(WC_Reset_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	4619      	mov	r1, r3
 8000b18:	481a      	ldr	r0, [pc, #104]	@ (8000b84 <MX_GPIO_Init+0x174>)
 8000b1a:	f002 f8f5 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : Movement_Sensors_Pin */
  GPIO_InitStruct.Pin = Movement_Sensors_Pin;
 8000b1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b24:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Movement_Sensors_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	4619      	mov	r1, r3
 8000b34:	4814      	ldr	r0, [pc, #80]	@ (8000b88 <MX_GPIO_Init+0x178>)
 8000b36:	f002 f8e7 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : Panic_Button_Pin */
  GPIO_InitStruct.Pin = Panic_Button_Pin;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b3e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b44:	2302      	movs	r3, #2
 8000b46:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Panic_Button_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480d      	ldr	r0, [pc, #52]	@ (8000b84 <MX_GPIO_Init+0x174>)
 8000b50:	f002 f8da 	bl	8002d08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	2006      	movs	r0, #6
 8000b5a:	f001 fc8a 	bl	8002472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b5e:	2006      	movs	r0, #6
 8000b60:	f001 fca3 	bl	80024aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2100      	movs	r1, #0
 8000b68:	2017      	movs	r0, #23
 8000b6a:	f001 fc82 	bl	8002472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b6e:	2017      	movs	r0, #23
 8000b70:	f001 fc9b 	bl	80024aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b74:	bf00      	nop
 8000b76:	3730      	adds	r7, #48	@ 0x30
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40020c00 	.word	0x40020c00
 8000b88:	40020800 	.word	0x40020800

08000b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b90:	b672      	cpsid	i
}
 8000b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <Error_Handler+0x8>

08000b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	4b10      	ldr	r3, [pc, #64]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000ba8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bae:	4b0d      	ldr	r3, [pc, #52]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	4b09      	ldr	r3, [pc, #36]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc2:	4a08      	ldr	r2, [pc, #32]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bca:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <HAL_MspInit+0x4c>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bd6:	2007      	movs	r0, #7
 8000bd8:	f001 fc40 	bl	800245c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40023800 	.word	0x40023800

08000be8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	@ 0x28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a17      	ldr	r2, [pc, #92]	@ (8000c64 <HAL_ADC_MspInit+0x7c>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d127      	bne.n	8000c5a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	4b16      	ldr	r3, [pc, #88]	@ (8000c68 <HAL_ADC_MspInit+0x80>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c12:	4a15      	ldr	r2, [pc, #84]	@ (8000c68 <HAL_ADC_MspInit+0x80>)
 8000c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c1a:	4b13      	ldr	r3, [pc, #76]	@ (8000c68 <HAL_ADC_MspInit+0x80>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <HAL_ADC_MspInit+0x80>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c68 <HAL_ADC_MspInit+0x80>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c36:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <HAL_ADC_MspInit+0x80>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = Ambient_Light_Pin;
 8000c42:	2301      	movs	r3, #1
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Ambient_Light_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <HAL_ADC_MspInit+0x84>)
 8000c56:	f002 f857 	bl	8002d08 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c5a:	bf00      	nop
 8000c5c:	3728      	adds	r7, #40	@ 0x28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40012000 	.word	0x40012000
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020000 	.word	0x40020000

08000c70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	@ 0x28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a21      	ldr	r2, [pc, #132]	@ (8000d14 <HAL_I2C_MspInit+0xa4>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d13b      	bne.n	8000d0a <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	4b20      	ldr	r3, [pc, #128]	@ (8000d18 <HAL_I2C_MspInit+0xa8>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8000d18 <HAL_I2C_MspInit+0xa8>)
 8000c9c:	f043 0302 	orr.w	r3, r3, #2
 8000ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d18 <HAL_I2C_MspInit+0xa8>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Light_SCL_Pin|Light_SDA_Pin;
 8000cae:	23c0      	movs	r3, #192	@ 0xc0
 8000cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cb2:	2312      	movs	r3, #18
 8000cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4814      	ldr	r0, [pc, #80]	@ (8000d1c <HAL_I2C_MspInit+0xac>)
 8000cca:	f002 f81d 	bl	8002d08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4b11      	ldr	r3, [pc, #68]	@ (8000d18 <HAL_I2C_MspInit+0xa8>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd6:	4a10      	ldr	r2, [pc, #64]	@ (8000d18 <HAL_I2C_MspInit+0xa8>)
 8000cd8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cde:	4b0e      	ldr	r3, [pc, #56]	@ (8000d18 <HAL_I2C_MspInit+0xa8>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	201f      	movs	r0, #31
 8000cf0:	f001 fbbf 	bl	8002472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000cf4:	201f      	movs	r0, #31
 8000cf6:	f001 fbd8 	bl	80024aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2020      	movs	r0, #32
 8000d00:	f001 fbb7 	bl	8002472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d04:	2020      	movs	r0, #32
 8000d06:	f001 fbd0 	bl	80024aa <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d0a:	bf00      	nop
 8000d0c:	3728      	adds	r7, #40	@ 0x28
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40005400 	.word	0x40005400
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020400 	.word	0x40020400

08000d20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a38      	ldr	r2, [pc, #224]	@ (8000e10 <HAL_TIM_Base_MspInit+0xf0>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d116      	bne.n	8000d60 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	4b37      	ldr	r3, [pc, #220]	@ (8000e14 <HAL_TIM_Base_MspInit+0xf4>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3a:	4a36      	ldr	r2, [pc, #216]	@ (8000e14 <HAL_TIM_Base_MspInit+0xf4>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d42:	4b34      	ldr	r3, [pc, #208]	@ (8000e14 <HAL_TIM_Base_MspInit+0xf4>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2100      	movs	r1, #0
 8000d52:	201d      	movs	r0, #29
 8000d54:	f001 fb8d 	bl	8002472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d58:	201d      	movs	r0, #29
 8000d5a:	f001 fba6 	bl	80024aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000d5e:	e052      	b.n	8000e06 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM4)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a2c      	ldr	r2, [pc, #176]	@ (8000e18 <HAL_TIM_Base_MspInit+0xf8>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d116      	bne.n	8000d98 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	4b29      	ldr	r3, [pc, #164]	@ (8000e14 <HAL_TIM_Base_MspInit+0xf4>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d72:	4a28      	ldr	r2, [pc, #160]	@ (8000e14 <HAL_TIM_Base_MspInit+0xf4>)
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d7a:	4b26      	ldr	r3, [pc, #152]	@ (8000e14 <HAL_TIM_Base_MspInit+0xf4>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7e:	f003 0304 	and.w	r3, r3, #4
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	201e      	movs	r0, #30
 8000d8c:	f001 fb71 	bl	8002472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d90:	201e      	movs	r0, #30
 8000d92:	f001 fb8a 	bl	80024aa <HAL_NVIC_EnableIRQ>
}
 8000d96:	e036      	b.n	8000e06 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM9)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a1f      	ldr	r2, [pc, #124]	@ (8000e1c <HAL_TIM_Base_MspInit+0xfc>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d116      	bne.n	8000dd0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e14 <HAL_TIM_Base_MspInit+0xf4>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000daa:	4a1a      	ldr	r2, [pc, #104]	@ (8000e14 <HAL_TIM_Base_MspInit+0xf4>)
 8000dac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000db0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000db2:	4b18      	ldr	r3, [pc, #96]	@ (8000e14 <HAL_TIM_Base_MspInit+0xf4>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2018      	movs	r0, #24
 8000dc4:	f001 fb55 	bl	8002472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000dc8:	2018      	movs	r0, #24
 8000dca:	f001 fb6e 	bl	80024aa <HAL_NVIC_EnableIRQ>
}
 8000dce:	e01a      	b.n	8000e06 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a12      	ldr	r2, [pc, #72]	@ (8000e20 <HAL_TIM_Base_MspInit+0x100>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d115      	bne.n	8000e06 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	4b0d      	ldr	r3, [pc, #52]	@ (8000e14 <HAL_TIM_Base_MspInit+0xf4>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de2:	4a0c      	ldr	r2, [pc, #48]	@ (8000e14 <HAL_TIM_Base_MspInit+0xf4>)
 8000de4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000de8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dea:	4b0a      	ldr	r3, [pc, #40]	@ (8000e14 <HAL_TIM_Base_MspInit+0xf4>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	201a      	movs	r0, #26
 8000dfc:	f001 fb39 	bl	8002472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000e00:	201a      	movs	r0, #26
 8000e02:	f001 fb52 	bl	80024aa <HAL_NVIC_EnableIRQ>
}
 8000e06:	bf00      	nop
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40000400 	.word	0x40000400
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40000800 	.word	0x40000800
 8000e1c:	40014000 	.word	0x40014000
 8000e20:	40014800 	.word	0x40014800

08000e24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	@ 0x28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a34      	ldr	r2, [pc, #208]	@ (8000f14 <HAL_UART_MspInit+0xf0>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d161      	bne.n	8000f0a <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	4b33      	ldr	r3, [pc, #204]	@ (8000f18 <HAL_UART_MspInit+0xf4>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4e:	4a32      	ldr	r2, [pc, #200]	@ (8000f18 <HAL_UART_MspInit+0xf4>)
 8000e50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e56:	4b30      	ldr	r3, [pc, #192]	@ (8000f18 <HAL_UART_MspInit+0xf4>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	4b2c      	ldr	r3, [pc, #176]	@ (8000f18 <HAL_UART_MspInit+0xf4>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	4a2b      	ldr	r2, [pc, #172]	@ (8000f18 <HAL_UART_MspInit+0xf4>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e72:	4b29      	ldr	r3, [pc, #164]	@ (8000f18 <HAL_UART_MspInit+0xf4>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e7e:	230c      	movs	r3, #12
 8000e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e8e:	2307      	movs	r3, #7
 8000e90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4619      	mov	r1, r3
 8000e98:	4820      	ldr	r0, [pc, #128]	@ (8000f1c <HAL_UART_MspInit+0xf8>)
 8000e9a:	f001 ff35 	bl	8002d08 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000e9e:	4b20      	ldr	r3, [pc, #128]	@ (8000f20 <HAL_UART_MspInit+0xfc>)
 8000ea0:	4a20      	ldr	r2, [pc, #128]	@ (8000f24 <HAL_UART_MspInit+0x100>)
 8000ea2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f20 <HAL_UART_MspInit+0xfc>)
 8000ea6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000eaa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eac:	4b1c      	ldr	r3, [pc, #112]	@ (8000f20 <HAL_UART_MspInit+0xfc>)
 8000eae:	2240      	movs	r2, #64	@ 0x40
 8000eb0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f20 <HAL_UART_MspInit+0xfc>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000eb8:	4b19      	ldr	r3, [pc, #100]	@ (8000f20 <HAL_UART_MspInit+0xfc>)
 8000eba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ebe:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ec0:	4b17      	ldr	r3, [pc, #92]	@ (8000f20 <HAL_UART_MspInit+0xfc>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ec6:	4b16      	ldr	r3, [pc, #88]	@ (8000f20 <HAL_UART_MspInit+0xfc>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000ecc:	4b14      	ldr	r3, [pc, #80]	@ (8000f20 <HAL_UART_MspInit+0xfc>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ed2:	4b13      	ldr	r3, [pc, #76]	@ (8000f20 <HAL_UART_MspInit+0xfc>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <HAL_UART_MspInit+0xfc>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000ede:	4810      	ldr	r0, [pc, #64]	@ (8000f20 <HAL_UART_MspInit+0xfc>)
 8000ee0:	f001 fb02 	bl	80024e8 <HAL_DMA_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000eea:	f7ff fe4f 	bl	8000b8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a0b      	ldr	r2, [pc, #44]	@ (8000f20 <HAL_UART_MspInit+0xfc>)
 8000ef2:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8000f20 <HAL_UART_MspInit+0xfc>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2100      	movs	r1, #0
 8000efe:	2026      	movs	r0, #38	@ 0x26
 8000f00:	f001 fab7 	bl	8002472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f04:	2026      	movs	r0, #38	@ 0x26
 8000f06:	f001 fad0 	bl	80024aa <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f0a:	bf00      	nop
 8000f0c:	3728      	adds	r7, #40	@ 0x28
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40004400 	.word	0x40004400
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40020000 	.word	0x40020000
 8000f20:	20000240 	.word	0x20000240
 8000f24:	400260a0 	.word	0x400260a0

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <NMI_Handler+0x4>

08000f30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f34:	bf00      	nop
 8000f36:	e7fd      	b.n	8000f34 <HardFault_Handler+0x4>

08000f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <MemManage_Handler+0x4>

08000f40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <BusFault_Handler+0x4>

08000f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <UsageFault_Handler+0x4>

08000f50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f7e:	f000 fd75 	bl	8001a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Panic_Button_Pin);
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	f002 f85a 	bl	8003044 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000f98:	4802      	ldr	r0, [pc, #8]	@ (8000fa4 <DMA1_Stream6_IRQHandler+0x10>)
 8000f9a:	f001 fc3d 	bl	8002818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000240 	.word	0x20000240

08000fa8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Movement_Sensors_Pin);
 8000fac:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fb0:	f002 f848 	bl	8003044 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000fbc:	4802      	ldr	r0, [pc, #8]	@ (8000fc8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000fbe:	f004 ff58 	bl	8005e72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000168 	.word	0x20000168

08000fcc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000fd0:	4802      	ldr	r0, [pc, #8]	@ (8000fdc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000fd2:	f004 ff4e 	bl	8005e72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200001b0 	.word	0x200001b0

08000fe0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fe4:	4802      	ldr	r0, [pc, #8]	@ (8000ff0 <TIM3_IRQHandler+0x10>)
 8000fe6:	f004 ff44 	bl	8005e72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200000d8 	.word	0x200000d8

08000ff4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ff8:	4802      	ldr	r0, [pc, #8]	@ (8001004 <TIM4_IRQHandler+0x10>)
 8000ffa:	f004 ff3a 	bl	8005e72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000120 	.word	0x20000120

08001008 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800100c:	4802      	ldr	r0, [pc, #8]	@ (8001018 <I2C1_EV_IRQHandler+0x10>)
 800100e:	f002 fa89 	bl	8003524 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000084 	.word	0x20000084

0800101c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001020:	4802      	ldr	r0, [pc, #8]	@ (800102c <I2C1_ER_IRQHandler+0x10>)
 8001022:	f002 fbd2 	bl	80037ca <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000084 	.word	0x20000084

08001030 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001034:	4802      	ldr	r0, [pc, #8]	@ (8001040 <USART2_IRQHandler+0x10>)
 8001036:	f005 fb89 	bl	800674c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200001f8 	.word	0x200001f8

08001044 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <SystemInit+0x20>)
 800104a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800104e:	4a05      	ldr	r2, [pc, #20]	@ (8001064 <SystemInit+0x20>)
 8001050:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001054:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001068:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800106c:	f7ff ffea 	bl	8001044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001070:	480c      	ldr	r0, [pc, #48]	@ (80010a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001072:	490d      	ldr	r1, [pc, #52]	@ (80010a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001074:	4a0d      	ldr	r2, [pc, #52]	@ (80010ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001078:	e002      	b.n	8001080 <LoopCopyDataInit>

0800107a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800107c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107e:	3304      	adds	r3, #4

08001080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001084:	d3f9      	bcc.n	800107a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001086:	4a0a      	ldr	r2, [pc, #40]	@ (80010b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001088:	4c0a      	ldr	r4, [pc, #40]	@ (80010b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800108c:	e001      	b.n	8001092 <LoopFillZerobss>

0800108e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001090:	3204      	adds	r2, #4

08001092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001094:	d3fb      	bcc.n	800108e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001096:	f006 fb35 	bl	8007704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109a:	f7ff fa67 	bl	800056c <main>
  bx  lr    
 800109e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80010ac:	080077b8 	.word	0x080077b8
  ldr r2, =_sbss
 80010b0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80010b4:	200002c8 	.word	0x200002c8

080010b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC_IRQHandler>
	...

080010bc <HAL_UART_RxCpltCallback>:
#include "stm32f4xx_hal.h"
#include <stdint.h>

static uint8_t received_data[PACKET_SIZE];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	protocol_interpret_cmd_packet(received_data, PACKET_SIZE);
 80010c4:	2102      	movs	r1, #2
 80010c6:	4806      	ldr	r0, [pc, #24]	@ (80010e0 <HAL_UART_RxCpltCallback+0x24>)
 80010c8:	f000 f834 	bl	8001134 <protocol_interpret_cmd_packet>
	HAL_UART_Receive_IT(COMM_UART_INTERFACE, received_data, PACKET_SIZE);
 80010cc:	2202      	movs	r2, #2
 80010ce:	4904      	ldr	r1, [pc, #16]	@ (80010e0 <HAL_UART_RxCpltCallback+0x24>)
 80010d0:	4804      	ldr	r0, [pc, #16]	@ (80010e4 <HAL_UART_RxCpltCallback+0x28>)
 80010d2:	f005 faa5 	bl	8006620 <HAL_UART_Receive_IT>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200002a0 	.word	0x200002a0
 80010e4:	200001f8 	.word	0x200001f8

080010e8 <comm_send_data>:

void comm_send_data(const uint8_t* data) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(COMM_UART_INTERFACE, data, PACKET_SIZE);
 80010f0:	2202      	movs	r2, #2
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	4803      	ldr	r0, [pc, #12]	@ (8001104 <comm_send_data+0x1c>)
 80010f6:	f005 fab9 	bl	800666c <HAL_UART_Transmit_DMA>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200001f8 	.word	0x200001f8

08001108 <comm_init>:

void comm_init() {
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(COMM_TIMER);
 800110c:	4806      	ldr	r0, [pc, #24]	@ (8001128 <comm_init+0x20>)
 800110e:	f004 fe81 	bl	8005e14 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Start_IT(COMM_TIMER);
 8001112:	4805      	ldr	r0, [pc, #20]	@ (8001128 <comm_init+0x20>)
 8001114:	f004 fe1c 	bl	8005d50 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(COMM_UART_INTERFACE, received_data, PACKET_SIZE);
 8001118:	2202      	movs	r2, #2
 800111a:	4904      	ldr	r1, [pc, #16]	@ (800112c <comm_init+0x24>)
 800111c:	4804      	ldr	r0, [pc, #16]	@ (8001130 <comm_init+0x28>)
 800111e:	f005 fa7f 	bl	8006620 <HAL_UART_Receive_IT>
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200001b0 	.word	0x200001b0
 800112c:	200002a0 	.word	0x200002a0
 8001130:	200001f8 	.word	0x200001f8

08001134 <protocol_interpret_cmd_packet>:

#include "protocol.h"
#include "light.h"
#include "panic.h"

void protocol_interpret_cmd_packet(uint8_t* packet, uint8_t len) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	70fb      	strb	r3, [r7, #3]
	if(packet[0] == CMD_PACKET) {
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b51      	cmp	r3, #81	@ 0x51
 8001146:	d13f      	bne.n	80011c8 <protocol_interpret_cmd_packet+0x94>
		switch(packet[1]) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3301      	adds	r3, #1
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	3b01      	subs	r3, #1
 8001150:	2b0f      	cmp	r3, #15
 8001152:	d838      	bhi.n	80011c6 <protocol_interpret_cmd_packet+0x92>
 8001154:	a201      	add	r2, pc, #4	@ (adr r2, 800115c <protocol_interpret_cmd_packet+0x28>)
 8001156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115a:	bf00      	nop
 800115c:	0800119d 	.word	0x0800119d
 8001160:	080011af 	.word	0x080011af
 8001164:	080011c7 	.word	0x080011c7
 8001168:	080011b5 	.word	0x080011b5
 800116c:	080011c7 	.word	0x080011c7
 8001170:	080011c7 	.word	0x080011c7
 8001174:	080011c7 	.word	0x080011c7
 8001178:	080011bb 	.word	0x080011bb
 800117c:	080011c7 	.word	0x080011c7
 8001180:	080011c7 	.word	0x080011c7
 8001184:	080011c7 	.word	0x080011c7
 8001188:	080011c7 	.word	0x080011c7
 800118c:	080011c7 	.word	0x080011c7
 8001190:	080011c7 	.word	0x080011c7
 8001194:	080011c7 	.word	0x080011c7
 8001198:	080011c1 	.word	0x080011c1
		case TRIGGER_RESET:
			HAL_GPIO_WritePin(WC_RESET, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011a2:	480b      	ldr	r0, [pc, #44]	@ (80011d0 <protocol_interpret_cmd_packet+0x9c>)
 80011a4:	f001 ff34 	bl	8003010 <HAL_GPIO_WritePin>
			HAL_NVIC_SystemReset();
 80011a8:	f001 f98d 	bl	80024c6 <HAL_NVIC_SystemReset>
			break;
 80011ac:	e00c      	b.n	80011c8 <protocol_interpret_cmd_packet+0x94>
		case TURN_PANIC_ON:
			panic_activate();
 80011ae:	f000 fa8d 	bl	80016cc <panic_activate>
			break;
 80011b2:	e009      	b.n	80011c8 <protocol_interpret_cmd_packet+0x94>
		case TURN_PANIC_OFF:
			panic_deactivate();
 80011b4:	f000 fa96 	bl	80016e4 <panic_deactivate>
			break;
 80011b8:	e006      	b.n	80011c8 <protocol_interpret_cmd_packet+0x94>
		case TURN_LIGHT_ON:
			light_activate();
 80011ba:	f000 f8ff 	bl	80013bc <light_activate>
			break;
 80011be:	e003      	b.n	80011c8 <protocol_interpret_cmd_packet+0x94>
		case TURN_LIGHT_OFF:
			light_deactivate();
 80011c0:	f000 f91e 	bl	8001400 <light_deactivate>
			break;
 80011c4:	e000      	b.n	80011c8 <protocol_interpret_cmd_packet+0x94>
		default:
			break;
 80011c6:	bf00      	nop
		}
	} else {
		// do nothing
	}
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40020c00 	.word	0x40020c00

080011d4 <light_power_on>:

static uint8_t light_on = 0;
static uint8_t check_light_level = 0;
static uint8_t just_turned_on = 0;

void light_power_on() {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	if(light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER, SHUTDOWN_REGISTER, TURN_ON) == HAL_BUSY) {
 80011d8:	2201      	movs	r2, #1
 80011da:	210a      	movs	r1, #10
 80011dc:	200b      	movs	r0, #11
 80011de:	f000 f9e3 	bl	80015a8 <light_i2c_write_single_register>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d101      	bne.n	80011ec <light_power_on+0x18>
		Error_Handler();
 80011e8:	f7ff fcd0 	bl	8000b8c <Error_Handler>
	}
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <light_shutdown>:

void light_shutdown() {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	if(light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER, SHUTDOWN_REGISTER, SHUTDOWN) == HAL_BUSY) {
 80011f4:	2200      	movs	r2, #0
 80011f6:	210a      	movs	r1, #10
 80011f8:	200b      	movs	r0, #11
 80011fa:	f000 f9d5 	bl	80015a8 <light_i2c_write_single_register>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b02      	cmp	r3, #2
 8001202:	d101      	bne.n	8001208 <light_shutdown+0x18>
		Error_Handler();
 8001204:	f7ff fcc2 	bl	8000b8c <Error_Handler>
	}
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}

0800120c <light_default_state>:

void light_default_state(uint8_t intensity) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
	if (light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER,
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	200b      	movs	r0, #11
 800121c:	f000 f9c4 	bl	80015a8 <light_i2c_write_single_register>
 8001220:	4603      	mov	r3, r0
 8001222:	2b02      	cmp	r3, #2
 8001224:	d101      	bne.n	800122a <light_default_state+0x1e>
			CONFIGURATION_REGISTER, PICTURE_MODE) == HAL_BUSY) {
		Error_Handler();
 8001226:	f7ff fcb1 	bl	8000b8c <Error_Handler>
	}
	if (light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER,
 800122a:	2200      	movs	r2, #0
 800122c:	2101      	movs	r1, #1
 800122e:	200b      	movs	r0, #11
 8001230:	f000 f9ba 	bl	80015a8 <light_i2c_write_single_register>
 8001234:	4603      	mov	r3, r0
 8001236:	2b02      	cmp	r3, #2
 8001238:	d101      	bne.n	800123e <light_default_state+0x32>
			PICTURE_DISPLAY_REGISTER, MATRIX_FRAME1) == HAL_BUSY) {
		Error_Handler();
 800123a:	f7ff fca7 	bl	8000b8c <Error_Handler>
	}
	if (light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER,
 800123e:	2200      	movs	r2, #0
 8001240:	2105      	movs	r1, #5
 8001242:	200b      	movs	r0, #11
 8001244:	f000 f9b0 	bl	80015a8 <light_i2c_write_single_register>
 8001248:	4603      	mov	r3, r0
 800124a:	2b02      	cmp	r3, #2
 800124c:	d101      	bne.n	8001252 <light_default_state+0x46>
			DISPLAY_OPTION_REGISTER,
			DISPLAY_OPTIONS(INDEPENDENT_INTENSITY, BLINK_DISABLED, 0))
			== HAL_BUSY) {
		Error_Handler();
 800124e:	f7ff fc9d 	bl	8000b8c <Error_Handler>
	}
	// setup frame1 to be all on but without outputting light
	light_turn_on_frame(MATRIX_FRAME1);
 8001252:	2000      	movs	r0, #0
 8001254:	f000 f846 	bl	80012e4 <light_turn_on_frame>
	light_set_intensity(MATRIX_FRAME1, intensity);
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	4619      	mov	r1, r3
 800125c:	2000      	movs	r0, #0
 800125e:	f000 f86d 	bl	800133c <light_set_intensity>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <light_init>:

void light_init() {
 800126a:	b580      	push	{r7, lr}
 800126c:	af00      	add	r7, sp, #0
	light_default_state(DEFAULT_LIGHT_INTENSITY);
 800126e:	2064      	movs	r0, #100	@ 0x64
 8001270:	f7ff ffcc 	bl	800120c <light_default_state>
	light_turn_off_frame(MATRIX_FRAME1);
 8001274:	2000      	movs	r0, #0
 8001276:	f000 f84b 	bl	8001310 <light_turn_off_frame>

	// initialize frames 2-8 to have a smooth transition when someone is passing by
	light_turn_on_frame(MATRIX_FRAME2);
 800127a:	2001      	movs	r0, #1
 800127c:	f000 f832 	bl	80012e4 <light_turn_on_frame>
	light_turn_on_frame(MATRIX_FRAME3);
 8001280:	2002      	movs	r0, #2
 8001282:	f000 f82f 	bl	80012e4 <light_turn_on_frame>
	light_turn_on_frame(MATRIX_FRAME4);
 8001286:	2003      	movs	r0, #3
 8001288:	f000 f82c 	bl	80012e4 <light_turn_on_frame>
	light_turn_on_frame(MATRIX_FRAME5);
 800128c:	2004      	movs	r0, #4
 800128e:	f000 f829 	bl	80012e4 <light_turn_on_frame>
	light_turn_on_frame(MATRIX_FRAME6);
 8001292:	2005      	movs	r0, #5
 8001294:	f000 f826 	bl	80012e4 <light_turn_on_frame>
	light_turn_on_frame(MATRIX_FRAME7);
 8001298:	2006      	movs	r0, #6
 800129a:	f000 f823 	bl	80012e4 <light_turn_on_frame>
	light_turn_on_frame(MATRIX_FRAME8);
 800129e:	2007      	movs	r0, #7
 80012a0:	f000 f820 	bl	80012e4 <light_turn_on_frame>
	light_set_intensity(MATRIX_FRAME2, 105);
 80012a4:	2169      	movs	r1, #105	@ 0x69
 80012a6:	2001      	movs	r0, #1
 80012a8:	f000 f848 	bl	800133c <light_set_intensity>
	light_set_intensity(MATRIX_FRAME3, 130);
 80012ac:	2182      	movs	r1, #130	@ 0x82
 80012ae:	2002      	movs	r0, #2
 80012b0:	f000 f844 	bl	800133c <light_set_intensity>
	light_set_intensity(MATRIX_FRAME4, 155);
 80012b4:	219b      	movs	r1, #155	@ 0x9b
 80012b6:	2003      	movs	r0, #3
 80012b8:	f000 f840 	bl	800133c <light_set_intensity>
	light_set_intensity(MATRIX_FRAME5, 180);
 80012bc:	21b4      	movs	r1, #180	@ 0xb4
 80012be:	2004      	movs	r0, #4
 80012c0:	f000 f83c 	bl	800133c <light_set_intensity>
	light_set_intensity(MATRIX_FRAME6, 205);
 80012c4:	21cd      	movs	r1, #205	@ 0xcd
 80012c6:	2005      	movs	r0, #5
 80012c8:	f000 f838 	bl	800133c <light_set_intensity>
	light_set_intensity(MATRIX_FRAME7, 230);
 80012cc:	21e6      	movs	r1, #230	@ 0xe6
 80012ce:	2006      	movs	r0, #6
 80012d0:	f000 f834 	bl	800133c <light_set_intensity>
	light_set_intensity(MATRIX_FRAME8, MAX_LIGHT_INTENSITY);
 80012d4:	21ff      	movs	r1, #255	@ 0xff
 80012d6:	2007      	movs	r0, #7
 80012d8:	f000 f830 	bl	800133c <light_set_intensity>
	light_power_on();
 80012dc:	f7ff ff7a 	bl	80011d4 <light_power_on>
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <light_turn_on_frame>:

void light_turn_on_frame(uint8_t frame) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
	if(light_i2c_send_data(frame, LED_CONTROL_START, all_on, sizeof(all_on)) == HAL_BUSY) {
 80012ee:	79f8      	ldrb	r0, [r7, #7]
 80012f0:	2312      	movs	r3, #18
 80012f2:	4a06      	ldr	r2, [pc, #24]	@ (800130c <light_turn_on_frame+0x28>)
 80012f4:	2100      	movs	r1, #0
 80012f6:	f000 f97f 	bl	80015f8 <light_i2c_send_data>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d101      	bne.n	8001304 <light_turn_on_frame+0x20>
			Error_Handler();
 8001300:	f7ff fc44 	bl	8000b8c <Error_Handler>
	}
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000004 	.word	0x20000004

08001310 <light_turn_off_frame>:

void light_turn_off_frame(uint8_t frame) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
	if(light_i2c_send_data(MATRIX_FRAME1, LED_CONTROL_START, all_off, sizeof(all_off)) == HAL_BUSY) {
 800131a:	2312      	movs	r3, #18
 800131c:	4a06      	ldr	r2, [pc, #24]	@ (8001338 <light_turn_off_frame+0x28>)
 800131e:	2100      	movs	r1, #0
 8001320:	2000      	movs	r0, #0
 8001322:	f000 f969 	bl	80015f8 <light_i2c_send_data>
 8001326:	4603      	mov	r3, r0
 8001328:	2b02      	cmp	r3, #2
 800132a:	d101      	bne.n	8001330 <light_turn_off_frame+0x20>
		Error_Handler();
 800132c:	f7ff fc2e 	bl	8000b8c <Error_Handler>
	}
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	200002a4 	.word	0x200002a4

0800133c <light_set_intensity>:

void light_set_intensity(uint8_t frame, uint8_t intensity) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b0a6      	sub	sp, #152	@ 0x98
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	460a      	mov	r2, r1
 8001346:	71fb      	strb	r3, [r7, #7]
 8001348:	4613      	mov	r3, r2
 800134a:	71bb      	strb	r3, [r7, #6]
	if(intensity <= MAX_LIGHT_INTENSITY) {
		uint8_t pwm[144];
		memset(pwm, intensity, 144);
 800134c:	79b9      	ldrb	r1, [r7, #6]
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	2290      	movs	r2, #144	@ 0x90
 8001354:	4618      	mov	r0, r3
 8001356:	f006 f9cd 	bl	80076f4 <memset>
		light_i2c_send_data(frame, PWM_CONTROL_START, pwm, sizeof(pwm));
 800135a:	f107 0208 	add.w	r2, r7, #8
 800135e:	79f8      	ldrb	r0, [r7, #7]
 8001360:	2390      	movs	r3, #144	@ 0x90
 8001362:	2124      	movs	r1, #36	@ 0x24
 8001364:	f000 f948 	bl	80015f8 <light_i2c_send_data>
	}
}
 8001368:	bf00      	nop
 800136a:	3798      	adds	r7, #152	@ 0x98
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <light_transition_to_max>:

void light_transition_to_max() {
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	light_shutdown();
 8001374:	f7ff ff3c 	bl	80011f0 <light_shutdown>
	// enable auto play mode
	if(light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER, CONFIGURATION_REGISTER, AUTOPLAY_MODE(AUTOFRAME_MODE, MATRIX_FRAME1)) == HAL_BUSY) {
 8001378:	2208      	movs	r2, #8
 800137a:	2100      	movs	r1, #0
 800137c:	200b      	movs	r0, #11
 800137e:	f000 f913 	bl	80015a8 <light_i2c_write_single_register>
 8001382:	4603      	mov	r3, r0
 8001384:	2b02      	cmp	r3, #2
 8001386:	d101      	bne.n	800138c <light_transition_to_max+0x1c>
		Error_Handler();
 8001388:	f7ff fc00 	bl	8000b8c <Error_Handler>
	}
	// set number of loops
	if(light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER, AUTOPLAY_CONTROL_REGISTER1, AUTOPLAY_MODE_CONFIG(LOOPS_FRAMES1, LOOPS_FRAMES7)) == HAL_BUSY) {
 800138c:	2217      	movs	r2, #23
 800138e:	2102      	movs	r1, #2
 8001390:	200b      	movs	r0, #11
 8001392:	f000 f909 	bl	80015a8 <light_i2c_write_single_register>
 8001396:	4603      	mov	r3, r0
 8001398:	2b02      	cmp	r3, #2
 800139a:	d101      	bne.n	80013a0 <light_transition_to_max+0x30>
		Error_Handler();
 800139c:	f7ff fbf6 	bl	8000b8c <Error_Handler>
	}
	// setup loop delay
	if(light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER, AUTOPLAY_CONTROL_REGISTER2, AUTOPLAY_DELAY_CONFIG(30)) == HAL_BUSY) { // ~330 ms per step
 80013a0:	221e      	movs	r2, #30
 80013a2:	2103      	movs	r1, #3
 80013a4:	200b      	movs	r0, #11
 80013a6:	f000 f8ff 	bl	80015a8 <light_i2c_write_single_register>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d101      	bne.n	80013b4 <light_transition_to_max+0x44>
		Error_Handler();
 80013b0:	f7ff fbec 	bl	8000b8c <Error_Handler>
	}
	light_power_on();
 80013b4:	f7ff ff0e 	bl	80011d4 <light_power_on>
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}

080013bc <light_activate>:

uint8_t light_is_on() {
	return light_on;
}

void light_activate() {
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
	light_on = 1;
 80013c0:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <light_activate+0x34>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	701a      	strb	r2, [r3, #0]
	sensors_light_sensor_start();
 80013c6:	f000 fac3 	bl	8001950 <sensors_light_sensor_start>
	check_light_level = 1;
 80013ca:	4b0a      	ldr	r3, [pc, #40]	@ (80013f4 <light_activate+0x38>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	701a      	strb	r2, [r3, #0]
	just_turned_on = 1;
 80013d0:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <light_activate+0x3c>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	701a      	strb	r2, [r3, #0]
	htim4.Instance->SR &= ~TIM_SR_UIF;
 80013d6:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <light_activate+0x40>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	691a      	ldr	r2, [r3, #16]
 80013dc:	4b07      	ldr	r3, [pc, #28]	@ (80013fc <light_activate+0x40>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f022 0201 	bic.w	r2, r2, #1
 80013e4:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim4);
 80013e6:	4805      	ldr	r0, [pc, #20]	@ (80013fc <light_activate+0x40>)
 80013e8:	f004 fcb2 	bl	8005d50 <HAL_TIM_Base_Start_IT>
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	200002b6 	.word	0x200002b6
 80013f4:	200002b7 	.word	0x200002b7
 80013f8:	200002b8 	.word	0x200002b8
 80013fc:	20000120 	.word	0x20000120

08001400 <light_deactivate>:

void light_deactivate() {
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
	light_on = 0;
 8001404:	4b04      	ldr	r3, [pc, #16]	@ (8001418 <light_deactivate+0x18>)
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
	sensors_light_sensor_stop();
 800140a:	f000 faad 	bl	8001968 <sensors_light_sensor_stop>
	HAL_TIM_Base_Stop_IT(&htim4);
 800140e:	4803      	ldr	r0, [pc, #12]	@ (800141c <light_deactivate+0x1c>)
 8001410:	f004 fd00 	bl	8005e14 <HAL_TIM_Base_Stop_IT>
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	200002b6 	.word	0x200002b6
 800141c:	20000120 	.word	0x20000120

08001420 <light_level_check>:

void light_level_check() {
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
	check_light_level = 1;
 8001424:	4b03      	ldr	r3, [pc, #12]	@ (8001434 <light_level_check+0x14>)
 8001426:	2201      	movs	r2, #1
 8001428:	701a      	strb	r2, [r3, #0]
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	200002b7 	.word	0x200002b7

08001438 <light_main>:

void light_main() {
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
	static uint8_t default_state = 1;
	static uint8_t current_light = 0;
	static uint8_t movement_detection_reacted = 0;
	if(light_on) {
 800143e:	4b46      	ldr	r3, [pc, #280]	@ (8001558 <light_main+0x120>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 8081 	beq.w	800154a <light_main+0x112>
		if(sensors_movement_is_detected() && !just_turned_on) {
 8001448:	f000 faa6 	bl	8001998 <sensors_movement_is_detected>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d02a      	beq.n	80014a8 <light_main+0x70>
 8001452:	4b42      	ldr	r3, [pc, #264]	@ (800155c <light_main+0x124>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d126      	bne.n	80014a8 <light_main+0x70>
			if(!movement_detection_reacted) {
 800145a:	4b41      	ldr	r3, [pc, #260]	@ (8001560 <light_main+0x128>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d110      	bne.n	8001484 <light_main+0x4c>
				light_transition_to_max();
 8001462:	f7ff ff85 	bl	8001370 <light_transition_to_max>
				movement_detection_reacted = 1;
 8001466:	4b3e      	ldr	r3, [pc, #248]	@ (8001560 <light_main+0x128>)
 8001468:	2201      	movs	r2, #1
 800146a:	701a      	strb	r2, [r3, #0]
				htim9.Instance->SR &= ~TIM_SR_UIF;
 800146c:	4b3d      	ldr	r3, [pc, #244]	@ (8001564 <light_main+0x12c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	691a      	ldr	r2, [r3, #16]
 8001472:	4b3c      	ldr	r3, [pc, #240]	@ (8001564 <light_main+0x12c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0201 	bic.w	r2, r2, #1
 800147a:	611a      	str	r2, [r3, #16]
				HAL_TIM_Base_Start_IT(&htim9);
 800147c:	4839      	ldr	r0, [pc, #228]	@ (8001564 <light_main+0x12c>)
 800147e:	f004 fc67 	bl	8005d50 <HAL_TIM_Base_Start_IT>
 8001482:	e00d      	b.n	80014a0 <light_main+0x68>
			} else { // reset the timer
				HAL_TIM_Base_Stop_IT(&htim9);
 8001484:	4837      	ldr	r0, [pc, #220]	@ (8001564 <light_main+0x12c>)
 8001486:	f004 fcc5 	bl	8005e14 <HAL_TIM_Base_Stop_IT>
				htim9.Instance->SR &= ~TIM_SR_UIF;
 800148a:	4b36      	ldr	r3, [pc, #216]	@ (8001564 <light_main+0x12c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	691a      	ldr	r2, [r3, #16]
 8001490:	4b34      	ldr	r3, [pc, #208]	@ (8001564 <light_main+0x12c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f022 0201 	bic.w	r2, r2, #1
 8001498:	611a      	str	r2, [r3, #16]
				HAL_TIM_Base_Start_IT(&htim9);
 800149a:	4832      	ldr	r0, [pc, #200]	@ (8001564 <light_main+0x12c>)
 800149c:	f004 fc58 	bl	8005d50 <HAL_TIM_Base_Start_IT>
			}
			default_state = 0;
 80014a0:	4b31      	ldr	r3, [pc, #196]	@ (8001568 <light_main+0x130>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
			movement_detection_reacted = 0;
		}
	} else {
		light_shutdown();
	}
}
 80014a6:	e052      	b.n	800154e <light_main+0x116>
			if(check_light_level){
 80014a8:	4b30      	ldr	r3, [pc, #192]	@ (800156c <light_main+0x134>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d035      	beq.n	800151c <light_main+0xe4>
				uint32_t ambient_light = sensors_light_get_ambient_light_level();
 80014b0:	f000 fa2a 	bl	8001908 <sensors_light_get_ambient_light_level>
 80014b4:	6078      	str	r0, [r7, #4]
				if(ambient_light <= 500) {
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014bc:	d803      	bhi.n	80014c6 <light_main+0x8e>
					current_light = DEFAULT_LIGHT_INTENSITY;
 80014be:	4b2c      	ldr	r3, [pc, #176]	@ (8001570 <light_main+0x138>)
 80014c0:	2264      	movs	r2, #100	@ 0x64
 80014c2:	701a      	strb	r2, [r3, #0]
 80014c4:	e024      	b.n	8001510 <light_main+0xd8>
				} else if (ambient_light <= 1000) {
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014cc:	d803      	bhi.n	80014d6 <light_main+0x9e>
					current_light = 80;
 80014ce:	4b28      	ldr	r3, [pc, #160]	@ (8001570 <light_main+0x138>)
 80014d0:	2250      	movs	r2, #80	@ 0x50
 80014d2:	701a      	strb	r2, [r3, #0]
 80014d4:	e01c      	b.n	8001510 <light_main+0xd8>
				} else if (ambient_light <= 1500) {
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80014dc:	4293      	cmp	r3, r2
 80014de:	d803      	bhi.n	80014e8 <light_main+0xb0>
					current_light = 60;
 80014e0:	4b23      	ldr	r3, [pc, #140]	@ (8001570 <light_main+0x138>)
 80014e2:	223c      	movs	r2, #60	@ 0x3c
 80014e4:	701a      	strb	r2, [r3, #0]
 80014e6:	e013      	b.n	8001510 <light_main+0xd8>
				} else if (ambient_light <= 2000) {
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80014ee:	d803      	bhi.n	80014f8 <light_main+0xc0>
					current_light = 40;
 80014f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001570 <light_main+0x138>)
 80014f2:	2228      	movs	r2, #40	@ 0x28
 80014f4:	701a      	strb	r2, [r3, #0]
 80014f6:	e00b      	b.n	8001510 <light_main+0xd8>
				} else if (ambient_light <= 2500) {
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80014fe:	4293      	cmp	r3, r2
 8001500:	d803      	bhi.n	800150a <light_main+0xd2>
					current_light = 20;
 8001502:	4b1b      	ldr	r3, [pc, #108]	@ (8001570 <light_main+0x138>)
 8001504:	2214      	movs	r2, #20
 8001506:	701a      	strb	r2, [r3, #0]
 8001508:	e002      	b.n	8001510 <light_main+0xd8>
					current_light = 10;
 800150a:	4b19      	ldr	r3, [pc, #100]	@ (8001570 <light_main+0x138>)
 800150c:	220a      	movs	r2, #10
 800150e:	701a      	strb	r2, [r3, #0]
				check_light_level = 0;
 8001510:	4b16      	ldr	r3, [pc, #88]	@ (800156c <light_main+0x134>)
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
				just_turned_on = 0;
 8001516:	4b11      	ldr	r3, [pc, #68]	@ (800155c <light_main+0x124>)
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
			if(!default_state) {
 800151c:	4b12      	ldr	r3, [pc, #72]	@ (8001568 <light_main+0x130>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d108      	bne.n	8001536 <light_main+0xfe>
				light_default_state(current_light);
 8001524:	4b12      	ldr	r3, [pc, #72]	@ (8001570 <light_main+0x138>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fe6f 	bl	800120c <light_default_state>
				default_state = 1;
 800152e:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <light_main+0x130>)
 8001530:	2201      	movs	r2, #1
 8001532:	701a      	strb	r2, [r3, #0]
 8001534:	e005      	b.n	8001542 <light_main+0x10a>
				light_set_current_intensity(current_light);
 8001536:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <light_main+0x138>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	4619      	mov	r1, r3
 800153c:	2000      	movs	r0, #0
 800153e:	f7ff fefd 	bl	800133c <light_set_intensity>
			movement_detection_reacted = 0;
 8001542:	4b07      	ldr	r3, [pc, #28]	@ (8001560 <light_main+0x128>)
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
}
 8001548:	e001      	b.n	800154e <light_main+0x116>
		light_shutdown();
 800154a:	f7ff fe51 	bl	80011f0 <light_shutdown>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200002b6 	.word	0x200002b6
 800155c:	200002b8 	.word	0x200002b8
 8001560:	200002b9 	.word	0x200002b9
 8001564:	20000168 	.word	0x20000168
 8001568:	20000016 	.word	0x20000016
 800156c:	200002b7 	.word	0x200002b7
 8001570:	200002ba 	.word	0x200002ba

08001574 <light_i2c_select_page>:
#include <stdint.h>
#include <string.h>
#include "light_i2c.h"
#include "stm32f4xx_hal.h"

HAL_StatusTypeDef light_i2c_select_page(uint8_t page) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af02      	add	r7, sp, #8
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2] = {COMMAND_REGISTER, page};
 800157e:	23fd      	movs	r3, #253	@ 0xfd
 8001580:	733b      	strb	r3, [r7, #12]
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(LIGHT_I2C_INTERFACE, LIGHT_MATRIX_ADDR, data, 2, 100);
 8001586:	f107 020c 	add.w	r2, r7, #12
 800158a:	2364      	movs	r3, #100	@ 0x64
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	2302      	movs	r3, #2
 8001590:	21e8      	movs	r1, #232	@ 0xe8
 8001592:	4804      	ldr	r0, [pc, #16]	@ (80015a4 <light_i2c_select_page+0x30>)
 8001594:	f001 fec8 	bl	8003328 <HAL_I2C_Master_Transmit>
 8001598:	4603      	mov	r3, r0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000084 	.word	0x20000084

080015a8 <light_i2c_write_single_register>:

HAL_StatusTypeDef light_i2c_write_single_register(uint8_t page, uint8_t reg, uint8_t value) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af02      	add	r7, sp, #8
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
 80015b2:	460b      	mov	r3, r1
 80015b4:	71bb      	strb	r3, [r7, #6]
 80015b6:	4613      	mov	r3, r2
 80015b8:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef page_selected = light_i2c_select_page(page);
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ffd9 	bl	8001574 <light_i2c_select_page>
 80015c2:	4603      	mov	r3, r0
 80015c4:	73fb      	strb	r3, [r7, #15]
	if(page_selected != HAL_BUSY) {
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d00e      	beq.n	80015ea <light_i2c_write_single_register+0x42>
		uint8_t data[2] = {reg, value};
 80015cc:	79bb      	ldrb	r3, [r7, #6]
 80015ce:	733b      	strb	r3, [r7, #12]
 80015d0:	797b      	ldrb	r3, [r7, #5]
 80015d2:	737b      	strb	r3, [r7, #13]
		return HAL_I2C_Master_Transmit(LIGHT_I2C_INTERFACE, LIGHT_MATRIX_ADDR, data, 2, 100);
 80015d4:	f107 020c 	add.w	r2, r7, #12
 80015d8:	2364      	movs	r3, #100	@ 0x64
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2302      	movs	r3, #2
 80015de:	21e8      	movs	r1, #232	@ 0xe8
 80015e0:	4804      	ldr	r0, [pc, #16]	@ (80015f4 <light_i2c_write_single_register+0x4c>)
 80015e2:	f001 fea1 	bl	8003328 <HAL_I2C_Master_Transmit>
 80015e6:	4603      	mov	r3, r0
 80015e8:	e000      	b.n	80015ec <light_i2c_write_single_register+0x44>
	}
	return page_selected;
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000084 	.word	0x20000084

080015f8 <light_i2c_send_data>:

HAL_StatusTypeDef light_i2c_send_data(uint8_t page, uint8_t reg, uint8_t *data, uint8_t data_len) {
 80015f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015fc:	b089      	sub	sp, #36	@ 0x24
 80015fe:	af02      	add	r7, sp, #8
 8001600:	603a      	str	r2, [r7, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	4603      	mov	r3, r0
 8001606:	71fb      	strb	r3, [r7, #7]
 8001608:	460b      	mov	r3, r1
 800160a:	71bb      	strb	r3, [r7, #6]
 800160c:	4613      	mov	r3, r2
 800160e:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef page_selected = light_i2c_select_page(page);
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ffae 	bl	8001574 <light_i2c_select_page>
 8001618:	4603      	mov	r3, r0
 800161a:	75fb      	strb	r3, [r7, #23]
	if(page_selected != HAL_BUSY) {
 800161c:	7dfb      	ldrb	r3, [r7, #23]
 800161e:	2b02      	cmp	r3, #2
 8001620:	d040      	beq.n	80016a4 <light_i2c_send_data+0xac>
 8001622:	466b      	mov	r3, sp
 8001624:	461e      	mov	r6, r3
		uint8_t buff[data_len+1];
 8001626:	797b      	ldrb	r3, [r7, #5]
 8001628:	1c59      	adds	r1, r3, #1
 800162a:	1e4b      	subs	r3, r1, #1
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	460a      	mov	r2, r1
 8001630:	2300      	movs	r3, #0
 8001632:	4690      	mov	r8, r2
 8001634:	4699      	mov	r9, r3
 8001636:	f04f 0200 	mov.w	r2, #0
 800163a:	f04f 0300 	mov.w	r3, #0
 800163e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001642:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001646:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800164a:	460a      	mov	r2, r1
 800164c:	2300      	movs	r3, #0
 800164e:	4614      	mov	r4, r2
 8001650:	461d      	mov	r5, r3
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	00eb      	lsls	r3, r5, #3
 800165c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001660:	00e2      	lsls	r2, r4, #3
 8001662:	460b      	mov	r3, r1
 8001664:	3307      	adds	r3, #7
 8001666:	08db      	lsrs	r3, r3, #3
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	ebad 0d03 	sub.w	sp, sp, r3
 800166e:	ab02      	add	r3, sp, #8
 8001670:	3300      	adds	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
		buff[0] = reg;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	79ba      	ldrb	r2, [r7, #6]
 8001678:	701a      	strb	r2, [r3, #0]
		memcpy(buff+1, data, data_len);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	3301      	adds	r3, #1
 800167e:	797a      	ldrb	r2, [r7, #5]
 8001680:	6839      	ldr	r1, [r7, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f006 f862 	bl	800774c <memcpy>
		return HAL_I2C_Master_Transmit(LIGHT_I2C_INTERFACE, LIGHT_MATRIX_ADDR, buff, data_len + 1, 100);
 8001688:	797b      	ldrb	r3, [r7, #5]
 800168a:	b29b      	uxth	r3, r3
 800168c:	3301      	adds	r3, #1
 800168e:	b29b      	uxth	r3, r3
 8001690:	2264      	movs	r2, #100	@ 0x64
 8001692:	9200      	str	r2, [sp, #0]
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	21e8      	movs	r1, #232	@ 0xe8
 8001698:	4805      	ldr	r0, [pc, #20]	@ (80016b0 <light_i2c_send_data+0xb8>)
 800169a:	f001 fe45 	bl	8003328 <HAL_I2C_Master_Transmit>
 800169e:	4603      	mov	r3, r0
 80016a0:	46b5      	mov	sp, r6
 80016a2:	e000      	b.n	80016a6 <light_i2c_send_data+0xae>
	}
	return page_selected;
 80016a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	371c      	adds	r7, #28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016b0:	20000084 	.word	0x20000084

080016b4 <panic_is_active>:
#include "stm32f4xx_hal.h"
#include <stdint.h>

static uint8_t panic_on = 0;

uint8_t panic_is_active() {
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
	return panic_on;
 80016b8:	4b03      	ldr	r3, [pc, #12]	@ (80016c8 <panic_is_active+0x14>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	200002bb 	.word	0x200002bb

080016cc <panic_activate>:

void panic_activate() {
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
	panic_on = 1;
 80016d0:	4b03      	ldr	r3, [pc, #12]	@ (80016e0 <panic_activate+0x14>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	701a      	strb	r2, [r3, #0]
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	200002bb 	.word	0x200002bb

080016e4 <panic_deactivate>:

void panic_deactivate() {
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
	panic_on = 0;
 80016e8:	4b03      	ldr	r3, [pc, #12]	@ (80016f8 <panic_deactivate+0x14>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	200002bb 	.word	0x200002bb

080016fc <panic_main>:

/*
 * @brief Main actions performed each main loop cycle by the panic module
 * @retval None
 */
void panic_main() {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
	if(panic_on) {
 8001700:	4b20      	ldr	r3, [pc, #128]	@ (8001784 <panic_main+0x88>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d03b      	beq.n	8001780 <panic_main+0x84>
		if(panic_button_is_pressed()) {
 8001708:	f000 f856 	bl	80017b8 <panic_button_is_pressed>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d018      	beq.n	8001744 <panic_main+0x48>
			if(panic_buzzer_is_active()) { // panic_button pressed with buzzer active
 8001712:	f000 f885 	bl	8001820 <panic_buzzer_is_active>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d004      	beq.n	8001726 <panic_main+0x2a>
				panic_buzzer_stop();
 800171c:	f000 f870 	bl	8001800 <panic_buzzer_stop>
				panic_timer_stop();
 8001720:	f000 f8b2 	bl	8001888 <panic_timer_stop>
			// do nothing
		}
	} else {
		// do nothing
	}
}
 8001724:	e02c      	b.n	8001780 <panic_main+0x84>
			} else if(panic_timer_is_active()) { // panic_button pressed with timer active but buzzer inactive
 8001726:	f000 f8bf 	bl	80018a8 <panic_timer_is_active>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d002      	beq.n	8001736 <panic_main+0x3a>
				panic_timer_stop();
 8001730:	f000 f8aa 	bl	8001888 <panic_timer_stop>
}
 8001734:	e024      	b.n	8001780 <panic_main+0x84>
				panic_timer_start();
 8001736:	f000 f897 	bl	8001868 <panic_timer_start>
				panic_buzzer_start();
 800173a:	f000 f849 	bl	80017d0 <panic_buzzer_start>
				panic_button_reset();
 800173e:	f000 f82f 	bl	80017a0 <panic_button_reset>
}
 8001742:	e01d      	b.n	8001780 <panic_main+0x84>
		} else if(panic_timer_is_active()) { // turn on and off the buzzer (normal mode)
 8001744:	f000 f8b0 	bl	80018a8 <panic_timer_is_active>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d018      	beq.n	8001780 <panic_main+0x84>
			if(panic_timer_is_elapsed()) {
 800174e:	f000 f8b7 	bl	80018c0 <panic_timer_is_elapsed>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d013      	beq.n	8001780 <panic_main+0x84>
				if(panic_buzzer_is_active()) {
 8001758:	f000 f862 	bl	8001820 <panic_buzzer_is_active>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d002      	beq.n	8001768 <panic_main+0x6c>
					panic_buzzer_stop();
 8001762:	f000 f84d 	bl	8001800 <panic_buzzer_stop>
 8001766:	e009      	b.n	800177c <panic_main+0x80>
					if(panic_buzzer_get_counter() == 5) {
 8001768:	f000 f866 	bl	8001838 <panic_buzzer_get_counter>
 800176c:	4603      	mov	r3, r0
 800176e:	2b05      	cmp	r3, #5
 8001770:	d102      	bne.n	8001778 <panic_main+0x7c>
						panic_timer_stop();
 8001772:	f000 f889 	bl	8001888 <panic_timer_stop>
 8001776:	e001      	b.n	800177c <panic_main+0x80>
						panic_buzzer_start();
 8001778:	f000 f82a 	bl	80017d0 <panic_buzzer_start>
				panic_timer_is_elapsed_reset();
 800177c:	f000 f8b8 	bl	80018f0 <panic_timer_is_elapsed_reset>
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200002bb 	.word	0x200002bb

08001788 <panic_button_set>:
 * All this function does is setting the button_pressed global
 * variable to true to trigger the reaction of the other modules
 * that need this information
 * @retval None
 */
void panic_button_set() {
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
	panic_button_pressed = 1;
 800178c:	4b03      	ldr	r3, [pc, #12]	@ (800179c <panic_button_set+0x14>)
 800178e:	2201      	movs	r2, #1
 8001790:	701a      	strb	r2, [r3, #0]
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	200002bc 	.word	0x200002bc

080017a0 <panic_button_reset>:
 * @brief This function is used to reset the panic button interrupt request variable, this means that the interrupt has been managed
 * This function resets the button_pressed global variable to stop
 * the panic procedure execution
 * @retval None
 */
void panic_button_reset() {
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
	panic_button_pressed = 0;
 80017a4:	4b03      	ldr	r3, [pc, #12]	@ (80017b4 <panic_button_reset+0x14>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	200002bc 	.word	0x200002bc

080017b8 <panic_button_is_pressed>:

/*
 * @brief This function is used to check if an panic button interrupt has been triggered
 * @retval panic_button_pressed variable value which tells if an interrupt on button's EXTI line has been triggered
 */
uint8_t panic_button_is_pressed() {
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
	return panic_button_pressed;
 80017bc:	4b03      	ldr	r3, [pc, #12]	@ (80017cc <panic_button_is_pressed+0x14>)
 80017be:	781b      	ldrb	r3, [r3, #0]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	200002bc 	.word	0x200002bc

080017d0 <panic_buzzer_start>:
/*
 * @brief Starts the panic buzzer
 * This function is used to turn on the panic buzzer and make it sound
 * @retval None
 */
void panic_buzzer_start() {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PANIC_BUZZER, GPIO_PIN_SET);
 80017d4:	2201      	movs	r2, #1
 80017d6:	2180      	movs	r1, #128	@ 0x80
 80017d8:	4806      	ldr	r0, [pc, #24]	@ (80017f4 <panic_buzzer_start+0x24>)
 80017da:	f001 fc19 	bl	8003010 <HAL_GPIO_WritePin>
	panic_buzzer_active = 1;
 80017de:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <panic_buzzer_start+0x28>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	701a      	strb	r2, [r3, #0]
	panic_buzzer_counter++;
 80017e4:	4b05      	ldr	r3, [pc, #20]	@ (80017fc <panic_buzzer_start+0x2c>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	3301      	adds	r3, #1
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	4b03      	ldr	r3, [pc, #12]	@ (80017fc <panic_buzzer_start+0x2c>)
 80017ee:	701a      	strb	r2, [r3, #0]
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40021000 	.word	0x40021000
 80017f8:	200002bd 	.word	0x200002bd
 80017fc:	200002be 	.word	0x200002be

08001800 <panic_buzzer_stop>:
/*
 * @brief Stops the panic buzzer
 * This function is used to stop any sound make by the panic buzzer
 * @retval None
 */
void panic_buzzer_stop() {
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PANIC_BUZZER, GPIO_PIN_RESET);
 8001804:	2200      	movs	r2, #0
 8001806:	2180      	movs	r1, #128	@ 0x80
 8001808:	4803      	ldr	r0, [pc, #12]	@ (8001818 <panic_buzzer_stop+0x18>)
 800180a:	f001 fc01 	bl	8003010 <HAL_GPIO_WritePin>
	panic_buzzer_active = 0;
 800180e:	4b03      	ldr	r3, [pc, #12]	@ (800181c <panic_buzzer_stop+0x1c>)
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40021000 	.word	0x40021000
 800181c:	200002bd 	.word	0x200002bd

08001820 <panic_buzzer_is_active>:
/*
 * @brief Yells the panic buzzer status
 * This function is a getter for the panic_buzzer_active variable
 * @retval the panic_buzzer_active current value
 */
uint8_t panic_buzzer_is_active() {
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
	return panic_buzzer_active;
 8001824:	4b03      	ldr	r3, [pc, #12]	@ (8001834 <panic_buzzer_is_active+0x14>)
 8001826:	781b      	ldrb	r3, [r3, #0]
}
 8001828:	4618      	mov	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	200002bd 	.word	0x200002bd

08001838 <panic_buzzer_get_counter>:
/*
 * @brief Yells how many times the buzzer has been activated
 * This function is a getter for the panic_buzzer_counter variable
 * @retval the panic_buzzer_counter current value
 */
uint8_t panic_buzzer_get_counter() {
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
	return panic_buzzer_counter;
 800183c:	4b03      	ldr	r3, [pc, #12]	@ (800184c <panic_buzzer_get_counter+0x14>)
 800183e:	781b      	ldrb	r3, [r3, #0]
}
 8001840:	4618      	mov	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	200002be 	.word	0x200002be

08001850 <panic_buzzer_reset_counter>:
 * @brief Sets the panic buzzer counter to 0
 * This function resets the panic_buzzer_counter to zero, this is used to restart the emergency sound sequence
 * a complete sequence lasts 5 sounds.
 * @retval None
 */
void panic_buzzer_reset_counter() {
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
	panic_buzzer_counter = 0;
 8001854:	4b03      	ldr	r3, [pc, #12]	@ (8001864 <panic_buzzer_reset_counter+0x14>)
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	200002be 	.word	0x200002be

08001868 <panic_timer_start>:
/*
 * @brief This function make the panic timer start
 * All this function does is making the panic timer start and activate its interrupt triggering
 * @retval None
 */
void panic_timer_start() {
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(PANIC_TIMER);
 800186c:	4804      	ldr	r0, [pc, #16]	@ (8001880 <panic_timer_start+0x18>)
 800186e:	f004 fa6f 	bl	8005d50 <HAL_TIM_Base_Start_IT>
	timer_active = 1;
 8001872:	4b04      	ldr	r3, [pc, #16]	@ (8001884 <panic_timer_start+0x1c>)
 8001874:	2201      	movs	r2, #1
 8001876:	701a      	strb	r2, [r3, #0]
	panic_buzzer_reset_counter();
 8001878:	f7ff ffea 	bl	8001850 <panic_buzzer_reset_counter>
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	200000d8 	.word	0x200000d8
 8001884:	200002bf 	.word	0x200002bf

08001888 <panic_timer_stop>:
/*
 * @brief This function makes the panic timer stop
 * All this function does is making the panic timer stop and deactivates timer's interrupt triggering
 * @retval None
 */
void panic_timer_stop() {
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(PANIC_TIMER);
 800188c:	4804      	ldr	r0, [pc, #16]	@ (80018a0 <panic_timer_stop+0x18>)
 800188e:	f004 fac1 	bl	8005e14 <HAL_TIM_Base_Stop_IT>
	timer_active = 0;
 8001892:	4b04      	ldr	r3, [pc, #16]	@ (80018a4 <panic_timer_stop+0x1c>)
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
	panic_buzzer_reset_counter();
 8001898:	f7ff ffda 	bl	8001850 <panic_buzzer_reset_counter>
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	200000d8 	.word	0x200000d8
 80018a4:	200002bf 	.word	0x200002bf

080018a8 <panic_timer_is_active>:

/*
 * @brief Yells if the panic timer is active
 * @retval panic_timer_active variable value
 */
uint8_t panic_timer_is_active() {
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
	return timer_active;
 80018ac:	4b03      	ldr	r3, [pc, #12]	@ (80018bc <panic_timer_is_active+0x14>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	200002bf 	.word	0x200002bf

080018c0 <panic_timer_is_elapsed>:

/*
 * @brief Tells if a interrupt request has been triggered by timer elapsed event
 * @retval panic_timer_elapsed variable value
 */
uint8_t panic_timer_is_elapsed() {
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
	return timer_elapsed;
 80018c4:	4b03      	ldr	r3, [pc, #12]	@ (80018d4 <panic_timer_is_elapsed+0x14>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	200002c0 	.word	0x200002c0

080018d8 <panic_timer_elapsed>:

void panic_timer_elapsed() {
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
	timer_elapsed = 1;
 80018dc:	4b03      	ldr	r3, [pc, #12]	@ (80018ec <panic_timer_elapsed+0x14>)
 80018de:	2201      	movs	r2, #1
 80018e0:	701a      	strb	r2, [r3, #0]
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	200002c0 	.word	0x200002c0

080018f0 <panic_timer_is_elapsed_reset>:
/*
 * @brief Resets the panic_timer_elapsed variable
 * This function sets panic_timer_elapsed variable back to 0 meaning that the interrupt request has been managed
 * @retval None
 */
void panic_timer_is_elapsed_reset() {
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
	timer_elapsed = 0;
 80018f4:	4b03      	ldr	r3, [pc, #12]	@ (8001904 <panic_timer_is_elapsed_reset+0x14>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	200002c0 	.word	0x200002c0

08001908 <sensors_light_get_ambient_light_level>:

/*
 * @brief Reads current ambient light level from the sensor
 * @retval current ambient light level
 */
uint32_t sensors_light_get_ambient_light_level() {
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
	uint32_t ambient_light = SENSORS_LIGHT_SENSOR_INACTIVE;
 800190e:	f04f 3311 	mov.w	r3, #286331153	@ 0x11111111
 8001912:	607b      	str	r3, [r7, #4]
	if(light_sensor_active) {
 8001914:	4b0c      	ldr	r3, [pc, #48]	@ (8001948 <sensors_light_get_ambient_light_level+0x40>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d010      	beq.n	800193e <sensors_light_get_ambient_light_level+0x36>
		HAL_ADC_Start(SENSORS_LIGHT_SENSOR_ADC);
 800191c:	480b      	ldr	r0, [pc, #44]	@ (800194c <sensors_light_get_ambient_light_level+0x44>)
 800191e:	f000 f909 	bl	8001b34 <HAL_ADC_Start>
		if(HAL_ADC_PollForConversion(SENSORS_LIGHT_SENSOR_ADC, 10) == HAL_OK) {
 8001922:	210a      	movs	r1, #10
 8001924:	4809      	ldr	r0, [pc, #36]	@ (800194c <sensors_light_get_ambient_light_level+0x44>)
 8001926:	f000 f9ec 	bl	8001d02 <HAL_ADC_PollForConversion>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d106      	bne.n	800193e <sensors_light_get_ambient_light_level+0x36>
			ambient_light = HAL_ADC_GetValue(SENSORS_LIGHT_SENSOR_ADC);
 8001930:	4806      	ldr	r0, [pc, #24]	@ (800194c <sensors_light_get_ambient_light_level+0x44>)
 8001932:	f000 fa71 	bl	8001e18 <HAL_ADC_GetValue>
 8001936:	6078      	str	r0, [r7, #4]
			HAL_ADC_Stop(SENSORS_LIGHT_SENSOR_ADC);
 8001938:	4804      	ldr	r0, [pc, #16]	@ (800194c <sensors_light_get_ambient_light_level+0x44>)
 800193a:	f000 f9af 	bl	8001c9c <HAL_ADC_Stop>
		}
	}
	return ambient_light;
 800193e:	687b      	ldr	r3, [r7, #4]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	200002c1 	.word	0x200002c1
 800194c:	2000003c 	.word	0x2000003c

08001950 <sensors_light_sensor_start>:

/*
 * @brief Sets the light_sensor_active variable to 1 telling that it is possible to check the light intensity value
 * @retval None
 */
void sensors_light_sensor_start() {
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
	light_sensor_active = 1;
 8001954:	4b03      	ldr	r3, [pc, #12]	@ (8001964 <sensors_light_sensor_start+0x14>)
 8001956:	2201      	movs	r2, #1
 8001958:	701a      	strb	r2, [r3, #0]
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	200002c1 	.word	0x200002c1

08001968 <sensors_light_sensor_stop>:

/*
 * @brief Sets the light_sensor_active variable to 0 telling that it is not possible to check the light intensity value
 * @retval None
 */
void sensors_light_sensor_stop() {
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
	light_sensor_active = 0;
 800196c:	4b03      	ldr	r3, [pc, #12]	@ (800197c <sensors_light_sensor_stop+0x14>)
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	200002c1 	.word	0x200002c1

08001980 <sensors_movement_detected>:
 * @brief Routine executed when movement is detected
 * This function sets the movement_sensor_detected variable to 1 to trigger
 * a reaction to the interrupted generated by the movement detection
 * @retval None
 */
void sensors_movement_detected() {
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
	movement_sensor_detected = 1;
 8001984:	4b03      	ldr	r3, [pc, #12]	@ (8001994 <sensors_movement_detected+0x14>)
 8001986:	2201      	movs	r2, #1
 8001988:	701a      	strb	r2, [r3, #0]
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	200002c2 	.word	0x200002c2

08001998 <sensors_movement_is_detected>:
/*
 * @brief Yells the movement_sensor_detected variable value
 * This function is used to check if there has been any movement
 * @retval movement_sensor_detected current value
 */
uint8_t sensors_movement_is_detected() {
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
	return movement_sensor_detected;
 800199c:	4b03      	ldr	r3, [pc, #12]	@ (80019ac <sensors_movement_is_detected+0x14>)
 800199e:	781b      	ldrb	r3, [r3, #0]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	200002c2 	.word	0x200002c2

080019b0 <sensors_movement_detected_reset>:
 * @brief Resets movement_sensor_detected to 0
 * This function is used to tell that the interrupt has been correctly served
 * by resetting the associated variable
 * @retval None
 */
void sensors_movement_detected_reset() {
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
	movement_sensor_detected = 0;
 80019b4:	4b03      	ldr	r3, [pc, #12]	@ (80019c4 <sensors_movement_detected_reset+0x14>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]
}
 80019ba:	bf00      	nop
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	200002c2 	.word	0x200002c2

080019c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001a08 <HAL_Init+0x40>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001a08 <HAL_Init+0x40>)
 80019d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <HAL_Init+0x40>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001a08 <HAL_Init+0x40>)
 80019de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019e4:	4b08      	ldr	r3, [pc, #32]	@ (8001a08 <HAL_Init+0x40>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a07      	ldr	r2, [pc, #28]	@ (8001a08 <HAL_Init+0x40>)
 80019ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f0:	2003      	movs	r0, #3
 80019f2:	f000 fd33 	bl	800245c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019f6:	2000      	movs	r0, #0
 80019f8:	f000 f808 	bl	8001a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019fc:	f7ff f8cc 	bl	8000b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40023c00 	.word	0x40023c00

08001a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a14:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <HAL_InitTick+0x54>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <HAL_InitTick+0x58>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 fd4f 	bl	80024ce <HAL_SYSTICK_Config>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00e      	b.n	8001a58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b0f      	cmp	r3, #15
 8001a3e:	d80a      	bhi.n	8001a56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a40:	2200      	movs	r2, #0
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a48:	f000 fd13 	bl	8002472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a4c:	4a06      	ldr	r2, [pc, #24]	@ (8001a68 <HAL_InitTick+0x5c>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	e000      	b.n	8001a58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000000 	.word	0x20000000
 8001a64:	2000001c 	.word	0x2000001c
 8001a68:	20000018 	.word	0x20000018

08001a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a70:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <HAL_IncTick+0x20>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <HAL_IncTick+0x24>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4a04      	ldr	r2, [pc, #16]	@ (8001a90 <HAL_IncTick+0x24>)
 8001a7e:	6013      	str	r3, [r2, #0]
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	2000001c 	.word	0x2000001c
 8001a90:	200002c4 	.word	0x200002c4

08001a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return uwTick;
 8001a98:	4b03      	ldr	r3, [pc, #12]	@ (8001aa8 <HAL_GetTick+0x14>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	200002c4 	.word	0x200002c4

08001aac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e033      	b.n	8001b2a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d109      	bne.n	8001ade <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff f88c 	bl	8000be8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d118      	bne.n	8001b1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aee:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001af2:	f023 0302 	bic.w	r3, r3, #2
 8001af6:	f043 0202 	orr.w	r2, r3, #2
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 faca 	bl	8002098 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	f023 0303 	bic.w	r3, r3, #3
 8001b12:	f043 0201 	orr.w	r2, r3, #1
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b1a:	e001      	b.n	8001b20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_ADC_Start+0x1a>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e097      	b.n	8001c7e <HAL_ADC_Start+0x14a>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d018      	beq.n	8001b96 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0201 	orr.w	r2, r2, #1
 8001b72:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b74:	4b45      	ldr	r3, [pc, #276]	@ (8001c8c <HAL_ADC_Start+0x158>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a45      	ldr	r2, [pc, #276]	@ (8001c90 <HAL_ADC_Start+0x15c>)
 8001b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7e:	0c9a      	lsrs	r2, r3, #18
 8001b80:	4613      	mov	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4413      	add	r3, r2
 8001b86:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001b88:	e002      	b.n	8001b90 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f9      	bne.n	8001b8a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d15f      	bne.n	8001c64 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001bac:	f023 0301 	bic.w	r3, r3, #1
 8001bb0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d007      	beq.n	8001bd6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001bce:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001be2:	d106      	bne.n	8001bf2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be8:	f023 0206 	bic.w	r2, r3, #6
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	645a      	str	r2, [r3, #68]	@ 0x44
 8001bf0:	e002      	b.n	8001bf8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c00:	4b24      	ldr	r3, [pc, #144]	@ (8001c94 <HAL_ADC_Start+0x160>)
 8001c02:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001c0c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 031f 	and.w	r3, r3, #31
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10f      	bne.n	8001c3a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d129      	bne.n	8001c7c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	e020      	b.n	8001c7c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a16      	ldr	r2, [pc, #88]	@ (8001c98 <HAL_ADC_Start+0x164>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d11b      	bne.n	8001c7c <HAL_ADC_Start+0x148>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d114      	bne.n	8001c7c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c60:	609a      	str	r2, [r3, #8]
 8001c62:	e00b      	b.n	8001c7c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c68:	f043 0210 	orr.w	r2, r3, #16
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c74:	f043 0201 	orr.w	r2, r3, #1
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	431bde83 	.word	0x431bde83
 8001c94:	40012300 	.word	0x40012300
 8001c98:	40012000 	.word	0x40012000

08001c9c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_ADC_Stop+0x16>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e021      	b.n	8001cf6 <HAL_ADC_Stop+0x5a>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0201 	bic.w	r2, r2, #1
 8001cc8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d109      	bne.n	8001cec <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cdc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ce0:	f023 0301 	bic.w	r3, r3, #1
 8001ce4:	f043 0201 	orr.w	r2, r3, #1
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b084      	sub	sp, #16
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d1e:	d113      	bne.n	8001d48 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d2e:	d10b      	bne.n	8001d48 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d34:	f043 0220 	orr.w	r2, r3, #32
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e063      	b.n	8001e10 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d48:	f7ff fea4 	bl	8001a94 <HAL_GetTick>
 8001d4c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d4e:	e021      	b.n	8001d94 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d56:	d01d      	beq.n	8001d94 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d007      	beq.n	8001d6e <HAL_ADC_PollForConversion+0x6c>
 8001d5e:	f7ff fe99 	bl	8001a94 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d212      	bcs.n	8001d94 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d00b      	beq.n	8001d94 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d80:	f043 0204 	orr.w	r2, r3, #4
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e03d      	b.n	8001e10 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d1d6      	bne.n	8001d50 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f06f 0212 	mvn.w	r2, #18
 8001daa:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d123      	bne.n	8001e0e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d11f      	bne.n	8001e0e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d006      	beq.n	8001dea <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d111      	bne.n	8001e0e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d105      	bne.n	8001e0e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	f043 0201 	orr.w	r2, r3, #1
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x1c>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e113      	b.n	8002078 <HAL_ADC_ConfigChannel+0x244>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b09      	cmp	r3, #9
 8001e5e:	d925      	bls.n	8001eac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68d9      	ldr	r1, [r3, #12]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4613      	mov	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	3b1e      	subs	r3, #30
 8001e76:	2207      	movs	r2, #7
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43da      	mvns	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	400a      	ands	r2, r1
 8001e84:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68d9      	ldr	r1, [r3, #12]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	4618      	mov	r0, r3
 8001e98:	4603      	mov	r3, r0
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4403      	add	r3, r0
 8001e9e:	3b1e      	subs	r3, #30
 8001ea0:	409a      	lsls	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	e022      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6919      	ldr	r1, [r3, #16]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4613      	mov	r3, r2
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4413      	add	r3, r2
 8001ec0:	2207      	movs	r2, #7
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43da      	mvns	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	400a      	ands	r2, r1
 8001ece:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6919      	ldr	r1, [r3, #16]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4403      	add	r3, r0
 8001ee8:	409a      	lsls	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b06      	cmp	r3, #6
 8001ef8:	d824      	bhi.n	8001f44 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	3b05      	subs	r3, #5
 8001f0c:	221f      	movs	r2, #31
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43da      	mvns	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	400a      	ands	r2, r1
 8001f1a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	4618      	mov	r0, r3
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	3b05      	subs	r3, #5
 8001f36:	fa00 f203 	lsl.w	r2, r0, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f42:	e04c      	b.n	8001fde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b0c      	cmp	r3, #12
 8001f4a:	d824      	bhi.n	8001f96 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3b23      	subs	r3, #35	@ 0x23
 8001f5e:	221f      	movs	r2, #31
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43da      	mvns	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	400a      	ands	r2, r1
 8001f6c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	3b23      	subs	r3, #35	@ 0x23
 8001f88:	fa00 f203 	lsl.w	r2, r0, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f94:	e023      	b.n	8001fde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3b41      	subs	r3, #65	@ 0x41
 8001fa8:	221f      	movs	r2, #31
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43da      	mvns	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	400a      	ands	r2, r1
 8001fb6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	3b41      	subs	r3, #65	@ 0x41
 8001fd2:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fde:	4b29      	ldr	r3, [pc, #164]	@ (8002084 <HAL_ADC_ConfigChannel+0x250>)
 8001fe0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a28      	ldr	r2, [pc, #160]	@ (8002088 <HAL_ADC_ConfigChannel+0x254>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d10f      	bne.n	800200c <HAL_ADC_ConfigChannel+0x1d8>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b12      	cmp	r3, #18
 8001ff2:	d10b      	bne.n	800200c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a1d      	ldr	r2, [pc, #116]	@ (8002088 <HAL_ADC_ConfigChannel+0x254>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d12b      	bne.n	800206e <HAL_ADC_ConfigChannel+0x23a>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a1c      	ldr	r2, [pc, #112]	@ (800208c <HAL_ADC_ConfigChannel+0x258>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d003      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x1f4>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b11      	cmp	r3, #17
 8002026:	d122      	bne.n	800206e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a11      	ldr	r2, [pc, #68]	@ (800208c <HAL_ADC_ConfigChannel+0x258>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d111      	bne.n	800206e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800204a:	4b11      	ldr	r3, [pc, #68]	@ (8002090 <HAL_ADC_ConfigChannel+0x25c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a11      	ldr	r2, [pc, #68]	@ (8002094 <HAL_ADC_ConfigChannel+0x260>)
 8002050:	fba2 2303 	umull	r2, r3, r2, r3
 8002054:	0c9a      	lsrs	r2, r3, #18
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002060:	e002      	b.n	8002068 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	3b01      	subs	r3, #1
 8002066:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f9      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	40012300 	.word	0x40012300
 8002088:	40012000 	.word	0x40012000
 800208c:	10000012 	.word	0x10000012
 8002090:	20000000 	.word	0x20000000
 8002094:	431bde83 	.word	0x431bde83

08002098 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020a0:	4b79      	ldr	r3, [pc, #484]	@ (8002288 <ADC_Init+0x1f0>)
 80020a2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	431a      	orrs	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6859      	ldr	r1, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	021a      	lsls	r2, r3, #8
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80020f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6859      	ldr	r1, [r3, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002112:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6899      	ldr	r1, [r3, #8]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800212a:	4a58      	ldr	r2, [pc, #352]	@ (800228c <ADC_Init+0x1f4>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d022      	beq.n	8002176 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800213e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6899      	ldr	r1, [r3, #8]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	430a      	orrs	r2, r1
 8002150:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002160:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6899      	ldr	r1, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	e00f      	b.n	8002196 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002184:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002194:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 0202 	bic.w	r2, r2, #2
 80021a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6899      	ldr	r1, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	7e1b      	ldrb	r3, [r3, #24]
 80021b0:	005a      	lsls	r2, r3, #1
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d01b      	beq.n	80021fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021d2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80021e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6859      	ldr	r1, [r3, #4]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ee:	3b01      	subs	r3, #1
 80021f0:	035a      	lsls	r2, r3, #13
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	e007      	b.n	800220c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800220a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800221a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	3b01      	subs	r3, #1
 8002228:	051a      	lsls	r2, r3, #20
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002240:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6899      	ldr	r1, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800224e:	025a      	lsls	r2, r3, #9
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002266:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6899      	ldr	r1, [r3, #8]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	029a      	lsls	r2, r3, #10
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	609a      	str	r2, [r3, #8]
}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	40012300 	.word	0x40012300
 800228c:	0f000001 	.word	0x0f000001

08002290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022a0:	4b0c      	ldr	r3, [pc, #48]	@ (80022d4 <__NVIC_SetPriorityGrouping+0x44>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022ac:	4013      	ands	r3, r2
 80022ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022c2:	4a04      	ldr	r2, [pc, #16]	@ (80022d4 <__NVIC_SetPriorityGrouping+0x44>)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	60d3      	str	r3, [r2, #12]
}
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022dc:	4b04      	ldr	r3, [pc, #16]	@ (80022f0 <__NVIC_GetPriorityGrouping+0x18>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	0a1b      	lsrs	r3, r3, #8
 80022e2:	f003 0307 	and.w	r3, r3, #7
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	2b00      	cmp	r3, #0
 8002304:	db0b      	blt.n	800231e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	f003 021f 	and.w	r2, r3, #31
 800230c:	4907      	ldr	r1, [pc, #28]	@ (800232c <__NVIC_EnableIRQ+0x38>)
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	095b      	lsrs	r3, r3, #5
 8002314:	2001      	movs	r0, #1
 8002316:	fa00 f202 	lsl.w	r2, r0, r2
 800231a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	e000e100 	.word	0xe000e100

08002330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	6039      	str	r1, [r7, #0]
 800233a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002340:	2b00      	cmp	r3, #0
 8002342:	db0a      	blt.n	800235a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	b2da      	uxtb	r2, r3
 8002348:	490c      	ldr	r1, [pc, #48]	@ (800237c <__NVIC_SetPriority+0x4c>)
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	0112      	lsls	r2, r2, #4
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	440b      	add	r3, r1
 8002354:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002358:	e00a      	b.n	8002370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	b2da      	uxtb	r2, r3
 800235e:	4908      	ldr	r1, [pc, #32]	@ (8002380 <__NVIC_SetPriority+0x50>)
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	3b04      	subs	r3, #4
 8002368:	0112      	lsls	r2, r2, #4
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	440b      	add	r3, r1
 800236e:	761a      	strb	r2, [r3, #24]
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	e000e100 	.word	0xe000e100
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002384:	b480      	push	{r7}
 8002386:	b089      	sub	sp, #36	@ 0x24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f1c3 0307 	rsb	r3, r3, #7
 800239e:	2b04      	cmp	r3, #4
 80023a0:	bf28      	it	cs
 80023a2:	2304      	movcs	r3, #4
 80023a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3304      	adds	r3, #4
 80023aa:	2b06      	cmp	r3, #6
 80023ac:	d902      	bls.n	80023b4 <NVIC_EncodePriority+0x30>
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3b03      	subs	r3, #3
 80023b2:	e000      	b.n	80023b6 <NVIC_EncodePriority+0x32>
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43da      	mvns	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	401a      	ands	r2, r3
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	fa01 f303 	lsl.w	r3, r1, r3
 80023d6:	43d9      	mvns	r1, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023dc:	4313      	orrs	r3, r2
         );
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3724      	adds	r7, #36	@ 0x24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80023f0:	f3bf 8f4f 	dsb	sy
}
 80023f4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80023f6:	4b06      	ldr	r3, [pc, #24]	@ (8002410 <__NVIC_SystemReset+0x24>)
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80023fe:	4904      	ldr	r1, [pc, #16]	@ (8002410 <__NVIC_SystemReset+0x24>)
 8002400:	4b04      	ldr	r3, [pc, #16]	@ (8002414 <__NVIC_SystemReset+0x28>)
 8002402:	4313      	orrs	r3, r2
 8002404:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002406:	f3bf 8f4f 	dsb	sy
}
 800240a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800240c:	bf00      	nop
 800240e:	e7fd      	b.n	800240c <__NVIC_SystemReset+0x20>
 8002410:	e000ed00 	.word	0xe000ed00
 8002414:	05fa0004 	.word	0x05fa0004

08002418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3b01      	subs	r3, #1
 8002424:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002428:	d301      	bcc.n	800242e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800242a:	2301      	movs	r3, #1
 800242c:	e00f      	b.n	800244e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800242e:	4a0a      	ldr	r2, [pc, #40]	@ (8002458 <SysTick_Config+0x40>)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002436:	210f      	movs	r1, #15
 8002438:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800243c:	f7ff ff78 	bl	8002330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002440:	4b05      	ldr	r3, [pc, #20]	@ (8002458 <SysTick_Config+0x40>)
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002446:	4b04      	ldr	r3, [pc, #16]	@ (8002458 <SysTick_Config+0x40>)
 8002448:	2207      	movs	r2, #7
 800244a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	e000e010 	.word	0xe000e010

0800245c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff ff13 	bl	8002290 <__NVIC_SetPriorityGrouping>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
 800247e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002484:	f7ff ff28 	bl	80022d8 <__NVIC_GetPriorityGrouping>
 8002488:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	6978      	ldr	r0, [r7, #20]
 8002490:	f7ff ff78 	bl	8002384 <NVIC_EncodePriority>
 8002494:	4602      	mov	r2, r0
 8002496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249a:	4611      	mov	r1, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff47 	bl	8002330 <__NVIC_SetPriority>
}
 80024a2:	bf00      	nop
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	4603      	mov	r3, r0
 80024b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff1b 	bl	80022f4 <__NVIC_EnableIRQ>
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80024ca:	f7ff ff8f 	bl	80023ec <__NVIC_SystemReset>

080024ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff ff9e 	bl	8002418 <SysTick_Config>
 80024dc:	4603      	mov	r3, r0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024f4:	f7ff face 	bl	8001a94 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e099      	b.n	8002638 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0201 	bic.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002524:	e00f      	b.n	8002546 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002526:	f7ff fab5 	bl	8001a94 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b05      	cmp	r3, #5
 8002532:	d908      	bls.n	8002546 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2220      	movs	r2, #32
 8002538:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2203      	movs	r2, #3
 800253e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e078      	b.n	8002638 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1e8      	bne.n	8002526 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	4b38      	ldr	r3, [pc, #224]	@ (8002640 <HAL_DMA_Init+0x158>)
 8002560:	4013      	ands	r3, r2
 8002562:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002572:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800257e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800258a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	4313      	orrs	r3, r2
 8002596:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259c:	2b04      	cmp	r3, #4
 800259e:	d107      	bne.n	80025b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a8:	4313      	orrs	r3, r2
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f023 0307 	bic.w	r3, r3, #7
 80025c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d117      	bne.n	800260a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00e      	beq.n	800260a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 fb0f 	bl	8002c10 <DMA_CheckFifoParam>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d008      	beq.n	800260a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2240      	movs	r2, #64	@ 0x40
 80025fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002606:	2301      	movs	r3, #1
 8002608:	e016      	b.n	8002638 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 fac6 	bl	8002ba4 <DMA_CalcBaseAndBitshift>
 8002618:	4603      	mov	r3, r0
 800261a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002620:	223f      	movs	r2, #63	@ 0x3f
 8002622:	409a      	lsls	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	f010803f 	.word	0xf010803f

08002644 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
 8002650:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_DMA_Start_IT+0x26>
 8002666:	2302      	movs	r3, #2
 8002668:	e040      	b.n	80026ec <HAL_DMA_Start_IT+0xa8>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b01      	cmp	r3, #1
 800267c:	d12f      	bne.n	80026de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2202      	movs	r2, #2
 8002682:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	68b9      	ldr	r1, [r7, #8]
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 fa58 	bl	8002b48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269c:	223f      	movs	r2, #63	@ 0x3f
 800269e:	409a      	lsls	r2, r3
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0216 	orr.w	r2, r2, #22
 80026b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d007      	beq.n	80026cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0208 	orr.w	r2, r2, #8
 80026ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0201 	orr.w	r2, r2, #1
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	e005      	b.n	80026ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026e6:	2302      	movs	r3, #2
 80026e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002700:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002702:	f7ff f9c7 	bl	8001a94 <HAL_GetTick>
 8002706:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d008      	beq.n	8002726 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2280      	movs	r2, #128	@ 0x80
 8002718:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e052      	b.n	80027cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0216 	bic.w	r2, r2, #22
 8002734:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695a      	ldr	r2, [r3, #20]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002744:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274a:	2b00      	cmp	r3, #0
 800274c:	d103      	bne.n	8002756 <HAL_DMA_Abort+0x62>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002752:	2b00      	cmp	r3, #0
 8002754:	d007      	beq.n	8002766 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0208 	bic.w	r2, r2, #8
 8002764:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0201 	bic.w	r2, r2, #1
 8002774:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002776:	e013      	b.n	80027a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002778:	f7ff f98c 	bl	8001a94 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b05      	cmp	r3, #5
 8002784:	d90c      	bls.n	80027a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2220      	movs	r2, #32
 800278a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2203      	movs	r2, #3
 8002790:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e015      	b.n	80027cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1e4      	bne.n	8002778 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b2:	223f      	movs	r2, #63	@ 0x3f
 80027b4:	409a      	lsls	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d004      	beq.n	80027f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2280      	movs	r2, #128	@ 0x80
 80027ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e00c      	b.n	800280c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2205      	movs	r2, #5
 80027f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0201 	bic.w	r2, r2, #1
 8002808:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002824:	4b8e      	ldr	r3, [pc, #568]	@ (8002a60 <HAL_DMA_IRQHandler+0x248>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a8e      	ldr	r2, [pc, #568]	@ (8002a64 <HAL_DMA_IRQHandler+0x24c>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	0a9b      	lsrs	r3, r3, #10
 8002830:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002836:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002842:	2208      	movs	r2, #8
 8002844:	409a      	lsls	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4013      	ands	r3, r2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d01a      	beq.n	8002884 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	d013      	beq.n	8002884 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0204 	bic.w	r2, r2, #4
 800286a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002870:	2208      	movs	r2, #8
 8002872:	409a      	lsls	r2, r3
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800287c:	f043 0201 	orr.w	r2, r3, #1
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002888:	2201      	movs	r2, #1
 800288a:	409a      	lsls	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4013      	ands	r3, r2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d012      	beq.n	80028ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00b      	beq.n	80028ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a6:	2201      	movs	r2, #1
 80028a8:	409a      	lsls	r2, r3
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b2:	f043 0202 	orr.w	r2, r3, #2
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028be:	2204      	movs	r2, #4
 80028c0:	409a      	lsls	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4013      	ands	r3, r2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d012      	beq.n	80028f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00b      	beq.n	80028f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028dc:	2204      	movs	r2, #4
 80028de:	409a      	lsls	r2, r3
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e8:	f043 0204 	orr.w	r2, r3, #4
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f4:	2210      	movs	r2, #16
 80028f6:	409a      	lsls	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4013      	ands	r3, r2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d043      	beq.n	8002988 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d03c      	beq.n	8002988 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002912:	2210      	movs	r2, #16
 8002914:	409a      	lsls	r2, r3
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d018      	beq.n	800295a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d108      	bne.n	8002948 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293a:	2b00      	cmp	r3, #0
 800293c:	d024      	beq.n	8002988 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	4798      	blx	r3
 8002946:	e01f      	b.n	8002988 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800294c:	2b00      	cmp	r3, #0
 800294e:	d01b      	beq.n	8002988 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	4798      	blx	r3
 8002958:	e016      	b.n	8002988 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002964:	2b00      	cmp	r3, #0
 8002966:	d107      	bne.n	8002978 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0208 	bic.w	r2, r2, #8
 8002976:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298c:	2220      	movs	r2, #32
 800298e:	409a      	lsls	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4013      	ands	r3, r2
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 808f 	beq.w	8002ab8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0310 	and.w	r3, r3, #16
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 8087 	beq.w	8002ab8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ae:	2220      	movs	r2, #32
 80029b0:	409a      	lsls	r2, r3
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b05      	cmp	r3, #5
 80029c0:	d136      	bne.n	8002a30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0216 	bic.w	r2, r2, #22
 80029d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695a      	ldr	r2, [r3, #20]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d103      	bne.n	80029f2 <HAL_DMA_IRQHandler+0x1da>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d007      	beq.n	8002a02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0208 	bic.w	r2, r2, #8
 8002a00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a06:	223f      	movs	r2, #63	@ 0x3f
 8002a08:	409a      	lsls	r2, r3
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d07e      	beq.n	8002b24 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	4798      	blx	r3
        }
        return;
 8002a2e:	e079      	b.n	8002b24 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d01d      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10d      	bne.n	8002a68 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d031      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	4798      	blx	r3
 8002a5c:	e02c      	b.n	8002ab8 <HAL_DMA_IRQHandler+0x2a0>
 8002a5e:	bf00      	nop
 8002a60:	20000000 	.word	0x20000000
 8002a64:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d023      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	4798      	blx	r3
 8002a78:	e01e      	b.n	8002ab8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10f      	bne.n	8002aa8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 0210 	bic.w	r2, r2, #16
 8002a96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d032      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d022      	beq.n	8002b12 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2205      	movs	r2, #5
 8002ad0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0201 	bic.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d307      	bcc.n	8002b00 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f2      	bne.n	8002ae4 <HAL_DMA_IRQHandler+0x2cc>
 8002afe:	e000      	b.n	8002b02 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b00:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d005      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	4798      	blx	r3
 8002b22:	e000      	b.n	8002b26 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b24:	bf00      	nop
    }
  }
}
 8002b26:	3718      	adds	r7, #24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b3a:	b2db      	uxtb	r3, r3
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
 8002b54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2b40      	cmp	r3, #64	@ 0x40
 8002b74:	d108      	bne.n	8002b88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b86:	e007      	b.n	8002b98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	60da      	str	r2, [r3, #12]
}
 8002b98:	bf00      	nop
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	3b10      	subs	r3, #16
 8002bb4:	4a14      	ldr	r2, [pc, #80]	@ (8002c08 <DMA_CalcBaseAndBitshift+0x64>)
 8002bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bba:	091b      	lsrs	r3, r3, #4
 8002bbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bbe:	4a13      	ldr	r2, [pc, #76]	@ (8002c0c <DMA_CalcBaseAndBitshift+0x68>)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d909      	bls.n	8002be6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002bda:	f023 0303 	bic.w	r3, r3, #3
 8002bde:	1d1a      	adds	r2, r3, #4
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002be4:	e007      	b.n	8002bf6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002bee:	f023 0303 	bic.w	r3, r3, #3
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	aaaaaaab 	.word	0xaaaaaaab
 8002c0c:	080077a0 	.word	0x080077a0

08002c10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d11f      	bne.n	8002c6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d856      	bhi.n	8002cde <DMA_CheckFifoParam+0xce>
 8002c30:	a201      	add	r2, pc, #4	@ (adr r2, 8002c38 <DMA_CheckFifoParam+0x28>)
 8002c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c36:	bf00      	nop
 8002c38:	08002c49 	.word	0x08002c49
 8002c3c:	08002c5b 	.word	0x08002c5b
 8002c40:	08002c49 	.word	0x08002c49
 8002c44:	08002cdf 	.word	0x08002cdf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d046      	beq.n	8002ce2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c58:	e043      	b.n	8002ce2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c62:	d140      	bne.n	8002ce6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c68:	e03d      	b.n	8002ce6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c72:	d121      	bne.n	8002cb8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d837      	bhi.n	8002cea <DMA_CheckFifoParam+0xda>
 8002c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c80 <DMA_CheckFifoParam+0x70>)
 8002c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c80:	08002c91 	.word	0x08002c91
 8002c84:	08002c97 	.word	0x08002c97
 8002c88:	08002c91 	.word	0x08002c91
 8002c8c:	08002ca9 	.word	0x08002ca9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	73fb      	strb	r3, [r7, #15]
      break;
 8002c94:	e030      	b.n	8002cf8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d025      	beq.n	8002cee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ca6:	e022      	b.n	8002cee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002cb0:	d11f      	bne.n	8002cf2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cb6:	e01c      	b.n	8002cf2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d903      	bls.n	8002cc6 <DMA_CheckFifoParam+0xb6>
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d003      	beq.n	8002ccc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cc4:	e018      	b.n	8002cf8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	73fb      	strb	r3, [r7, #15]
      break;
 8002cca:	e015      	b.n	8002cf8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00e      	beq.n	8002cf6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
      break;
 8002cdc:	e00b      	b.n	8002cf6 <DMA_CheckFifoParam+0xe6>
      break;
 8002cde:	bf00      	nop
 8002ce0:	e00a      	b.n	8002cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ce2:	bf00      	nop
 8002ce4:	e008      	b.n	8002cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ce6:	bf00      	nop
 8002ce8:	e006      	b.n	8002cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cea:	bf00      	nop
 8002cec:	e004      	b.n	8002cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cee:	bf00      	nop
 8002cf0:	e002      	b.n	8002cf8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002cf2:	bf00      	nop
 8002cf4:	e000      	b.n	8002cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cf6:	bf00      	nop
    }
  } 
  
  return status; 
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop

08002d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b089      	sub	sp, #36	@ 0x24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
 8002d22:	e159      	b.n	8002fd8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d24:	2201      	movs	r2, #1
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	4013      	ands	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	f040 8148 	bne.w	8002fd2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d005      	beq.n	8002d5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d130      	bne.n	8002dbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	2203      	movs	r2, #3
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d90:	2201      	movs	r2, #1
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	091b      	lsrs	r3, r3, #4
 8002da6:	f003 0201 	and.w	r2, r3, #1
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d017      	beq.n	8002df8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	2203      	movs	r2, #3
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d123      	bne.n	8002e4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	08da      	lsrs	r2, r3, #3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3208      	adds	r2, #8
 8002e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	220f      	movs	r2, #15
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	08da      	lsrs	r2, r3, #3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3208      	adds	r2, #8
 8002e46:	69b9      	ldr	r1, [r7, #24]
 8002e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	2203      	movs	r2, #3
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 0203 	and.w	r2, r3, #3
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 80a2 	beq.w	8002fd2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	4b57      	ldr	r3, [pc, #348]	@ (8002ff0 <HAL_GPIO_Init+0x2e8>)
 8002e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e96:	4a56      	ldr	r2, [pc, #344]	@ (8002ff0 <HAL_GPIO_Init+0x2e8>)
 8002e98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e9e:	4b54      	ldr	r3, [pc, #336]	@ (8002ff0 <HAL_GPIO_Init+0x2e8>)
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eaa:	4a52      	ldr	r2, [pc, #328]	@ (8002ff4 <HAL_GPIO_Init+0x2ec>)
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	089b      	lsrs	r3, r3, #2
 8002eb0:	3302      	adds	r3, #2
 8002eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	220f      	movs	r2, #15
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a49      	ldr	r2, [pc, #292]	@ (8002ff8 <HAL_GPIO_Init+0x2f0>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d019      	beq.n	8002f0a <HAL_GPIO_Init+0x202>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a48      	ldr	r2, [pc, #288]	@ (8002ffc <HAL_GPIO_Init+0x2f4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d013      	beq.n	8002f06 <HAL_GPIO_Init+0x1fe>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a47      	ldr	r2, [pc, #284]	@ (8003000 <HAL_GPIO_Init+0x2f8>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d00d      	beq.n	8002f02 <HAL_GPIO_Init+0x1fa>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a46      	ldr	r2, [pc, #280]	@ (8003004 <HAL_GPIO_Init+0x2fc>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d007      	beq.n	8002efe <HAL_GPIO_Init+0x1f6>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a45      	ldr	r2, [pc, #276]	@ (8003008 <HAL_GPIO_Init+0x300>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d101      	bne.n	8002efa <HAL_GPIO_Init+0x1f2>
 8002ef6:	2304      	movs	r3, #4
 8002ef8:	e008      	b.n	8002f0c <HAL_GPIO_Init+0x204>
 8002efa:	2307      	movs	r3, #7
 8002efc:	e006      	b.n	8002f0c <HAL_GPIO_Init+0x204>
 8002efe:	2303      	movs	r3, #3
 8002f00:	e004      	b.n	8002f0c <HAL_GPIO_Init+0x204>
 8002f02:	2302      	movs	r3, #2
 8002f04:	e002      	b.n	8002f0c <HAL_GPIO_Init+0x204>
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <HAL_GPIO_Init+0x204>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	69fa      	ldr	r2, [r7, #28]
 8002f0e:	f002 0203 	and.w	r2, r2, #3
 8002f12:	0092      	lsls	r2, r2, #2
 8002f14:	4093      	lsls	r3, r2
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f1c:	4935      	ldr	r1, [pc, #212]	@ (8002ff4 <HAL_GPIO_Init+0x2ec>)
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	089b      	lsrs	r3, r3, #2
 8002f22:	3302      	adds	r3, #2
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f2a:	4b38      	ldr	r3, [pc, #224]	@ (800300c <HAL_GPIO_Init+0x304>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	43db      	mvns	r3, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4013      	ands	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f4e:	4a2f      	ldr	r2, [pc, #188]	@ (800300c <HAL_GPIO_Init+0x304>)
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f54:	4b2d      	ldr	r3, [pc, #180]	@ (800300c <HAL_GPIO_Init+0x304>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4013      	ands	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f78:	4a24      	ldr	r2, [pc, #144]	@ (800300c <HAL_GPIO_Init+0x304>)
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f7e:	4b23      	ldr	r3, [pc, #140]	@ (800300c <HAL_GPIO_Init+0x304>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	43db      	mvns	r3, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fa2:	4a1a      	ldr	r2, [pc, #104]	@ (800300c <HAL_GPIO_Init+0x304>)
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fa8:	4b18      	ldr	r3, [pc, #96]	@ (800300c <HAL_GPIO_Init+0x304>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fcc:	4a0f      	ldr	r2, [pc, #60]	@ (800300c <HAL_GPIO_Init+0x304>)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	61fb      	str	r3, [r7, #28]
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	2b0f      	cmp	r3, #15
 8002fdc:	f67f aea2 	bls.w	8002d24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fe0:	bf00      	nop
 8002fe2:	bf00      	nop
 8002fe4:	3724      	adds	r7, #36	@ 0x24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	40013800 	.word	0x40013800
 8002ff8:	40020000 	.word	0x40020000
 8002ffc:	40020400 	.word	0x40020400
 8003000:	40020800 	.word	0x40020800
 8003004:	40020c00 	.word	0x40020c00
 8003008:	40021000 	.word	0x40021000
 800300c:	40013c00 	.word	0x40013c00

08003010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	807b      	strh	r3, [r7, #2]
 800301c:	4613      	mov	r3, r2
 800301e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003020:	787b      	ldrb	r3, [r7, #1]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003026:	887a      	ldrh	r2, [r7, #2]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800302c:	e003      	b.n	8003036 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800302e:	887b      	ldrh	r3, [r7, #2]
 8003030:	041a      	lsls	r2, r3, #16
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	619a      	str	r2, [r3, #24]
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
	...

08003044 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800304e:	4b08      	ldr	r3, [pc, #32]	@ (8003070 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003050:	695a      	ldr	r2, [r3, #20]
 8003052:	88fb      	ldrh	r3, [r7, #6]
 8003054:	4013      	ands	r3, r2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d006      	beq.n	8003068 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800305a:	4a05      	ldr	r2, [pc, #20]	@ (8003070 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800305c:	88fb      	ldrh	r3, [r7, #6]
 800305e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003060:	88fb      	ldrh	r3, [r7, #6]
 8003062:	4618      	mov	r0, r3
 8003064:	f7fd fa30 	bl	80004c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003068:	bf00      	nop
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40013c00 	.word	0x40013c00

08003074 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e12b      	b.n	80032de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d106      	bne.n	80030a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7fd fde8 	bl	8000c70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2224      	movs	r2, #36	@ 0x24
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0201 	bic.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030d8:	f002 fdc2 	bl	8005c60 <HAL_RCC_GetPCLK1Freq>
 80030dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	4a81      	ldr	r2, [pc, #516]	@ (80032e8 <HAL_I2C_Init+0x274>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d807      	bhi.n	80030f8 <HAL_I2C_Init+0x84>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4a80      	ldr	r2, [pc, #512]	@ (80032ec <HAL_I2C_Init+0x278>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	bf94      	ite	ls
 80030f0:	2301      	movls	r3, #1
 80030f2:	2300      	movhi	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	e006      	b.n	8003106 <HAL_I2C_Init+0x92>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4a7d      	ldr	r2, [pc, #500]	@ (80032f0 <HAL_I2C_Init+0x27c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	bf94      	ite	ls
 8003100:	2301      	movls	r3, #1
 8003102:	2300      	movhi	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e0e7      	b.n	80032de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4a78      	ldr	r2, [pc, #480]	@ (80032f4 <HAL_I2C_Init+0x280>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	0c9b      	lsrs	r3, r3, #18
 8003118:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	430a      	orrs	r2, r1
 800312c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	4a6a      	ldr	r2, [pc, #424]	@ (80032e8 <HAL_I2C_Init+0x274>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d802      	bhi.n	8003148 <HAL_I2C_Init+0xd4>
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	3301      	adds	r3, #1
 8003146:	e009      	b.n	800315c <HAL_I2C_Init+0xe8>
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800314e:	fb02 f303 	mul.w	r3, r2, r3
 8003152:	4a69      	ldr	r2, [pc, #420]	@ (80032f8 <HAL_I2C_Init+0x284>)
 8003154:	fba2 2303 	umull	r2, r3, r2, r3
 8003158:	099b      	lsrs	r3, r3, #6
 800315a:	3301      	adds	r3, #1
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6812      	ldr	r2, [r2, #0]
 8003160:	430b      	orrs	r3, r1
 8003162:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800316e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	495c      	ldr	r1, [pc, #368]	@ (80032e8 <HAL_I2C_Init+0x274>)
 8003178:	428b      	cmp	r3, r1
 800317a:	d819      	bhi.n	80031b0 <HAL_I2C_Init+0x13c>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	1e59      	subs	r1, r3, #1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	fbb1 f3f3 	udiv	r3, r1, r3
 800318a:	1c59      	adds	r1, r3, #1
 800318c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003190:	400b      	ands	r3, r1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <HAL_I2C_Init+0x138>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1e59      	subs	r1, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80031a4:	3301      	adds	r3, #1
 80031a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031aa:	e051      	b.n	8003250 <HAL_I2C_Init+0x1dc>
 80031ac:	2304      	movs	r3, #4
 80031ae:	e04f      	b.n	8003250 <HAL_I2C_Init+0x1dc>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d111      	bne.n	80031dc <HAL_I2C_Init+0x168>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	1e58      	subs	r0, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6859      	ldr	r1, [r3, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	440b      	add	r3, r1
 80031c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ca:	3301      	adds	r3, #1
 80031cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	bf0c      	ite	eq
 80031d4:	2301      	moveq	r3, #1
 80031d6:	2300      	movne	r3, #0
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	e012      	b.n	8003202 <HAL_I2C_Init+0x18e>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	1e58      	subs	r0, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6859      	ldr	r1, [r3, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	0099      	lsls	r1, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80031f2:	3301      	adds	r3, #1
 80031f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bf0c      	ite	eq
 80031fc:	2301      	moveq	r3, #1
 80031fe:	2300      	movne	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_I2C_Init+0x196>
 8003206:	2301      	movs	r3, #1
 8003208:	e022      	b.n	8003250 <HAL_I2C_Init+0x1dc>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10e      	bne.n	8003230 <HAL_I2C_Init+0x1bc>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	1e58      	subs	r0, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6859      	ldr	r1, [r3, #4]
 800321a:	460b      	mov	r3, r1
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	440b      	add	r3, r1
 8003220:	fbb0 f3f3 	udiv	r3, r0, r3
 8003224:	3301      	adds	r3, #1
 8003226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800322a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800322e:	e00f      	b.n	8003250 <HAL_I2C_Init+0x1dc>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	1e58      	subs	r0, r3, #1
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6859      	ldr	r1, [r3, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	0099      	lsls	r1, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	fbb0 f3f3 	udiv	r3, r0, r3
 8003246:	3301      	adds	r3, #1
 8003248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800324c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	6809      	ldr	r1, [r1, #0]
 8003254:	4313      	orrs	r3, r2
 8003256:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69da      	ldr	r2, [r3, #28]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800327e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6911      	ldr	r1, [r2, #16]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	68d2      	ldr	r2, [r2, #12]
 800328a:	4311      	orrs	r1, r2
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6812      	ldr	r2, [r2, #0]
 8003290:	430b      	orrs	r3, r1
 8003292:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695a      	ldr	r2, [r3, #20]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0201 	orr.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	000186a0 	.word	0x000186a0
 80032ec:	001e847f 	.word	0x001e847f
 80032f0:	003d08ff 	.word	0x003d08ff
 80032f4:	431bde83 	.word	0x431bde83
 80032f8:	10624dd3 	.word	0x10624dd3

080032fc <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800330e:	2b80      	cmp	r3, #128	@ 0x80
 8003310:	d103      	bne.n	800331a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2200      	movs	r2, #0
 8003318:	611a      	str	r2, [r3, #16]
  }
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
	...

08003328 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af02      	add	r7, sp, #8
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	607a      	str	r2, [r7, #4]
 8003332:	461a      	mov	r2, r3
 8003334:	460b      	mov	r3, r1
 8003336:	817b      	strh	r3, [r7, #10]
 8003338:	4613      	mov	r3, r2
 800333a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800333c:	f7fe fbaa 	bl	8001a94 <HAL_GetTick>
 8003340:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b20      	cmp	r3, #32
 800334c:	f040 80e0 	bne.w	8003510 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	2319      	movs	r3, #25
 8003356:	2201      	movs	r2, #1
 8003358:	4970      	ldr	r1, [pc, #448]	@ (800351c <HAL_I2C_Master_Transmit+0x1f4>)
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f001 fdea 	bl	8004f34 <I2C_WaitOnFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003366:	2302      	movs	r3, #2
 8003368:	e0d3      	b.n	8003512 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_I2C_Master_Transmit+0x50>
 8003374:	2302      	movs	r3, #2
 8003376:	e0cc      	b.n	8003512 <HAL_I2C_Master_Transmit+0x1ea>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b01      	cmp	r3, #1
 800338c:	d007      	beq.n	800339e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f042 0201 	orr.w	r2, r2, #1
 800339c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2221      	movs	r2, #33	@ 0x21
 80033b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2210      	movs	r2, #16
 80033ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	893a      	ldrh	r2, [r7, #8]
 80033ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4a50      	ldr	r2, [pc, #320]	@ (8003520 <HAL_I2C_Master_Transmit+0x1f8>)
 80033de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033e0:	8979      	ldrh	r1, [r7, #10]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	6a3a      	ldr	r2, [r7, #32]
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f001 fc7a 	bl	8004ce0 <I2C_MasterRequestWrite>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e08d      	b.n	8003512 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033f6:	2300      	movs	r3, #0
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	613b      	str	r3, [r7, #16]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800340c:	e066      	b.n	80034dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	6a39      	ldr	r1, [r7, #32]
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f001 fea8 	bl	8005168 <I2C_WaitOnTXEFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00d      	beq.n	800343a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003422:	2b04      	cmp	r3, #4
 8003424:	d107      	bne.n	8003436 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003434:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e06b      	b.n	8003512 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343e:	781a      	ldrb	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344a:	1c5a      	adds	r2, r3, #1
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003454:	b29b      	uxth	r3, r3
 8003456:	3b01      	subs	r3, #1
 8003458:	b29a      	uxth	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003462:	3b01      	subs	r3, #1
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b04      	cmp	r3, #4
 8003476:	d11b      	bne.n	80034b0 <HAL_I2C_Master_Transmit+0x188>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800347c:	2b00      	cmp	r3, #0
 800347e:	d017      	beq.n	80034b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003484:	781a      	ldrb	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003490:	1c5a      	adds	r2, r3, #1
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800349a:	b29b      	uxth	r3, r3
 800349c:	3b01      	subs	r3, #1
 800349e:	b29a      	uxth	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a8:	3b01      	subs	r3, #1
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	6a39      	ldr	r1, [r7, #32]
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f001 fe9f 	bl	80051f8 <I2C_WaitOnBTFFlagUntilTimeout>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00d      	beq.n	80034dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d107      	bne.n	80034d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e01a      	b.n	8003512 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d194      	bne.n	800340e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2220      	movs	r2, #32
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800350c:	2300      	movs	r3, #0
 800350e:	e000      	b.n	8003512 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003510:	2302      	movs	r3, #2
  }
}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	00100002 	.word	0x00100002
 8003520:	ffff0000 	.word	0xffff0000

08003524 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003544:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800354c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800354e:	7bfb      	ldrb	r3, [r7, #15]
 8003550:	2b10      	cmp	r3, #16
 8003552:	d003      	beq.n	800355c <HAL_I2C_EV_IRQHandler+0x38>
 8003554:	7bfb      	ldrb	r3, [r7, #15]
 8003556:	2b40      	cmp	r3, #64	@ 0x40
 8003558:	f040 80b1 	bne.w	80036be <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10d      	bne.n	8003592 <HAL_I2C_EV_IRQHandler+0x6e>
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800357c:	d003      	beq.n	8003586 <HAL_I2C_EV_IRQHandler+0x62>
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003584:	d101      	bne.n	800358a <HAL_I2C_EV_IRQHandler+0x66>
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <HAL_I2C_EV_IRQHandler+0x68>
 800358a:	2300      	movs	r3, #0
 800358c:	2b01      	cmp	r3, #1
 800358e:	f000 8114 	beq.w	80037ba <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00b      	beq.n	80035b4 <HAL_I2C_EV_IRQHandler+0x90>
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d006      	beq.n	80035b4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f001 fecf 	bl	800534a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 fd7a 	bl	80040a6 <I2C_Master_SB>
 80035b2:	e083      	b.n	80036bc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d008      	beq.n	80035d0 <HAL_I2C_EV_IRQHandler+0xac>
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 fdf2 	bl	80041b2 <I2C_Master_ADD10>
 80035ce:	e075      	b.n	80036bc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d008      	beq.n	80035ec <HAL_I2C_EV_IRQHandler+0xc8>
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 fe0e 	bl	8004206 <I2C_Master_ADDR>
 80035ea:	e067      	b.n	80036bc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d036      	beq.n	8003664 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003600:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003604:	f000 80db 	beq.w	80037be <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00d      	beq.n	800362e <HAL_I2C_EV_IRQHandler+0x10a>
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003618:	2b00      	cmp	r3, #0
 800361a:	d008      	beq.n	800362e <HAL_I2C_EV_IRQHandler+0x10a>
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	2b00      	cmp	r3, #0
 8003624:	d103      	bne.n	800362e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f9d6 	bl	80039d8 <I2C_MasterTransmit_TXE>
 800362c:	e046      	b.n	80036bc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 80c2 	beq.w	80037be <HAL_I2C_EV_IRQHandler+0x29a>
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 80bc 	beq.w	80037be <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003646:	7bbb      	ldrb	r3, [r7, #14]
 8003648:	2b21      	cmp	r3, #33	@ 0x21
 800364a:	d103      	bne.n	8003654 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 fa5f 	bl	8003b10 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003652:	e0b4      	b.n	80037be <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003654:	7bfb      	ldrb	r3, [r7, #15]
 8003656:	2b40      	cmp	r3, #64	@ 0x40
 8003658:	f040 80b1 	bne.w	80037be <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 facd 	bl	8003bfc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003662:	e0ac      	b.n	80037be <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800366e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003672:	f000 80a4 	beq.w	80037be <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00d      	beq.n	800369c <HAL_I2C_EV_IRQHandler+0x178>
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003686:	2b00      	cmp	r3, #0
 8003688:	d008      	beq.n	800369c <HAL_I2C_EV_IRQHandler+0x178>
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d103      	bne.n	800369c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 fb49 	bl	8003d2c <I2C_MasterReceive_RXNE>
 800369a:	e00f      	b.n	80036bc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 808b 	beq.w	80037be <HAL_I2C_EV_IRQHandler+0x29a>
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 8085 	beq.w	80037be <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 fc01 	bl	8003ebc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ba:	e080      	b.n	80037be <HAL_I2C_EV_IRQHandler+0x29a>
 80036bc:	e07f      	b.n	80037be <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d004      	beq.n	80036d0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	61fb      	str	r3, [r7, #28]
 80036ce:	e007      	b.n	80036e0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d011      	beq.n	800370e <HAL_I2C_EV_IRQHandler+0x1ea>
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00c      	beq.n	800370e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003704:	69b9      	ldr	r1, [r7, #24]
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 ffcc 	bl	80046a4 <I2C_Slave_ADDR>
 800370c:	e05a      	b.n	80037c4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	f003 0310 	and.w	r3, r3, #16
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <HAL_I2C_EV_IRQHandler+0x206>
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f001 f806 	bl	8004734 <I2C_Slave_STOPF>
 8003728:	e04c      	b.n	80037c4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800372a:	7bbb      	ldrb	r3, [r7, #14]
 800372c:	2b21      	cmp	r3, #33	@ 0x21
 800372e:	d002      	beq.n	8003736 <HAL_I2C_EV_IRQHandler+0x212>
 8003730:	7bbb      	ldrb	r3, [r7, #14]
 8003732:	2b29      	cmp	r3, #41	@ 0x29
 8003734:	d120      	bne.n	8003778 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00d      	beq.n	800375c <HAL_I2C_EV_IRQHandler+0x238>
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003746:	2b00      	cmp	r3, #0
 8003748:	d008      	beq.n	800375c <HAL_I2C_EV_IRQHandler+0x238>
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	d103      	bne.n	800375c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 fee7 	bl	8004528 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800375a:	e032      	b.n	80037c2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b00      	cmp	r3, #0
 8003764:	d02d      	beq.n	80037c2 <HAL_I2C_EV_IRQHandler+0x29e>
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800376c:	2b00      	cmp	r3, #0
 800376e:	d028      	beq.n	80037c2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 ff16 	bl	80045a2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003776:	e024      	b.n	80037c2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00d      	beq.n	800379e <HAL_I2C_EV_IRQHandler+0x27a>
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_I2C_EV_IRQHandler+0x27a>
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	d103      	bne.n	800379e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 ff24 	bl	80045e4 <I2C_SlaveReceive_RXNE>
 800379c:	e012      	b.n	80037c4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00d      	beq.n	80037c4 <HAL_I2C_EV_IRQHandler+0x2a0>
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d008      	beq.n	80037c4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 ff54 	bl	8004660 <I2C_SlaveReceive_BTF>
 80037b8:	e004      	b.n	80037c4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80037ba:	bf00      	nop
 80037bc:	e002      	b.n	80037c4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037be:	bf00      	nop
 80037c0:	e000      	b.n	80037c4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037c2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80037c4:	3720      	adds	r7, #32
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b08a      	sub	sp, #40	@ 0x28
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80037e2:	2300      	movs	r3, #0
 80037e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037ec:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00d      	beq.n	8003814 <HAL_I2C_ER_IRQHandler+0x4a>
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d008      	beq.n	8003814 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003804:	f043 0301 	orr.w	r3, r3, #1
 8003808:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003812:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00d      	beq.n	800383a <HAL_I2C_ER_IRQHandler+0x70>
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382a:	f043 0302 	orr.w	r3, r3, #2
 800382e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003838:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003840:	2b00      	cmp	r3, #0
 8003842:	d03e      	beq.n	80038c2 <HAL_I2C_ER_IRQHandler+0xf8>
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800384a:	2b00      	cmp	r3, #0
 800384c:	d039      	beq.n	80038c2 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800384e:	7efb      	ldrb	r3, [r7, #27]
 8003850:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003856:	b29b      	uxth	r3, r3
 8003858:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003860:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003866:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003868:	7ebb      	ldrb	r3, [r7, #26]
 800386a:	2b20      	cmp	r3, #32
 800386c:	d112      	bne.n	8003894 <HAL_I2C_ER_IRQHandler+0xca>
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10f      	bne.n	8003894 <HAL_I2C_ER_IRQHandler+0xca>
 8003874:	7cfb      	ldrb	r3, [r7, #19]
 8003876:	2b21      	cmp	r3, #33	@ 0x21
 8003878:	d008      	beq.n	800388c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800387a:	7cfb      	ldrb	r3, [r7, #19]
 800387c:	2b29      	cmp	r3, #41	@ 0x29
 800387e:	d005      	beq.n	800388c <HAL_I2C_ER_IRQHandler+0xc2>
 8003880:	7cfb      	ldrb	r3, [r7, #19]
 8003882:	2b28      	cmp	r3, #40	@ 0x28
 8003884:	d106      	bne.n	8003894 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b21      	cmp	r3, #33	@ 0x21
 800388a:	d103      	bne.n	8003894 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f001 f881 	bl	8004994 <I2C_Slave_AF>
 8003892:	e016      	b.n	80038c2 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800389c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800389e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a0:	f043 0304 	orr.w	r3, r3, #4
 80038a4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80038a6:	7efb      	ldrb	r3, [r7, #27]
 80038a8:	2b10      	cmp	r3, #16
 80038aa:	d002      	beq.n	80038b2 <HAL_I2C_ER_IRQHandler+0xe8>
 80038ac:	7efb      	ldrb	r3, [r7, #27]
 80038ae:	2b40      	cmp	r3, #64	@ 0x40
 80038b0:	d107      	bne.n	80038c2 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038c0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00d      	beq.n	80038e8 <HAL_I2C_ER_IRQHandler+0x11e>
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d008      	beq.n	80038e8 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80038d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d8:	f043 0308 	orr.w	r3, r3, #8
 80038dc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80038e6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80038e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d008      	beq.n	8003900 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f001 f8be 	bl	8004a7c <I2C_ITError>
  }
}
 8003900:	bf00      	nop
 8003902:	3728      	adds	r7, #40	@ 0x28
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	70fb      	strb	r3, [r7, #3]
 8003964:	4613      	mov	r3, r2
 8003966:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039e6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039ee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d150      	bne.n	8003aa0 <I2C_MasterTransmit_TXE+0xc8>
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	2b21      	cmp	r3, #33	@ 0x21
 8003a02:	d14d      	bne.n	8003aa0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d01d      	beq.n	8003a46 <I2C_MasterTransmit_TXE+0x6e>
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2b20      	cmp	r3, #32
 8003a0e:	d01a      	beq.n	8003a46 <I2C_MasterTransmit_TXE+0x6e>
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a16:	d016      	beq.n	8003a46 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a26:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2211      	movs	r2, #17
 8003a2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7ff ff62 	bl	8003908 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a44:	e060      	b.n	8003b08 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a54:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a64:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b40      	cmp	r3, #64	@ 0x40
 8003a7e:	d107      	bne.n	8003a90 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7ff ff7d 	bl	8003988 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a8e:	e03b      	b.n	8003b08 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff ff35 	bl	8003908 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a9e:	e033      	b.n	8003b08 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	2b21      	cmp	r3, #33	@ 0x21
 8003aa4:	d005      	beq.n	8003ab2 <I2C_MasterTransmit_TXE+0xda>
 8003aa6:	7bbb      	ldrb	r3, [r7, #14]
 8003aa8:	2b40      	cmp	r3, #64	@ 0x40
 8003aaa:	d12d      	bne.n	8003b08 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
 8003aae:	2b22      	cmp	r3, #34	@ 0x22
 8003ab0:	d12a      	bne.n	8003b08 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d108      	bne.n	8003ace <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aca:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003acc:	e01c      	b.n	8003b08 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b40      	cmp	r3, #64	@ 0x40
 8003ad8:	d103      	bne.n	8003ae2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f88e 	bl	8003bfc <I2C_MemoryTransmit_TXE_BTF>
}
 8003ae0:	e012      	b.n	8003b08 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae6:	781a      	ldrb	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af2:	1c5a      	adds	r2, r3, #1
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003b06:	e7ff      	b.n	8003b08 <I2C_MasterTransmit_TXE+0x130>
 8003b08:	bf00      	nop
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b21      	cmp	r3, #33	@ 0x21
 8003b28:	d164      	bne.n	8003bf4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d012      	beq.n	8003b5a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b38:	781a      	ldrb	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b44:	1c5a      	adds	r2, r3, #1
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003b58:	e04c      	b.n	8003bf4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d01d      	beq.n	8003b9c <I2C_MasterTransmit_BTF+0x8c>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2b20      	cmp	r3, #32
 8003b64:	d01a      	beq.n	8003b9c <I2C_MasterTransmit_BTF+0x8c>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b6c:	d016      	beq.n	8003b9c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b7c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2211      	movs	r2, #17
 8003b82:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7ff feb7 	bl	8003908 <HAL_I2C_MasterTxCpltCallback>
}
 8003b9a:	e02b      	b.n	8003bf4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003baa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bba:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b40      	cmp	r3, #64	@ 0x40
 8003bd4:	d107      	bne.n	8003be6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7ff fed2 	bl	8003988 <HAL_I2C_MemTxCpltCallback>
}
 8003be4:	e006      	b.n	8003bf4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7ff fe8a 	bl	8003908 <HAL_I2C_MasterTxCpltCallback>
}
 8003bf4:	bf00      	nop
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c0a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d11d      	bne.n	8003c50 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d10b      	bne.n	8003c34 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c2c:	1c9a      	adds	r2, r3, #2
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003c32:	e077      	b.n	8003d24 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	121b      	asrs	r3, r3, #8
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c48:	1c5a      	adds	r2, r3, #1
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003c4e:	e069      	b.n	8003d24 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d10b      	bne.n	8003c70 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003c6e:	e059      	b.n	8003d24 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d152      	bne.n	8003d1e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
 8003c7a:	2b22      	cmp	r3, #34	@ 0x22
 8003c7c:	d10d      	bne.n	8003c9a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c8c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003c98:	e044      	b.n	8003d24 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d015      	beq.n	8003cd0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
 8003ca6:	2b21      	cmp	r3, #33	@ 0x21
 8003ca8:	d112      	bne.n	8003cd0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cae:	781a      	ldrb	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cba:	1c5a      	adds	r2, r3, #1
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003cce:	e029      	b.n	8003d24 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d124      	bne.n	8003d24 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
 8003cdc:	2b21      	cmp	r3, #33	@ 0x21
 8003cde:	d121      	bne.n	8003d24 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003cee:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cfe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff fe36 	bl	8003988 <HAL_I2C_MemTxCpltCallback>
}
 8003d1c:	e002      	b.n	8003d24 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7ff faec 	bl	80032fc <I2C_Flush_DR>
}
 8003d24:	bf00      	nop
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b22      	cmp	r3, #34	@ 0x22
 8003d3e:	f040 80b9 	bne.w	8003eb4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d46:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d921      	bls.n	8003d9a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	691a      	ldr	r2, [r3, #16]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d68:	1c5a      	adds	r2, r3, #1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	f040 8096 	bne.w	8003eb4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d96:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003d98:	e08c      	b.n	8003eb4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d07f      	beq.n	8003ea2 <I2C_MasterReceive_RXNE+0x176>
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d002      	beq.n	8003dae <I2C_MasterReceive_RXNE+0x82>
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d179      	bne.n	8003ea2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f001 fa6a 	bl	8005288 <I2C_WaitOnSTOPRequestThroughIT>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d14c      	bne.n	8003e54 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dc8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003dd8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b40      	cmp	r3, #64	@ 0x40
 8003e12:	d10a      	bne.n	8003e2a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7ff fdba 	bl	800399c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e28:	e044      	b.n	8003eb4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d002      	beq.n	8003e3e <I2C_MasterReceive_RXNE+0x112>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2b20      	cmp	r3, #32
 8003e3c:	d103      	bne.n	8003e46 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e44:	e002      	b.n	8003e4c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2212      	movs	r2, #18
 8003e4a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff fd65 	bl	800391c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e52:	e02f      	b.n	8003eb4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e62:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691a      	ldr	r2, [r3, #16]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff fd88 	bl	80039b0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ea0:	e008      	b.n	8003eb4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eb0:	605a      	str	r2, [r3, #4]
}
 8003eb2:	e7ff      	b.n	8003eb4 <I2C_MasterReceive_RXNE+0x188>
 8003eb4:	bf00      	nop
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d11b      	bne.n	8003f0c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ee2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691a      	ldr	r2, [r3, #16]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003f0a:	e0c8      	b.n	800409e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2b03      	cmp	r3, #3
 8003f14:	d129      	bne.n	8003f6a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f24:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2b04      	cmp	r3, #4
 8003f2a:	d00a      	beq.n	8003f42 <I2C_MasterReceive_BTF+0x86>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d007      	beq.n	8003f42 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f40:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	691a      	ldr	r2, [r3, #16]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003f68:	e099      	b.n	800409e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	f040 8081 	bne.w	8004078 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d002      	beq.n	8003f82 <I2C_MasterReceive_BTF+0xc6>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2b10      	cmp	r3, #16
 8003f80:	d108      	bne.n	8003f94 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	e019      	b.n	8003fc8 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d002      	beq.n	8003fa0 <I2C_MasterReceive_BTF+0xe4>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d108      	bne.n	8003fb2 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	e00a      	b.n	8003fc8 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2b10      	cmp	r3, #16
 8003fb6:	d007      	beq.n	8003fc8 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fc6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691a      	ldr	r2, [r3, #16]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	691a      	ldr	r2, [r3, #16]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800400a:	b29b      	uxth	r3, r3
 800400c:	3b01      	subs	r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004022:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2220      	movs	r2, #32
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b40      	cmp	r3, #64	@ 0x40
 8004036:	d10a      	bne.n	800404e <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7ff fca8 	bl	800399c <HAL_I2C_MemRxCpltCallback>
}
 800404c:	e027      	b.n	800409e <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2b08      	cmp	r3, #8
 800405a:	d002      	beq.n	8004062 <I2C_MasterReceive_BTF+0x1a6>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b20      	cmp	r3, #32
 8004060:	d103      	bne.n	800406a <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	631a      	str	r2, [r3, #48]	@ 0x30
 8004068:	e002      	b.n	8004070 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2212      	movs	r2, #18
 800406e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7ff fc53 	bl	800391c <HAL_I2C_MasterRxCpltCallback>
}
 8004076:	e012      	b.n	800409e <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	691a      	ldr	r2, [r3, #16]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408a:	1c5a      	adds	r2, r3, #1
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004094:	b29b      	uxth	r3, r3
 8004096:	3b01      	subs	r3, #1
 8004098:	b29a      	uxth	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800409e:	bf00      	nop
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b40      	cmp	r3, #64	@ 0x40
 80040b8:	d117      	bne.n	80040ea <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d109      	bne.n	80040d6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	461a      	mov	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80040d2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80040d4:	e067      	b.n	80041a6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	f043 0301 	orr.w	r3, r3, #1
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	611a      	str	r2, [r3, #16]
}
 80040e8:	e05d      	b.n	80041a6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040f2:	d133      	bne.n	800415c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b21      	cmp	r3, #33	@ 0x21
 80040fe:	d109      	bne.n	8004114 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004104:	b2db      	uxtb	r3, r3
 8004106:	461a      	mov	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004110:	611a      	str	r2, [r3, #16]
 8004112:	e008      	b.n	8004126 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004118:	b2db      	uxtb	r3, r3
 800411a:	f043 0301 	orr.w	r3, r3, #1
 800411e:	b2da      	uxtb	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800412a:	2b00      	cmp	r3, #0
 800412c:	d004      	beq.n	8004138 <I2C_Master_SB+0x92>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004134:	2b00      	cmp	r3, #0
 8004136:	d108      	bne.n	800414a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800413c:	2b00      	cmp	r3, #0
 800413e:	d032      	beq.n	80041a6 <I2C_Master_SB+0x100>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004146:	2b00      	cmp	r3, #0
 8004148:	d02d      	beq.n	80041a6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004158:	605a      	str	r2, [r3, #4]
}
 800415a:	e024      	b.n	80041a6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10e      	bne.n	8004182 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004168:	b29b      	uxth	r3, r3
 800416a:	11db      	asrs	r3, r3, #7
 800416c:	b2db      	uxtb	r3, r3
 800416e:	f003 0306 	and.w	r3, r3, #6
 8004172:	b2db      	uxtb	r3, r3
 8004174:	f063 030f 	orn	r3, r3, #15
 8004178:	b2da      	uxtb	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	611a      	str	r2, [r3, #16]
}
 8004180:	e011      	b.n	80041a6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004186:	2b01      	cmp	r3, #1
 8004188:	d10d      	bne.n	80041a6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418e:	b29b      	uxth	r3, r3
 8004190:	11db      	asrs	r3, r3, #7
 8004192:	b2db      	uxtb	r3, r3
 8004194:	f003 0306 	and.w	r3, r3, #6
 8004198:	b2db      	uxtb	r3, r3
 800419a:	f063 030e 	orn	r3, r3, #14
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	611a      	str	r2, [r3, #16]
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d004      	beq.n	80041d8 <I2C_Master_ADD10+0x26>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d108      	bne.n	80041ea <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00c      	beq.n	80041fa <I2C_Master_ADD10+0x48>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d007      	beq.n	80041fa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041f8:	605a      	str	r2, [r3, #4]
  }
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004206:	b480      	push	{r7}
 8004208:	b091      	sub	sp, #68	@ 0x44
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004214:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004222:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b22      	cmp	r3, #34	@ 0x22
 800422e:	f040 8169 	bne.w	8004504 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10f      	bne.n	800425a <I2C_Master_ADDR+0x54>
 800423a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800423e:	2b40      	cmp	r3, #64	@ 0x40
 8004240:	d10b      	bne.n	800425a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004242:	2300      	movs	r3, #0
 8004244:	633b      	str	r3, [r7, #48]	@ 0x30
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	633b      	str	r3, [r7, #48]	@ 0x30
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	633b      	str	r3, [r7, #48]	@ 0x30
 8004256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004258:	e160      	b.n	800451c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800425e:	2b00      	cmp	r3, #0
 8004260:	d11d      	bne.n	800429e <I2C_Master_ADDR+0x98>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800426a:	d118      	bne.n	800429e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800426c:	2300      	movs	r3, #0
 800426e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004290:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	651a      	str	r2, [r3, #80]	@ 0x50
 800429c:	e13e      	b.n	800451c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d113      	bne.n	80042d0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042a8:	2300      	movs	r3, #0
 80042aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	e115      	b.n	80044fc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	f040 808a 	bne.w	80043f0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80042dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042de:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042e2:	d137      	bne.n	8004354 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042f2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004302:	d113      	bne.n	800432c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004312:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004314:	2300      	movs	r3, #0
 8004316:	627b      	str	r3, [r7, #36]	@ 0x24
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	627b      	str	r3, [r7, #36]	@ 0x24
 8004328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432a:	e0e7      	b.n	80044fc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800432c:	2300      	movs	r3, #0
 800432e:	623b      	str	r3, [r7, #32]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	623b      	str	r3, [r7, #32]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	623b      	str	r3, [r7, #32]
 8004340:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	e0d3      	b.n	80044fc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004356:	2b08      	cmp	r3, #8
 8004358:	d02e      	beq.n	80043b8 <I2C_Master_ADDR+0x1b2>
 800435a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800435c:	2b20      	cmp	r3, #32
 800435e:	d02b      	beq.n	80043b8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004362:	2b12      	cmp	r3, #18
 8004364:	d102      	bne.n	800436c <I2C_Master_ADDR+0x166>
 8004366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004368:	2b01      	cmp	r3, #1
 800436a:	d125      	bne.n	80043b8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800436c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800436e:	2b04      	cmp	r3, #4
 8004370:	d00e      	beq.n	8004390 <I2C_Master_ADDR+0x18a>
 8004372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004374:	2b02      	cmp	r3, #2
 8004376:	d00b      	beq.n	8004390 <I2C_Master_ADDR+0x18a>
 8004378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800437a:	2b10      	cmp	r3, #16
 800437c:	d008      	beq.n	8004390 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	e007      	b.n	80043a0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800439e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043a0:	2300      	movs	r3, #0
 80043a2:	61fb      	str	r3, [r7, #28]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	61fb      	str	r3, [r7, #28]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	61fb      	str	r3, [r7, #28]
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	e0a1      	b.n	80044fc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043c6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043c8:	2300      	movs	r3, #0
 80043ca:	61bb      	str	r3, [r7, #24]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	61bb      	str	r3, [r7, #24]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	61bb      	str	r3, [r7, #24]
 80043dc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	e085      	b.n	80044fc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d14d      	bne.n	8004496 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80043fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043fc:	2b04      	cmp	r3, #4
 80043fe:	d016      	beq.n	800442e <I2C_Master_ADDR+0x228>
 8004400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004402:	2b02      	cmp	r3, #2
 8004404:	d013      	beq.n	800442e <I2C_Master_ADDR+0x228>
 8004406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004408:	2b10      	cmp	r3, #16
 800440a:	d010      	beq.n	800442e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800441a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	e007      	b.n	800443e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800443c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004448:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800444c:	d117      	bne.n	800447e <I2C_Master_ADDR+0x278>
 800444e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004450:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004454:	d00b      	beq.n	800446e <I2C_Master_ADDR+0x268>
 8004456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004458:	2b01      	cmp	r3, #1
 800445a:	d008      	beq.n	800446e <I2C_Master_ADDR+0x268>
 800445c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800445e:	2b08      	cmp	r3, #8
 8004460:	d005      	beq.n	800446e <I2C_Master_ADDR+0x268>
 8004462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004464:	2b10      	cmp	r3, #16
 8004466:	d002      	beq.n	800446e <I2C_Master_ADDR+0x268>
 8004468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800446a:	2b20      	cmp	r3, #32
 800446c:	d107      	bne.n	800447e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800447c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	617b      	str	r3, [r7, #20]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	e032      	b.n	80044fc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80044a4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044b4:	d117      	bne.n	80044e6 <I2C_Master_ADDR+0x2e0>
 80044b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80044bc:	d00b      	beq.n	80044d6 <I2C_Master_ADDR+0x2d0>
 80044be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d008      	beq.n	80044d6 <I2C_Master_ADDR+0x2d0>
 80044c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d005      	beq.n	80044d6 <I2C_Master_ADDR+0x2d0>
 80044ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044cc:	2b10      	cmp	r3, #16
 80044ce:	d002      	beq.n	80044d6 <I2C_Master_ADDR+0x2d0>
 80044d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d2:	2b20      	cmp	r3, #32
 80044d4:	d107      	bne.n	80044e6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80044e4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044e6:	2300      	movs	r3, #0
 80044e8:	613b      	str	r3, [r7, #16]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	613b      	str	r3, [r7, #16]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	613b      	str	r3, [r7, #16]
 80044fa:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004502:	e00b      	b.n	800451c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004504:	2300      	movs	r3, #0
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	68fb      	ldr	r3, [r7, #12]
}
 800451a:	e7ff      	b.n	800451c <I2C_Master_ADDR+0x316>
 800451c:	bf00      	nop
 800451e:	3744      	adds	r7, #68	@ 0x44
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004536:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800453c:	b29b      	uxth	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d02b      	beq.n	800459a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004546:	781a      	ldrb	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800455c:	b29b      	uxth	r3, r3
 800455e:	3b01      	subs	r3, #1
 8004560:	b29a      	uxth	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800456a:	b29b      	uxth	r3, r3
 800456c:	2b00      	cmp	r3, #0
 800456e:	d114      	bne.n	800459a <I2C_SlaveTransmit_TXE+0x72>
 8004570:	7bfb      	ldrb	r3, [r7, #15]
 8004572:	2b29      	cmp	r3, #41	@ 0x29
 8004574:	d111      	bne.n	800459a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004584:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2221      	movs	r2, #33	@ 0x21
 800458a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2228      	movs	r2, #40	@ 0x28
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7ff f9cb 	bl	8003930 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800459a:	bf00      	nop
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d011      	beq.n	80045d8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b8:	781a      	ldrb	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045f2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d02c      	beq.n	8004658 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	691a      	ldr	r2, [r3, #16]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004610:	1c5a      	adds	r2, r3, #1
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800461a:	b29b      	uxth	r3, r3
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004628:	b29b      	uxth	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d114      	bne.n	8004658 <I2C_SlaveReceive_RXNE+0x74>
 800462e:	7bfb      	ldrb	r3, [r7, #15]
 8004630:	2b2a      	cmp	r3, #42	@ 0x2a
 8004632:	d111      	bne.n	8004658 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004642:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2222      	movs	r2, #34	@ 0x22
 8004648:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2228      	movs	r2, #40	@ 0x28
 800464e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7ff f976 	bl	8003944 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004658:	bf00      	nop
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800466c:	b29b      	uxth	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d012      	beq.n	8004698 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467c:	b2d2      	uxtb	r2, r2
 800467e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800468e:	b29b      	uxth	r3, r3
 8004690:	3b01      	subs	r3, #1
 8004692:	b29a      	uxth	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80046ae:	2300      	movs	r3, #0
 80046b0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80046be:	2b28      	cmp	r3, #40	@ 0x28
 80046c0:	d125      	bne.n	800470e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046d0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80046dc:	2301      	movs	r3, #1
 80046de:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d103      	bne.n	80046f2 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	81bb      	strh	r3, [r7, #12]
 80046f0:	e002      	b.n	80046f8 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004700:	89ba      	ldrh	r2, [r7, #12]
 8004702:	7bfb      	ldrb	r3, [r7, #15]
 8004704:	4619      	mov	r1, r3
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7ff f926 	bl	8003958 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800470c:	e00e      	b.n	800472c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800470e:	2300      	movs	r3, #0
 8004710:	60bb      	str	r3, [r7, #8]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	60bb      	str	r3, [r7, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	60bb      	str	r3, [r7, #8]
 8004722:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800472c:	bf00      	nop
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004742:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004752:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004754:	2300      	movs	r3, #0
 8004756:	60bb      	str	r3, [r7, #8]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	60bb      	str	r3, [r7, #8]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f042 0201 	orr.w	r2, r2, #1
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004780:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800478c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004790:	d172      	bne.n	8004878 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004792:	7bfb      	ldrb	r3, [r7, #15]
 8004794:	2b22      	cmp	r3, #34	@ 0x22
 8004796:	d002      	beq.n	800479e <I2C_Slave_STOPF+0x6a>
 8004798:	7bfb      	ldrb	r3, [r7, #15]
 800479a:	2b2a      	cmp	r3, #42	@ 0x2a
 800479c:	d135      	bne.n	800480a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d005      	beq.n	80047c2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ba:	f043 0204 	orr.w	r2, r3, #4
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047d0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fe f9a8 	bl	8002b2c <HAL_DMA_GetState>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d049      	beq.n	8004876 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e6:	4a69      	ldr	r2, [pc, #420]	@ (800498c <I2C_Slave_STOPF+0x258>)
 80047e8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fd fff0 	bl	80027d4 <HAL_DMA_Abort_IT>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d03d      	beq.n	8004876 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004804:	4610      	mov	r0, r2
 8004806:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004808:	e035      	b.n	8004876 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	b29a      	uxth	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800481c:	b29b      	uxth	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d005      	beq.n	800482e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004826:	f043 0204 	orr.w	r2, r3, #4
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800483c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004842:	4618      	mov	r0, r3
 8004844:	f7fe f972 	bl	8002b2c <HAL_DMA_GetState>
 8004848:	4603      	mov	r3, r0
 800484a:	2b01      	cmp	r3, #1
 800484c:	d014      	beq.n	8004878 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004852:	4a4e      	ldr	r2, [pc, #312]	@ (800498c <I2C_Slave_STOPF+0x258>)
 8004854:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800485a:	4618      	mov	r0, r3
 800485c:	f7fd ffba 	bl	80027d4 <HAL_DMA_Abort_IT>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d008      	beq.n	8004878 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800486a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004870:	4610      	mov	r0, r2
 8004872:	4798      	blx	r3
 8004874:	e000      	b.n	8004878 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004876:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800487c:	b29b      	uxth	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d03e      	beq.n	8004900 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b04      	cmp	r3, #4
 800488e:	d112      	bne.n	80048b6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691a      	ldr	r2, [r3, #16]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a2:	1c5a      	adds	r2, r3, #1
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	3b01      	subs	r3, #1
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048c0:	2b40      	cmp	r3, #64	@ 0x40
 80048c2:	d112      	bne.n	80048ea <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	691a      	ldr	r2, [r3, #16]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d6:	1c5a      	adds	r2, r3, #1
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	3b01      	subs	r3, #1
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d005      	beq.n	8004900 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f8:	f043 0204 	orr.w	r2, r3, #4
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f8b7 	bl	8004a7c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800490e:	e039      	b.n	8004984 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004910:	7bfb      	ldrb	r3, [r7, #15]
 8004912:	2b2a      	cmp	r3, #42	@ 0x2a
 8004914:	d109      	bne.n	800492a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2228      	movs	r2, #40	@ 0x28
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7ff f80d 	bl	8003944 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b28      	cmp	r3, #40	@ 0x28
 8004934:	d111      	bne.n	800495a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a15      	ldr	r2, [pc, #84]	@ (8004990 <I2C_Slave_STOPF+0x25c>)
 800493a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2220      	movs	r2, #32
 8004946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7ff f80e 	bl	8003974 <HAL_I2C_ListenCpltCallback>
}
 8004958:	e014      	b.n	8004984 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800495e:	2b22      	cmp	r3, #34	@ 0x22
 8004960:	d002      	beq.n	8004968 <I2C_Slave_STOPF+0x234>
 8004962:	7bfb      	ldrb	r3, [r7, #15]
 8004964:	2b22      	cmp	r3, #34	@ 0x22
 8004966:	d10d      	bne.n	8004984 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2220      	movs	r2, #32
 8004972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7fe ffe0 	bl	8003944 <HAL_I2C_SlaveRxCpltCallback>
}
 8004984:	bf00      	nop
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	08004de5 	.word	0x08004de5
 8004990:	ffff0000 	.word	0xffff0000

08004994 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049a2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	d002      	beq.n	80049b6 <I2C_Slave_AF+0x22>
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2b20      	cmp	r3, #32
 80049b4:	d129      	bne.n	8004a0a <I2C_Slave_AF+0x76>
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
 80049b8:	2b28      	cmp	r3, #40	@ 0x28
 80049ba:	d126      	bne.n	8004a0a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a2e      	ldr	r2, [pc, #184]	@ (8004a78 <I2C_Slave_AF+0xe4>)
 80049c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80049d0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049da:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049ea:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7fe ffb6 	bl	8003974 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004a08:	e031      	b.n	8004a6e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
 8004a0c:	2b21      	cmp	r3, #33	@ 0x21
 8004a0e:	d129      	bne.n	8004a64 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a19      	ldr	r2, [pc, #100]	@ (8004a78 <I2C_Slave_AF+0xe4>)
 8004a14:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2221      	movs	r2, #33	@ 0x21
 8004a1a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a3a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a44:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a54:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7fe fc50 	bl	80032fc <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7fe ff67 	bl	8003930 <HAL_I2C_SlaveTxCpltCallback>
}
 8004a62:	e004      	b.n	8004a6e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a6c:	615a      	str	r2, [r3, #20]
}
 8004a6e:	bf00      	nop
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	ffff0000 	.word	0xffff0000

08004a7c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a8a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a92:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004a94:	7bbb      	ldrb	r3, [r7, #14]
 8004a96:	2b10      	cmp	r3, #16
 8004a98:	d002      	beq.n	8004aa0 <I2C_ITError+0x24>
 8004a9a:	7bbb      	ldrb	r3, [r7, #14]
 8004a9c:	2b40      	cmp	r3, #64	@ 0x40
 8004a9e:	d10a      	bne.n	8004ab6 <I2C_ITError+0x3a>
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
 8004aa2:	2b22      	cmp	r3, #34	@ 0x22
 8004aa4:	d107      	bne.n	8004ab6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ab4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ab6:	7bfb      	ldrb	r3, [r7, #15]
 8004ab8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004abc:	2b28      	cmp	r3, #40	@ 0x28
 8004abe:	d107      	bne.n	8004ad0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2228      	movs	r2, #40	@ 0x28
 8004aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004ace:	e015      	b.n	8004afc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ada:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ade:	d00a      	beq.n	8004af6 <I2C_ITError+0x7a>
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
 8004ae2:	2b60      	cmp	r3, #96	@ 0x60
 8004ae4:	d007      	beq.n	8004af6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b0a:	d162      	bne.n	8004bd2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b1a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d020      	beq.n	8004b6c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b2e:	4a6a      	ldr	r2, [pc, #424]	@ (8004cd8 <I2C_ITError+0x25c>)
 8004b30:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fd fe4c 	bl	80027d4 <HAL_DMA_Abort_IT>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 8089 	beq.w	8004c56 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0201 	bic.w	r2, r2, #1
 8004b52:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b66:	4610      	mov	r0, r2
 8004b68:	4798      	blx	r3
 8004b6a:	e074      	b.n	8004c56 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b70:	4a59      	ldr	r2, [pc, #356]	@ (8004cd8 <I2C_ITError+0x25c>)
 8004b72:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7fd fe2b 	bl	80027d4 <HAL_DMA_Abort_IT>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d068      	beq.n	8004c56 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b8e:	2b40      	cmp	r3, #64	@ 0x40
 8004b90:	d10b      	bne.n	8004baa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	691a      	ldr	r2, [r3, #16]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 0201 	bic.w	r2, r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004bcc:	4610      	mov	r0, r2
 8004bce:	4798      	blx	r3
 8004bd0:	e041      	b.n	8004c56 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b60      	cmp	r3, #96	@ 0x60
 8004bdc:	d125      	bne.n	8004c2a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2220      	movs	r2, #32
 8004be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf6:	2b40      	cmp	r3, #64	@ 0x40
 8004bf8:	d10b      	bne.n	8004c12 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	691a      	ldr	r2, [r3, #16]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c04:	b2d2      	uxtb	r2, r2
 8004c06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0c:	1c5a      	adds	r2, r3, #1
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0201 	bic.w	r2, r2, #1
 8004c20:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7fe fece 	bl	80039c4 <HAL_I2C_AbortCpltCallback>
 8004c28:	e015      	b.n	8004c56 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c34:	2b40      	cmp	r3, #64	@ 0x40
 8004c36:	d10b      	bne.n	8004c50 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	691a      	ldr	r2, [r3, #16]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4a:	1c5a      	adds	r2, r3, #1
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7fe fead 	bl	80039b0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10e      	bne.n	8004c84 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d109      	bne.n	8004c84 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d104      	bne.n	8004c84 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d007      	beq.n	8004c94 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c92:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c9a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b04      	cmp	r3, #4
 8004ca6:	d113      	bne.n	8004cd0 <I2C_ITError+0x254>
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
 8004caa:	2b28      	cmp	r3, #40	@ 0x28
 8004cac:	d110      	bne.n	8004cd0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8004cdc <I2C_ITError+0x260>)
 8004cb2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7fe fe52 	bl	8003974 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004cd0:	bf00      	nop
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	08004de5 	.word	0x08004de5
 8004cdc:	ffff0000 	.word	0xffff0000

08004ce0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b088      	sub	sp, #32
 8004ce4:	af02      	add	r7, sp, #8
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	607a      	str	r2, [r7, #4]
 8004cea:	603b      	str	r3, [r7, #0]
 8004cec:	460b      	mov	r3, r1
 8004cee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	d006      	beq.n	8004d0a <I2C_MasterRequestWrite+0x2a>
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d003      	beq.n	8004d0a <I2C_MasterRequestWrite+0x2a>
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d08:	d108      	bne.n	8004d1c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	e00b      	b.n	8004d34 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d20:	2b12      	cmp	r3, #18
 8004d22:	d107      	bne.n	8004d34 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d32:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 f8f7 	bl	8004f34 <I2C_WaitOnFlagUntilTimeout>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00d      	beq.n	8004d68 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d5a:	d103      	bne.n	8004d64 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d62:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e035      	b.n	8004dd4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d70:	d108      	bne.n	8004d84 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d72:	897b      	ldrh	r3, [r7, #10]
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	461a      	mov	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d80:	611a      	str	r2, [r3, #16]
 8004d82:	e01b      	b.n	8004dbc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d84:	897b      	ldrh	r3, [r7, #10]
 8004d86:	11db      	asrs	r3, r3, #7
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	f003 0306 	and.w	r3, r3, #6
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	f063 030f 	orn	r3, r3, #15
 8004d94:	b2da      	uxtb	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	490e      	ldr	r1, [pc, #56]	@ (8004ddc <I2C_MasterRequestWrite+0xfc>)
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f000 f940 	bl	8005028 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e010      	b.n	8004dd4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004db2:	897b      	ldrh	r3, [r7, #10]
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	4907      	ldr	r1, [pc, #28]	@ (8004de0 <I2C_MasterRequestWrite+0x100>)
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 f930 	bl	8005028 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e000      	b.n	8004dd4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	00010008 	.word	0x00010008
 8004de0:	00010002 	.word	0x00010002

08004de4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dfc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004dfe:	4b4b      	ldr	r3, [pc, #300]	@ (8004f2c <I2C_DMAAbort+0x148>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	08db      	lsrs	r3, r3, #3
 8004e04:	4a4a      	ldr	r2, [pc, #296]	@ (8004f30 <I2C_DMAAbort+0x14c>)
 8004e06:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0a:	0a1a      	lsrs	r2, r3, #8
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	00da      	lsls	r2, r3, #3
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d106      	bne.n	8004e2c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e22:	f043 0220 	orr.w	r2, r3, #32
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004e2a:	e00a      	b.n	8004e42 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e40:	d0ea      	beq.n	8004e18 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e4e:	2200      	movs	r2, #0
 8004e50:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e5e:	2200      	movs	r2, #0
 8004e60:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e70:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	2200      	movs	r2, #0
 8004e76:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e84:	2200      	movs	r2, #0
 8004e86:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d003      	beq.n	8004e98 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e94:	2200      	movs	r2, #0
 8004e96:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0201 	bic.w	r2, r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b60      	cmp	r3, #96	@ 0x60
 8004eb2:	d10e      	bne.n	8004ed2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004eca:	6978      	ldr	r0, [r7, #20]
 8004ecc:	f7fe fd7a 	bl	80039c4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ed0:	e027      	b.n	8004f22 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ed2:	7cfb      	ldrb	r3, [r7, #19]
 8004ed4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004ed8:	2b28      	cmp	r3, #40	@ 0x28
 8004eda:	d117      	bne.n	8004f0c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f042 0201 	orr.w	r2, r2, #1
 8004eea:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004efa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	2200      	movs	r2, #0
 8004f00:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2228      	movs	r2, #40	@ 0x28
 8004f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004f0a:	e007      	b.n	8004f1c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004f1c:	6978      	ldr	r0, [r7, #20]
 8004f1e:	f7fe fd47 	bl	80039b0 <HAL_I2C_ErrorCallback>
}
 8004f22:	bf00      	nop
 8004f24:	3718      	adds	r7, #24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	20000000 	.word	0x20000000
 8004f30:	14f8b589 	.word	0x14f8b589

08004f34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	603b      	str	r3, [r7, #0]
 8004f40:	4613      	mov	r3, r2
 8004f42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f44:	e048      	b.n	8004fd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f4c:	d044      	beq.n	8004fd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f4e:	f7fc fda1 	bl	8001a94 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d302      	bcc.n	8004f64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d139      	bne.n	8004fd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	0c1b      	lsrs	r3, r3, #16
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d10d      	bne.n	8004f8a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	43da      	mvns	r2, r3
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	4013      	ands	r3, r2
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	bf0c      	ite	eq
 8004f80:	2301      	moveq	r3, #1
 8004f82:	2300      	movne	r3, #0
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	461a      	mov	r2, r3
 8004f88:	e00c      	b.n	8004fa4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	43da      	mvns	r2, r3
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	4013      	ands	r3, r2
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	bf0c      	ite	eq
 8004f9c:	2301      	moveq	r3, #1
 8004f9e:	2300      	movne	r3, #0
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	79fb      	ldrb	r3, [r7, #7]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d116      	bne.n	8004fd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc4:	f043 0220 	orr.w	r2, r3, #32
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e023      	b.n	8005020 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	0c1b      	lsrs	r3, r3, #16
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d10d      	bne.n	8004ffe <I2C_WaitOnFlagUntilTimeout+0xca>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	43da      	mvns	r2, r3
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	4013      	ands	r3, r2
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	bf0c      	ite	eq
 8004ff4:	2301      	moveq	r3, #1
 8004ff6:	2300      	movne	r3, #0
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	e00c      	b.n	8005018 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	43da      	mvns	r2, r3
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	4013      	ands	r3, r2
 800500a:	b29b      	uxth	r3, r3
 800500c:	2b00      	cmp	r3, #0
 800500e:	bf0c      	ite	eq
 8005010:	2301      	moveq	r3, #1
 8005012:	2300      	movne	r3, #0
 8005014:	b2db      	uxtb	r3, r3
 8005016:	461a      	mov	r2, r3
 8005018:	79fb      	ldrb	r3, [r7, #7]
 800501a:	429a      	cmp	r2, r3
 800501c:	d093      	beq.n	8004f46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
 8005034:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005036:	e071      	b.n	800511c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005042:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005046:	d123      	bne.n	8005090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005056:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005060:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2220      	movs	r2, #32
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507c:	f043 0204 	orr.w	r2, r3, #4
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e067      	b.n	8005160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005096:	d041      	beq.n	800511c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005098:	f7fc fcfc 	bl	8001a94 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d302      	bcc.n	80050ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d136      	bne.n	800511c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	0c1b      	lsrs	r3, r3, #16
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d10c      	bne.n	80050d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	43da      	mvns	r2, r3
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	4013      	ands	r3, r2
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	bf14      	ite	ne
 80050ca:	2301      	movne	r3, #1
 80050cc:	2300      	moveq	r3, #0
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	e00b      	b.n	80050ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	43da      	mvns	r2, r3
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	4013      	ands	r3, r2
 80050de:	b29b      	uxth	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	bf14      	ite	ne
 80050e4:	2301      	movne	r3, #1
 80050e6:	2300      	moveq	r3, #0
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d016      	beq.n	800511c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005108:	f043 0220 	orr.w	r2, r3, #32
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e021      	b.n	8005160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	0c1b      	lsrs	r3, r3, #16
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b01      	cmp	r3, #1
 8005124:	d10c      	bne.n	8005140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	43da      	mvns	r2, r3
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	4013      	ands	r3, r2
 8005132:	b29b      	uxth	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	bf14      	ite	ne
 8005138:	2301      	movne	r3, #1
 800513a:	2300      	moveq	r3, #0
 800513c:	b2db      	uxtb	r3, r3
 800513e:	e00b      	b.n	8005158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	43da      	mvns	r2, r3
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	4013      	ands	r3, r2
 800514c:	b29b      	uxth	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	bf14      	ite	ne
 8005152:	2301      	movne	r3, #1
 8005154:	2300      	moveq	r3, #0
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	f47f af6d 	bne.w	8005038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005174:	e034      	b.n	80051e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f000 f8b8 	bl	80052ec <I2C_IsAcknowledgeFailed>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e034      	b.n	80051f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800518c:	d028      	beq.n	80051e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800518e:	f7fc fc81 	bl	8001a94 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	429a      	cmp	r2, r3
 800519c:	d302      	bcc.n	80051a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d11d      	bne.n	80051e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ae:	2b80      	cmp	r3, #128	@ 0x80
 80051b0:	d016      	beq.n	80051e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051cc:	f043 0220 	orr.w	r2, r3, #32
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e007      	b.n	80051f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ea:	2b80      	cmp	r3, #128	@ 0x80
 80051ec:	d1c3      	bne.n	8005176 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005204:	e034      	b.n	8005270 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 f870 	bl	80052ec <I2C_IsAcknowledgeFailed>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e034      	b.n	8005280 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800521c:	d028      	beq.n	8005270 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800521e:	f7fc fc39 	bl	8001a94 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	429a      	cmp	r2, r3
 800522c:	d302      	bcc.n	8005234 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d11d      	bne.n	8005270 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	2b04      	cmp	r3, #4
 8005240:	d016      	beq.n	8005270 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2220      	movs	r2, #32
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525c:	f043 0220 	orr.w	r2, r3, #32
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e007      	b.n	8005280 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	f003 0304 	and.w	r3, r3, #4
 800527a:	2b04      	cmp	r3, #4
 800527c:	d1c3      	bne.n	8005206 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005294:	4b13      	ldr	r3, [pc, #76]	@ (80052e4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	08db      	lsrs	r3, r3, #3
 800529a:	4a13      	ldr	r2, [pc, #76]	@ (80052e8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800529c:	fba2 2303 	umull	r2, r3, r2, r3
 80052a0:	0a1a      	lsrs	r2, r3, #8
 80052a2:	4613      	mov	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	3b01      	subs	r3, #1
 80052ae:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d107      	bne.n	80052c6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ba:	f043 0220 	orr.w	r2, r3, #32
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e008      	b.n	80052d8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052d4:	d0e9      	beq.n	80052aa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	20000000 	.word	0x20000000
 80052e8:	14f8b589 	.word	0x14f8b589

080052ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005302:	d11b      	bne.n	800533c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800530c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2220      	movs	r2, #32
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005328:	f043 0204 	orr.w	r2, r3, #4
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e000      	b.n	800533e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800534a:	b480      	push	{r7}
 800534c:	b083      	sub	sp, #12
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005356:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800535a:	d103      	bne.n	8005364 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005362:	e007      	b.n	8005374 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005368:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800536c:	d102      	bne.n	8005374 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2208      	movs	r2, #8
 8005372:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e267      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d075      	beq.n	800548a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800539e:	4b88      	ldr	r3, [pc, #544]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 030c 	and.w	r3, r3, #12
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d00c      	beq.n	80053c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053aa:	4b85      	ldr	r3, [pc, #532]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053b2:	2b08      	cmp	r3, #8
 80053b4:	d112      	bne.n	80053dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053b6:	4b82      	ldr	r3, [pc, #520]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053c2:	d10b      	bne.n	80053dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053c4:	4b7e      	ldr	r3, [pc, #504]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d05b      	beq.n	8005488 <HAL_RCC_OscConfig+0x108>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d157      	bne.n	8005488 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e242      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053e4:	d106      	bne.n	80053f4 <HAL_RCC_OscConfig+0x74>
 80053e6:	4b76      	ldr	r3, [pc, #472]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a75      	ldr	r2, [pc, #468]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 80053ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	e01d      	b.n	8005430 <HAL_RCC_OscConfig+0xb0>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053fc:	d10c      	bne.n	8005418 <HAL_RCC_OscConfig+0x98>
 80053fe:	4b70      	ldr	r3, [pc, #448]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a6f      	ldr	r2, [pc, #444]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005404:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	4b6d      	ldr	r3, [pc, #436]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a6c      	ldr	r2, [pc, #432]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	e00b      	b.n	8005430 <HAL_RCC_OscConfig+0xb0>
 8005418:	4b69      	ldr	r3, [pc, #420]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a68      	ldr	r2, [pc, #416]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 800541e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005422:	6013      	str	r3, [r2, #0]
 8005424:	4b66      	ldr	r3, [pc, #408]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a65      	ldr	r2, [pc, #404]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 800542a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800542e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d013      	beq.n	8005460 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005438:	f7fc fb2c 	bl	8001a94 <HAL_GetTick>
 800543c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005440:	f7fc fb28 	bl	8001a94 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b64      	cmp	r3, #100	@ 0x64
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e207      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005452:	4b5b      	ldr	r3, [pc, #364]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0f0      	beq.n	8005440 <HAL_RCC_OscConfig+0xc0>
 800545e:	e014      	b.n	800548a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005460:	f7fc fb18 	bl	8001a94 <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005468:	f7fc fb14 	bl	8001a94 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b64      	cmp	r3, #100	@ 0x64
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e1f3      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800547a:	4b51      	ldr	r3, [pc, #324]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1f0      	bne.n	8005468 <HAL_RCC_OscConfig+0xe8>
 8005486:	e000      	b.n	800548a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d063      	beq.n	800555e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005496:	4b4a      	ldr	r3, [pc, #296]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 030c 	and.w	r3, r3, #12
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00b      	beq.n	80054ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054a2:	4b47      	ldr	r3, [pc, #284]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054aa:	2b08      	cmp	r3, #8
 80054ac:	d11c      	bne.n	80054e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ae:	4b44      	ldr	r3, [pc, #272]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d116      	bne.n	80054e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ba:	4b41      	ldr	r3, [pc, #260]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d005      	beq.n	80054d2 <HAL_RCC_OscConfig+0x152>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d001      	beq.n	80054d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e1c7      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054d2:	4b3b      	ldr	r3, [pc, #236]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	00db      	lsls	r3, r3, #3
 80054e0:	4937      	ldr	r1, [pc, #220]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054e6:	e03a      	b.n	800555e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d020      	beq.n	8005532 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054f0:	4b34      	ldr	r3, [pc, #208]	@ (80055c4 <HAL_RCC_OscConfig+0x244>)
 80054f2:	2201      	movs	r2, #1
 80054f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f6:	f7fc facd 	bl	8001a94 <HAL_GetTick>
 80054fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054fc:	e008      	b.n	8005510 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054fe:	f7fc fac9 	bl	8001a94 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d901      	bls.n	8005510 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e1a8      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005510:	4b2b      	ldr	r3, [pc, #172]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0f0      	beq.n	80054fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800551c:	4b28      	ldr	r3, [pc, #160]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	4925      	ldr	r1, [pc, #148]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 800552c:	4313      	orrs	r3, r2
 800552e:	600b      	str	r3, [r1, #0]
 8005530:	e015      	b.n	800555e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005532:	4b24      	ldr	r3, [pc, #144]	@ (80055c4 <HAL_RCC_OscConfig+0x244>)
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005538:	f7fc faac 	bl	8001a94 <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800553e:	e008      	b.n	8005552 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005540:	f7fc faa8 	bl	8001a94 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e187      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005552:	4b1b      	ldr	r3, [pc, #108]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1f0      	bne.n	8005540 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0308 	and.w	r3, r3, #8
 8005566:	2b00      	cmp	r3, #0
 8005568:	d036      	beq.n	80055d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d016      	beq.n	80055a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005572:	4b15      	ldr	r3, [pc, #84]	@ (80055c8 <HAL_RCC_OscConfig+0x248>)
 8005574:	2201      	movs	r2, #1
 8005576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005578:	f7fc fa8c 	bl	8001a94 <HAL_GetTick>
 800557c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800557e:	e008      	b.n	8005592 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005580:	f7fc fa88 	bl	8001a94 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e167      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005592:	4b0b      	ldr	r3, [pc, #44]	@ (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005594:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d0f0      	beq.n	8005580 <HAL_RCC_OscConfig+0x200>
 800559e:	e01b      	b.n	80055d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055a0:	4b09      	ldr	r3, [pc, #36]	@ (80055c8 <HAL_RCC_OscConfig+0x248>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055a6:	f7fc fa75 	bl	8001a94 <HAL_GetTick>
 80055aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055ac:	e00e      	b.n	80055cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055ae:	f7fc fa71 	bl	8001a94 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d907      	bls.n	80055cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e150      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
 80055c0:	40023800 	.word	0x40023800
 80055c4:	42470000 	.word	0x42470000
 80055c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055cc:	4b88      	ldr	r3, [pc, #544]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 80055ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1ea      	bne.n	80055ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 8097 	beq.w	8005714 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055e6:	2300      	movs	r3, #0
 80055e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055ea:	4b81      	ldr	r3, [pc, #516]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 80055ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10f      	bne.n	8005616 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055f6:	2300      	movs	r3, #0
 80055f8:	60bb      	str	r3, [r7, #8]
 80055fa:	4b7d      	ldr	r3, [pc, #500]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 80055fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fe:	4a7c      	ldr	r2, [pc, #496]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005600:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005604:	6413      	str	r3, [r2, #64]	@ 0x40
 8005606:	4b7a      	ldr	r3, [pc, #488]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800560e:	60bb      	str	r3, [r7, #8]
 8005610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005612:	2301      	movs	r3, #1
 8005614:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005616:	4b77      	ldr	r3, [pc, #476]	@ (80057f4 <HAL_RCC_OscConfig+0x474>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800561e:	2b00      	cmp	r3, #0
 8005620:	d118      	bne.n	8005654 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005622:	4b74      	ldr	r3, [pc, #464]	@ (80057f4 <HAL_RCC_OscConfig+0x474>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a73      	ldr	r2, [pc, #460]	@ (80057f4 <HAL_RCC_OscConfig+0x474>)
 8005628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800562c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800562e:	f7fc fa31 	bl	8001a94 <HAL_GetTick>
 8005632:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005634:	e008      	b.n	8005648 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005636:	f7fc fa2d 	bl	8001a94 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	2b02      	cmp	r3, #2
 8005642:	d901      	bls.n	8005648 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e10c      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005648:	4b6a      	ldr	r3, [pc, #424]	@ (80057f4 <HAL_RCC_OscConfig+0x474>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005650:	2b00      	cmp	r3, #0
 8005652:	d0f0      	beq.n	8005636 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d106      	bne.n	800566a <HAL_RCC_OscConfig+0x2ea>
 800565c:	4b64      	ldr	r3, [pc, #400]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 800565e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005660:	4a63      	ldr	r2, [pc, #396]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005662:	f043 0301 	orr.w	r3, r3, #1
 8005666:	6713      	str	r3, [r2, #112]	@ 0x70
 8005668:	e01c      	b.n	80056a4 <HAL_RCC_OscConfig+0x324>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	2b05      	cmp	r3, #5
 8005670:	d10c      	bne.n	800568c <HAL_RCC_OscConfig+0x30c>
 8005672:	4b5f      	ldr	r3, [pc, #380]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005676:	4a5e      	ldr	r2, [pc, #376]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005678:	f043 0304 	orr.w	r3, r3, #4
 800567c:	6713      	str	r3, [r2, #112]	@ 0x70
 800567e:	4b5c      	ldr	r3, [pc, #368]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005682:	4a5b      	ldr	r2, [pc, #364]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005684:	f043 0301 	orr.w	r3, r3, #1
 8005688:	6713      	str	r3, [r2, #112]	@ 0x70
 800568a:	e00b      	b.n	80056a4 <HAL_RCC_OscConfig+0x324>
 800568c:	4b58      	ldr	r3, [pc, #352]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 800568e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005690:	4a57      	ldr	r2, [pc, #348]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005692:	f023 0301 	bic.w	r3, r3, #1
 8005696:	6713      	str	r3, [r2, #112]	@ 0x70
 8005698:	4b55      	ldr	r3, [pc, #340]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 800569a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800569c:	4a54      	ldr	r2, [pc, #336]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 800569e:	f023 0304 	bic.w	r3, r3, #4
 80056a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d015      	beq.n	80056d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ac:	f7fc f9f2 	bl	8001a94 <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056b2:	e00a      	b.n	80056ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056b4:	f7fc f9ee 	bl	8001a94 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e0cb      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ca:	4b49      	ldr	r3, [pc, #292]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 80056cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d0ee      	beq.n	80056b4 <HAL_RCC_OscConfig+0x334>
 80056d6:	e014      	b.n	8005702 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056d8:	f7fc f9dc 	bl	8001a94 <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056de:	e00a      	b.n	80056f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056e0:	f7fc f9d8 	bl	8001a94 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e0b5      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056f6:	4b3e      	ldr	r3, [pc, #248]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 80056f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1ee      	bne.n	80056e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005702:	7dfb      	ldrb	r3, [r7, #23]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d105      	bne.n	8005714 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005708:	4b39      	ldr	r3, [pc, #228]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 800570a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570c:	4a38      	ldr	r2, [pc, #224]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 800570e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005712:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 80a1 	beq.w	8005860 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800571e:	4b34      	ldr	r3, [pc, #208]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 030c 	and.w	r3, r3, #12
 8005726:	2b08      	cmp	r3, #8
 8005728:	d05c      	beq.n	80057e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	2b02      	cmp	r3, #2
 8005730:	d141      	bne.n	80057b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005732:	4b31      	ldr	r3, [pc, #196]	@ (80057f8 <HAL_RCC_OscConfig+0x478>)
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005738:	f7fc f9ac 	bl	8001a94 <HAL_GetTick>
 800573c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800573e:	e008      	b.n	8005752 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005740:	f7fc f9a8 	bl	8001a94 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e087      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005752:	4b27      	ldr	r3, [pc, #156]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1f0      	bne.n	8005740 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	69da      	ldr	r2, [r3, #28]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576c:	019b      	lsls	r3, r3, #6
 800576e:	431a      	orrs	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005774:	085b      	lsrs	r3, r3, #1
 8005776:	3b01      	subs	r3, #1
 8005778:	041b      	lsls	r3, r3, #16
 800577a:	431a      	orrs	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005780:	061b      	lsls	r3, r3, #24
 8005782:	491b      	ldr	r1, [pc, #108]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005784:	4313      	orrs	r3, r2
 8005786:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005788:	4b1b      	ldr	r3, [pc, #108]	@ (80057f8 <HAL_RCC_OscConfig+0x478>)
 800578a:	2201      	movs	r2, #1
 800578c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800578e:	f7fc f981 	bl	8001a94 <HAL_GetTick>
 8005792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005794:	e008      	b.n	80057a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005796:	f7fc f97d 	bl	8001a94 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e05c      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057a8:	4b11      	ldr	r3, [pc, #68]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0f0      	beq.n	8005796 <HAL_RCC_OscConfig+0x416>
 80057b4:	e054      	b.n	8005860 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057b6:	4b10      	ldr	r3, [pc, #64]	@ (80057f8 <HAL_RCC_OscConfig+0x478>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057bc:	f7fc f96a 	bl	8001a94 <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057c2:	e008      	b.n	80057d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057c4:	f7fc f966 	bl	8001a94 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e045      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057d6:	4b06      	ldr	r3, [pc, #24]	@ (80057f0 <HAL_RCC_OscConfig+0x470>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1f0      	bne.n	80057c4 <HAL_RCC_OscConfig+0x444>
 80057e2:	e03d      	b.n	8005860 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d107      	bne.n	80057fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e038      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
 80057f0:	40023800 	.word	0x40023800
 80057f4:	40007000 	.word	0x40007000
 80057f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057fc:	4b1b      	ldr	r3, [pc, #108]	@ (800586c <HAL_RCC_OscConfig+0x4ec>)
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d028      	beq.n	800585c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005814:	429a      	cmp	r2, r3
 8005816:	d121      	bne.n	800585c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005822:	429a      	cmp	r2, r3
 8005824:	d11a      	bne.n	800585c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800582c:	4013      	ands	r3, r2
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005832:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005834:	4293      	cmp	r3, r2
 8005836:	d111      	bne.n	800585c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005842:	085b      	lsrs	r3, r3, #1
 8005844:	3b01      	subs	r3, #1
 8005846:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005848:	429a      	cmp	r2, r3
 800584a:	d107      	bne.n	800585c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005856:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005858:	429a      	cmp	r2, r3
 800585a:	d001      	beq.n	8005860 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e000      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3718      	adds	r7, #24
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	40023800 	.word	0x40023800

08005870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d101      	bne.n	8005884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e0cc      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005884:	4b68      	ldr	r3, [pc, #416]	@ (8005a28 <HAL_RCC_ClockConfig+0x1b8>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	683a      	ldr	r2, [r7, #0]
 800588e:	429a      	cmp	r2, r3
 8005890:	d90c      	bls.n	80058ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005892:	4b65      	ldr	r3, [pc, #404]	@ (8005a28 <HAL_RCC_ClockConfig+0x1b8>)
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	b2d2      	uxtb	r2, r2
 8005898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800589a:	4b63      	ldr	r3, [pc, #396]	@ (8005a28 <HAL_RCC_ClockConfig+0x1b8>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0307 	and.w	r3, r3, #7
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d001      	beq.n	80058ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e0b8      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d020      	beq.n	80058fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d005      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058c4:	4b59      	ldr	r3, [pc, #356]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	4a58      	ldr	r2, [pc, #352]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80058ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80058ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0308 	and.w	r3, r3, #8
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d005      	beq.n	80058e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058dc:	4b53      	ldr	r3, [pc, #332]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	4a52      	ldr	r2, [pc, #328]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80058e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80058e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058e8:	4b50      	ldr	r3, [pc, #320]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	494d      	ldr	r1, [pc, #308]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d044      	beq.n	8005990 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d107      	bne.n	800591e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800590e:	4b47      	ldr	r3, [pc, #284]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d119      	bne.n	800594e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e07f      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	2b02      	cmp	r3, #2
 8005924:	d003      	beq.n	800592e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800592a:	2b03      	cmp	r3, #3
 800592c:	d107      	bne.n	800593e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800592e:	4b3f      	ldr	r3, [pc, #252]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d109      	bne.n	800594e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e06f      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800593e:	4b3b      	ldr	r3, [pc, #236]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e067      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800594e:	4b37      	ldr	r3, [pc, #220]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f023 0203 	bic.w	r2, r3, #3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	4934      	ldr	r1, [pc, #208]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 800595c:	4313      	orrs	r3, r2
 800595e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005960:	f7fc f898 	bl	8001a94 <HAL_GetTick>
 8005964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005966:	e00a      	b.n	800597e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005968:	f7fc f894 	bl	8001a94 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005976:	4293      	cmp	r3, r2
 8005978:	d901      	bls.n	800597e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e04f      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800597e:	4b2b      	ldr	r3, [pc, #172]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 020c 	and.w	r2, r3, #12
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	429a      	cmp	r2, r3
 800598e:	d1eb      	bne.n	8005968 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005990:	4b25      	ldr	r3, [pc, #148]	@ (8005a28 <HAL_RCC_ClockConfig+0x1b8>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0307 	and.w	r3, r3, #7
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d20c      	bcs.n	80059b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800599e:	4b22      	ldr	r3, [pc, #136]	@ (8005a28 <HAL_RCC_ClockConfig+0x1b8>)
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a6:	4b20      	ldr	r3, [pc, #128]	@ (8005a28 <HAL_RCC_ClockConfig+0x1b8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0307 	and.w	r3, r3, #7
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d001      	beq.n	80059b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e032      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d008      	beq.n	80059d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059c4:	4b19      	ldr	r3, [pc, #100]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	4916      	ldr	r1, [pc, #88]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0308 	and.w	r3, r3, #8
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d009      	beq.n	80059f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059e2:	4b12      	ldr	r3, [pc, #72]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	00db      	lsls	r3, r3, #3
 80059f0:	490e      	ldr	r1, [pc, #56]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059f6:	f000 f821 	bl	8005a3c <HAL_RCC_GetSysClockFreq>
 80059fa:	4602      	mov	r2, r0
 80059fc:	4b0b      	ldr	r3, [pc, #44]	@ (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	091b      	lsrs	r3, r3, #4
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	490a      	ldr	r1, [pc, #40]	@ (8005a30 <HAL_RCC_ClockConfig+0x1c0>)
 8005a08:	5ccb      	ldrb	r3, [r1, r3]
 8005a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a0e:	4a09      	ldr	r2, [pc, #36]	@ (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 8005a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a12:	4b09      	ldr	r3, [pc, #36]	@ (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fb fff8 	bl	8001a0c <HAL_InitTick>

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	40023c00 	.word	0x40023c00
 8005a2c:	40023800 	.word	0x40023800
 8005a30:	08007788 	.word	0x08007788
 8005a34:	20000000 	.word	0x20000000
 8005a38:	20000018 	.word	0x20000018

08005a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a40:	b094      	sub	sp, #80	@ 0x50
 8005a42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a48:	2300      	movs	r3, #0
 8005a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a54:	4b79      	ldr	r3, [pc, #484]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f003 030c 	and.w	r3, r3, #12
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d00d      	beq.n	8005a7c <HAL_RCC_GetSysClockFreq+0x40>
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	f200 80e1 	bhi.w	8005c28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <HAL_RCC_GetSysClockFreq+0x34>
 8005a6a:	2b04      	cmp	r3, #4
 8005a6c:	d003      	beq.n	8005a76 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a6e:	e0db      	b.n	8005c28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a70:	4b73      	ldr	r3, [pc, #460]	@ (8005c40 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a72:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005a74:	e0db      	b.n	8005c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a76:	4b73      	ldr	r3, [pc, #460]	@ (8005c44 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a7a:	e0d8      	b.n	8005c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a7c:	4b6f      	ldr	r3, [pc, #444]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a84:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a86:	4b6d      	ldr	r3, [pc, #436]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d063      	beq.n	8005b5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a92:	4b6a      	ldr	r3, [pc, #424]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	099b      	lsrs	r3, r3, #6
 8005a98:	2200      	movs	r2, #0
 8005a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aa4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aaa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005aae:	4622      	mov	r2, r4
 8005ab0:	462b      	mov	r3, r5
 8005ab2:	f04f 0000 	mov.w	r0, #0
 8005ab6:	f04f 0100 	mov.w	r1, #0
 8005aba:	0159      	lsls	r1, r3, #5
 8005abc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ac0:	0150      	lsls	r0, r2, #5
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	4621      	mov	r1, r4
 8005ac8:	1a51      	subs	r1, r2, r1
 8005aca:	6139      	str	r1, [r7, #16]
 8005acc:	4629      	mov	r1, r5
 8005ace:	eb63 0301 	sbc.w	r3, r3, r1
 8005ad2:	617b      	str	r3, [r7, #20]
 8005ad4:	f04f 0200 	mov.w	r2, #0
 8005ad8:	f04f 0300 	mov.w	r3, #0
 8005adc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ae0:	4659      	mov	r1, fp
 8005ae2:	018b      	lsls	r3, r1, #6
 8005ae4:	4651      	mov	r1, sl
 8005ae6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005aea:	4651      	mov	r1, sl
 8005aec:	018a      	lsls	r2, r1, #6
 8005aee:	4651      	mov	r1, sl
 8005af0:	ebb2 0801 	subs.w	r8, r2, r1
 8005af4:	4659      	mov	r1, fp
 8005af6:	eb63 0901 	sbc.w	r9, r3, r1
 8005afa:	f04f 0200 	mov.w	r2, #0
 8005afe:	f04f 0300 	mov.w	r3, #0
 8005b02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b0e:	4690      	mov	r8, r2
 8005b10:	4699      	mov	r9, r3
 8005b12:	4623      	mov	r3, r4
 8005b14:	eb18 0303 	adds.w	r3, r8, r3
 8005b18:	60bb      	str	r3, [r7, #8]
 8005b1a:	462b      	mov	r3, r5
 8005b1c:	eb49 0303 	adc.w	r3, r9, r3
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	f04f 0200 	mov.w	r2, #0
 8005b26:	f04f 0300 	mov.w	r3, #0
 8005b2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b2e:	4629      	mov	r1, r5
 8005b30:	024b      	lsls	r3, r1, #9
 8005b32:	4621      	mov	r1, r4
 8005b34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b38:	4621      	mov	r1, r4
 8005b3a:	024a      	lsls	r2, r1, #9
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	4619      	mov	r1, r3
 8005b40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b42:	2200      	movs	r2, #0
 8005b44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b4c:	f7fa fb44 	bl	80001d8 <__aeabi_uldivmod>
 8005b50:	4602      	mov	r2, r0
 8005b52:	460b      	mov	r3, r1
 8005b54:	4613      	mov	r3, r2
 8005b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b58:	e058      	b.n	8005c0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b5a:	4b38      	ldr	r3, [pc, #224]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	099b      	lsrs	r3, r3, #6
 8005b60:	2200      	movs	r2, #0
 8005b62:	4618      	mov	r0, r3
 8005b64:	4611      	mov	r1, r2
 8005b66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b6a:	623b      	str	r3, [r7, #32]
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b74:	4642      	mov	r2, r8
 8005b76:	464b      	mov	r3, r9
 8005b78:	f04f 0000 	mov.w	r0, #0
 8005b7c:	f04f 0100 	mov.w	r1, #0
 8005b80:	0159      	lsls	r1, r3, #5
 8005b82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b86:	0150      	lsls	r0, r2, #5
 8005b88:	4602      	mov	r2, r0
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	4641      	mov	r1, r8
 8005b8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b92:	4649      	mov	r1, r9
 8005b94:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b98:	f04f 0200 	mov.w	r2, #0
 8005b9c:	f04f 0300 	mov.w	r3, #0
 8005ba0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ba4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ba8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005bac:	ebb2 040a 	subs.w	r4, r2, sl
 8005bb0:	eb63 050b 	sbc.w	r5, r3, fp
 8005bb4:	f04f 0200 	mov.w	r2, #0
 8005bb8:	f04f 0300 	mov.w	r3, #0
 8005bbc:	00eb      	lsls	r3, r5, #3
 8005bbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bc2:	00e2      	lsls	r2, r4, #3
 8005bc4:	4614      	mov	r4, r2
 8005bc6:	461d      	mov	r5, r3
 8005bc8:	4643      	mov	r3, r8
 8005bca:	18e3      	adds	r3, r4, r3
 8005bcc:	603b      	str	r3, [r7, #0]
 8005bce:	464b      	mov	r3, r9
 8005bd0:	eb45 0303 	adc.w	r3, r5, r3
 8005bd4:	607b      	str	r3, [r7, #4]
 8005bd6:	f04f 0200 	mov.w	r2, #0
 8005bda:	f04f 0300 	mov.w	r3, #0
 8005bde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005be2:	4629      	mov	r1, r5
 8005be4:	028b      	lsls	r3, r1, #10
 8005be6:	4621      	mov	r1, r4
 8005be8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bec:	4621      	mov	r1, r4
 8005bee:	028a      	lsls	r2, r1, #10
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	61bb      	str	r3, [r7, #24]
 8005bfa:	61fa      	str	r2, [r7, #28]
 8005bfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c00:	f7fa faea 	bl	80001d8 <__aeabi_uldivmod>
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	4613      	mov	r3, r2
 8005c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	0c1b      	lsrs	r3, r3, #16
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	3301      	adds	r3, #1
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005c1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c26:	e002      	b.n	8005c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c28:	4b05      	ldr	r3, [pc, #20]	@ (8005c40 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3750      	adds	r7, #80	@ 0x50
 8005c34:	46bd      	mov	sp, r7
 8005c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c3a:	bf00      	nop
 8005c3c:	40023800 	.word	0x40023800
 8005c40:	00f42400 	.word	0x00f42400
 8005c44:	007a1200 	.word	0x007a1200

08005c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c4c:	4b03      	ldr	r3, [pc, #12]	@ (8005c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	20000000 	.word	0x20000000

08005c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c64:	f7ff fff0 	bl	8005c48 <HAL_RCC_GetHCLKFreq>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	4b05      	ldr	r3, [pc, #20]	@ (8005c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	0a9b      	lsrs	r3, r3, #10
 8005c70:	f003 0307 	and.w	r3, r3, #7
 8005c74:	4903      	ldr	r1, [pc, #12]	@ (8005c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c76:	5ccb      	ldrb	r3, [r1, r3]
 8005c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	40023800 	.word	0x40023800
 8005c84:	08007798 	.word	0x08007798

08005c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c8c:	f7ff ffdc 	bl	8005c48 <HAL_RCC_GetHCLKFreq>
 8005c90:	4602      	mov	r2, r0
 8005c92:	4b05      	ldr	r3, [pc, #20]	@ (8005ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	0b5b      	lsrs	r3, r3, #13
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	4903      	ldr	r1, [pc, #12]	@ (8005cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c9e:	5ccb      	ldrb	r3, [r1, r3]
 8005ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	40023800 	.word	0x40023800
 8005cac:	08007798 	.word	0x08007798

08005cb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e041      	b.n	8005d46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d106      	bne.n	8005cdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7fb f822 	bl	8000d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3304      	adds	r3, #4
 8005cec:	4619      	mov	r1, r3
 8005cee:	4610      	mov	r0, r2
 8005cf0:	f000 fa9e 	bl	8006230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
	...

08005d50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d001      	beq.n	8005d68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e044      	b.n	8005df2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 0201 	orr.w	r2, r2, #1
 8005d7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a1e      	ldr	r2, [pc, #120]	@ (8005e00 <HAL_TIM_Base_Start_IT+0xb0>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d018      	beq.n	8005dbc <HAL_TIM_Base_Start_IT+0x6c>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d92:	d013      	beq.n	8005dbc <HAL_TIM_Base_Start_IT+0x6c>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a1a      	ldr	r2, [pc, #104]	@ (8005e04 <HAL_TIM_Base_Start_IT+0xb4>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d00e      	beq.n	8005dbc <HAL_TIM_Base_Start_IT+0x6c>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a19      	ldr	r2, [pc, #100]	@ (8005e08 <HAL_TIM_Base_Start_IT+0xb8>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d009      	beq.n	8005dbc <HAL_TIM_Base_Start_IT+0x6c>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a17      	ldr	r2, [pc, #92]	@ (8005e0c <HAL_TIM_Base_Start_IT+0xbc>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d004      	beq.n	8005dbc <HAL_TIM_Base_Start_IT+0x6c>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a16      	ldr	r2, [pc, #88]	@ (8005e10 <HAL_TIM_Base_Start_IT+0xc0>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d111      	bne.n	8005de0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f003 0307 	and.w	r3, r3, #7
 8005dc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2b06      	cmp	r3, #6
 8005dcc:	d010      	beq.n	8005df0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f042 0201 	orr.w	r2, r2, #1
 8005ddc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dde:	e007      	b.n	8005df0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0201 	orr.w	r2, r2, #1
 8005dee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	40010000 	.word	0x40010000
 8005e04:	40000400 	.word	0x40000400
 8005e08:	40000800 	.word	0x40000800
 8005e0c:	40000c00 	.word	0x40000c00
 8005e10:	40014000 	.word	0x40014000

08005e14 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68da      	ldr	r2, [r3, #12]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 0201 	bic.w	r2, r2, #1
 8005e2a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6a1a      	ldr	r2, [r3, #32]
 8005e32:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005e36:	4013      	ands	r3, r2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10f      	bne.n	8005e5c <HAL_TIM_Base_Stop_IT+0x48>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6a1a      	ldr	r2, [r3, #32]
 8005e42:	f240 4344 	movw	r3, #1092	@ 0x444
 8005e46:	4013      	ands	r3, r2
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d107      	bne.n	8005e5c <HAL_TIM_Base_Stop_IT+0x48>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 0201 	bic.w	r2, r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b084      	sub	sp, #16
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d020      	beq.n	8005ed6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d01b      	beq.n	8005ed6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f06f 0202 	mvn.w	r2, #2
 8005ea6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	f003 0303 	and.w	r3, r3, #3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 f999 	bl	80061f4 <HAL_TIM_IC_CaptureCallback>
 8005ec2:	e005      	b.n	8005ed0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f98b 	bl	80061e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f99c 	bl	8006208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f003 0304 	and.w	r3, r3, #4
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d020      	beq.n	8005f22 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f003 0304 	and.w	r3, r3, #4
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d01b      	beq.n	8005f22 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f06f 0204 	mvn.w	r2, #4
 8005ef2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d003      	beq.n	8005f10 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f973 	bl	80061f4 <HAL_TIM_IC_CaptureCallback>
 8005f0e:	e005      	b.n	8005f1c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f965 	bl	80061e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f976 	bl	8006208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f003 0308 	and.w	r3, r3, #8
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d020      	beq.n	8005f6e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f003 0308 	and.w	r3, r3, #8
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d01b      	beq.n	8005f6e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f06f 0208 	mvn.w	r2, #8
 8005f3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2204      	movs	r2, #4
 8005f44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	f003 0303 	and.w	r3, r3, #3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d003      	beq.n	8005f5c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f94d 	bl	80061f4 <HAL_TIM_IC_CaptureCallback>
 8005f5a:	e005      	b.n	8005f68 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f93f 	bl	80061e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f950 	bl	8006208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	f003 0310 	and.w	r3, r3, #16
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d020      	beq.n	8005fba <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f003 0310 	and.w	r3, r3, #16
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d01b      	beq.n	8005fba <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f06f 0210 	mvn.w	r2, #16
 8005f8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2208      	movs	r2, #8
 8005f90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	69db      	ldr	r3, [r3, #28]
 8005f98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d003      	beq.n	8005fa8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f927 	bl	80061f4 <HAL_TIM_IC_CaptureCallback>
 8005fa6:	e005      	b.n	8005fb4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f919 	bl	80061e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f92a 	bl	8006208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00c      	beq.n	8005fde <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f003 0301 	and.w	r3, r3, #1
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d007      	beq.n	8005fde <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f06f 0201 	mvn.w	r2, #1
 8005fd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f7fa fa93 	bl	8000504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00c      	beq.n	8006002 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d007      	beq.n	8006002 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005ffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fab5 	bl	800656c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00c      	beq.n	8006026 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006012:	2b00      	cmp	r3, #0
 8006014:	d007      	beq.n	8006026 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800601e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 f8fb 	bl	800621c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	f003 0320 	and.w	r3, r3, #32
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00c      	beq.n	800604a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f003 0320 	and.w	r3, r3, #32
 8006036:	2b00      	cmp	r3, #0
 8006038:	d007      	beq.n	800604a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f06f 0220 	mvn.w	r2, #32
 8006042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 fa87 	bl	8006558 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800604a:	bf00      	nop
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b084      	sub	sp, #16
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
 800605a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800605c:	2300      	movs	r3, #0
 800605e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006066:	2b01      	cmp	r3, #1
 8006068:	d101      	bne.n	800606e <HAL_TIM_ConfigClockSource+0x1c>
 800606a:	2302      	movs	r3, #2
 800606c:	e0b4      	b.n	80061d8 <HAL_TIM_ConfigClockSource+0x186>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2202      	movs	r2, #2
 800607a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800608c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006094:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060a6:	d03e      	beq.n	8006126 <HAL_TIM_ConfigClockSource+0xd4>
 80060a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060ac:	f200 8087 	bhi.w	80061be <HAL_TIM_ConfigClockSource+0x16c>
 80060b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060b4:	f000 8086 	beq.w	80061c4 <HAL_TIM_ConfigClockSource+0x172>
 80060b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060bc:	d87f      	bhi.n	80061be <HAL_TIM_ConfigClockSource+0x16c>
 80060be:	2b70      	cmp	r3, #112	@ 0x70
 80060c0:	d01a      	beq.n	80060f8 <HAL_TIM_ConfigClockSource+0xa6>
 80060c2:	2b70      	cmp	r3, #112	@ 0x70
 80060c4:	d87b      	bhi.n	80061be <HAL_TIM_ConfigClockSource+0x16c>
 80060c6:	2b60      	cmp	r3, #96	@ 0x60
 80060c8:	d050      	beq.n	800616c <HAL_TIM_ConfigClockSource+0x11a>
 80060ca:	2b60      	cmp	r3, #96	@ 0x60
 80060cc:	d877      	bhi.n	80061be <HAL_TIM_ConfigClockSource+0x16c>
 80060ce:	2b50      	cmp	r3, #80	@ 0x50
 80060d0:	d03c      	beq.n	800614c <HAL_TIM_ConfigClockSource+0xfa>
 80060d2:	2b50      	cmp	r3, #80	@ 0x50
 80060d4:	d873      	bhi.n	80061be <HAL_TIM_ConfigClockSource+0x16c>
 80060d6:	2b40      	cmp	r3, #64	@ 0x40
 80060d8:	d058      	beq.n	800618c <HAL_TIM_ConfigClockSource+0x13a>
 80060da:	2b40      	cmp	r3, #64	@ 0x40
 80060dc:	d86f      	bhi.n	80061be <HAL_TIM_ConfigClockSource+0x16c>
 80060de:	2b30      	cmp	r3, #48	@ 0x30
 80060e0:	d064      	beq.n	80061ac <HAL_TIM_ConfigClockSource+0x15a>
 80060e2:	2b30      	cmp	r3, #48	@ 0x30
 80060e4:	d86b      	bhi.n	80061be <HAL_TIM_ConfigClockSource+0x16c>
 80060e6:	2b20      	cmp	r3, #32
 80060e8:	d060      	beq.n	80061ac <HAL_TIM_ConfigClockSource+0x15a>
 80060ea:	2b20      	cmp	r3, #32
 80060ec:	d867      	bhi.n	80061be <HAL_TIM_ConfigClockSource+0x16c>
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d05c      	beq.n	80061ac <HAL_TIM_ConfigClockSource+0x15a>
 80060f2:	2b10      	cmp	r3, #16
 80060f4:	d05a      	beq.n	80061ac <HAL_TIM_ConfigClockSource+0x15a>
 80060f6:	e062      	b.n	80061be <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006108:	f000 f998 	bl	800643c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800611a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	609a      	str	r2, [r3, #8]
      break;
 8006124:	e04f      	b.n	80061c6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006136:	f000 f981 	bl	800643c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689a      	ldr	r2, [r3, #8]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006148:	609a      	str	r2, [r3, #8]
      break;
 800614a:	e03c      	b.n	80061c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006158:	461a      	mov	r2, r3
 800615a:	f000 f8f5 	bl	8006348 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2150      	movs	r1, #80	@ 0x50
 8006164:	4618      	mov	r0, r3
 8006166:	f000 f94e 	bl	8006406 <TIM_ITRx_SetConfig>
      break;
 800616a:	e02c      	b.n	80061c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006178:	461a      	mov	r2, r3
 800617a:	f000 f914 	bl	80063a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2160      	movs	r1, #96	@ 0x60
 8006184:	4618      	mov	r0, r3
 8006186:	f000 f93e 	bl	8006406 <TIM_ITRx_SetConfig>
      break;
 800618a:	e01c      	b.n	80061c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006198:	461a      	mov	r2, r3
 800619a:	f000 f8d5 	bl	8006348 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2140      	movs	r1, #64	@ 0x40
 80061a4:	4618      	mov	r0, r3
 80061a6:	f000 f92e 	bl	8006406 <TIM_ITRx_SetConfig>
      break;
 80061aa:	e00c      	b.n	80061c6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4619      	mov	r1, r3
 80061b6:	4610      	mov	r0, r2
 80061b8:	f000 f925 	bl	8006406 <TIM_ITRx_SetConfig>
      break;
 80061bc:	e003      	b.n	80061c6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	73fb      	strb	r3, [r7, #15]
      break;
 80061c2:	e000      	b.n	80061c6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80061c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80061d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a3a      	ldr	r2, [pc, #232]	@ (800632c <TIM_Base_SetConfig+0xfc>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d00f      	beq.n	8006268 <TIM_Base_SetConfig+0x38>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800624e:	d00b      	beq.n	8006268 <TIM_Base_SetConfig+0x38>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a37      	ldr	r2, [pc, #220]	@ (8006330 <TIM_Base_SetConfig+0x100>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d007      	beq.n	8006268 <TIM_Base_SetConfig+0x38>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a36      	ldr	r2, [pc, #216]	@ (8006334 <TIM_Base_SetConfig+0x104>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d003      	beq.n	8006268 <TIM_Base_SetConfig+0x38>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a35      	ldr	r2, [pc, #212]	@ (8006338 <TIM_Base_SetConfig+0x108>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d108      	bne.n	800627a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800626e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	4313      	orrs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a2b      	ldr	r2, [pc, #172]	@ (800632c <TIM_Base_SetConfig+0xfc>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d01b      	beq.n	80062ba <TIM_Base_SetConfig+0x8a>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006288:	d017      	beq.n	80062ba <TIM_Base_SetConfig+0x8a>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a28      	ldr	r2, [pc, #160]	@ (8006330 <TIM_Base_SetConfig+0x100>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d013      	beq.n	80062ba <TIM_Base_SetConfig+0x8a>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a27      	ldr	r2, [pc, #156]	@ (8006334 <TIM_Base_SetConfig+0x104>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d00f      	beq.n	80062ba <TIM_Base_SetConfig+0x8a>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a26      	ldr	r2, [pc, #152]	@ (8006338 <TIM_Base_SetConfig+0x108>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d00b      	beq.n	80062ba <TIM_Base_SetConfig+0x8a>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a25      	ldr	r2, [pc, #148]	@ (800633c <TIM_Base_SetConfig+0x10c>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d007      	beq.n	80062ba <TIM_Base_SetConfig+0x8a>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a24      	ldr	r2, [pc, #144]	@ (8006340 <TIM_Base_SetConfig+0x110>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d003      	beq.n	80062ba <TIM_Base_SetConfig+0x8a>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a23      	ldr	r2, [pc, #140]	@ (8006344 <TIM_Base_SetConfig+0x114>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d108      	bne.n	80062cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a0e      	ldr	r2, [pc, #56]	@ (800632c <TIM_Base_SetConfig+0xfc>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d103      	bne.n	8006300 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	691a      	ldr	r2, [r3, #16]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b01      	cmp	r3, #1
 8006310:	d105      	bne.n	800631e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	f023 0201 	bic.w	r2, r3, #1
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	611a      	str	r2, [r3, #16]
  }
}
 800631e:	bf00      	nop
 8006320:	3714      	adds	r7, #20
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	40010000 	.word	0x40010000
 8006330:	40000400 	.word	0x40000400
 8006334:	40000800 	.word	0x40000800
 8006338:	40000c00 	.word	0x40000c00
 800633c:	40014000 	.word	0x40014000
 8006340:	40014400 	.word	0x40014400
 8006344:	40014800 	.word	0x40014800

08006348 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006348:	b480      	push	{r7}
 800634a:	b087      	sub	sp, #28
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6a1b      	ldr	r3, [r3, #32]
 8006358:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	f023 0201 	bic.w	r2, r3, #1
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006372:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	011b      	lsls	r3, r3, #4
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	4313      	orrs	r3, r2
 800637c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f023 030a 	bic.w	r3, r3, #10
 8006384:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	4313      	orrs	r3, r2
 800638c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	621a      	str	r2, [r3, #32]
}
 800639a:	bf00      	nop
 800639c:	371c      	adds	r7, #28
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b087      	sub	sp, #28
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	60f8      	str	r0, [r7, #12]
 80063ae:	60b9      	str	r1, [r7, #8]
 80063b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	f023 0210 	bic.w	r2, r3, #16
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80063d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	031b      	lsls	r3, r3, #12
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	4313      	orrs	r3, r2
 80063da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80063e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	011b      	lsls	r3, r3, #4
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	621a      	str	r2, [r3, #32]
}
 80063fa:	bf00      	nop
 80063fc:	371c      	adds	r7, #28
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006406:	b480      	push	{r7}
 8006408:	b085      	sub	sp, #20
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800641c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4313      	orrs	r3, r2
 8006424:	f043 0307 	orr.w	r3, r3, #7
 8006428:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	609a      	str	r2, [r3, #8]
}
 8006430:	bf00      	nop
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
 8006448:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006456:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	021a      	lsls	r2, r3, #8
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	431a      	orrs	r2, r3
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	4313      	orrs	r3, r2
 8006464:	697a      	ldr	r2, [r7, #20]
 8006466:	4313      	orrs	r3, r2
 8006468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	609a      	str	r2, [r3, #8]
}
 8006470:	bf00      	nop
 8006472:	371c      	adds	r7, #28
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800648c:	2b01      	cmp	r3, #1
 800648e:	d101      	bne.n	8006494 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006490:	2302      	movs	r3, #2
 8006492:	e050      	b.n	8006536 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a1c      	ldr	r2, [pc, #112]	@ (8006544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d018      	beq.n	800650a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064e0:	d013      	beq.n	800650a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a18      	ldr	r2, [pc, #96]	@ (8006548 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d00e      	beq.n	800650a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a16      	ldr	r2, [pc, #88]	@ (800654c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d009      	beq.n	800650a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a15      	ldr	r2, [pc, #84]	@ (8006550 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d004      	beq.n	800650a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a13      	ldr	r2, [pc, #76]	@ (8006554 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d10c      	bne.n	8006524 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006510:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	4313      	orrs	r3, r2
 800651a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	40010000 	.word	0x40010000
 8006548:	40000400 	.word	0x40000400
 800654c:	40000800 	.word	0x40000800
 8006550:	40000c00 	.word	0x40000c00
 8006554:	40014000 	.word	0x40014000

08006558 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e042      	b.n	8006618 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d106      	bne.n	80065ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7fa fc3c 	bl	8000e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2224      	movs	r2, #36	@ 0x24
 80065b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68da      	ldr	r2, [r3, #12]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 fe21 	bl	800720c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	691a      	ldr	r2, [r3, #16]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80065d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	695a      	ldr	r2, [r3, #20]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80065e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68da      	ldr	r2, [r3, #12]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2220      	movs	r2, #32
 8006604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2220      	movs	r2, #32
 800660c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3708      	adds	r7, #8
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	4613      	mov	r3, r2
 800662c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b20      	cmp	r3, #32
 8006638:	d112      	bne.n	8006660 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <HAL_UART_Receive_IT+0x26>
 8006640:	88fb      	ldrh	r3, [r7, #6]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d101      	bne.n	800664a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e00b      	b.n	8006662 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006650:	88fb      	ldrh	r3, [r7, #6]
 8006652:	461a      	mov	r2, r3
 8006654:	68b9      	ldr	r1, [r7, #8]
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f000 fbd9 	bl	8006e0e <UART_Start_Receive_IT>
 800665c:	4603      	mov	r3, r0
 800665e:	e000      	b.n	8006662 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006660:	2302      	movs	r3, #2
  }
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
	...

0800666c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b08c      	sub	sp, #48	@ 0x30
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	4613      	mov	r3, r2
 8006678:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b20      	cmp	r3, #32
 8006684:	d156      	bne.n	8006734 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <HAL_UART_Transmit_DMA+0x26>
 800668c:	88fb      	ldrh	r3, [r7, #6]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e04f      	b.n	8006736 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	88fa      	ldrh	r2, [r7, #6]
 80066a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	88fa      	ldrh	r2, [r7, #6]
 80066a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2221      	movs	r2, #33	@ 0x21
 80066b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ba:	4a21      	ldr	r2, [pc, #132]	@ (8006740 <HAL_UART_Transmit_DMA+0xd4>)
 80066bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066c2:	4a20      	ldr	r2, [pc, #128]	@ (8006744 <HAL_UART_Transmit_DMA+0xd8>)
 80066c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ca:	4a1f      	ldr	r2, [pc, #124]	@ (8006748 <HAL_UART_Transmit_DMA+0xdc>)
 80066cc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d2:	2200      	movs	r2, #0
 80066d4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80066d6:	f107 0308 	add.w	r3, r7, #8
 80066da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80066e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e2:	6819      	ldr	r1, [r3, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3304      	adds	r3, #4
 80066ea:	461a      	mov	r2, r3
 80066ec:	88fb      	ldrh	r3, [r7, #6]
 80066ee:	f7fb ffa9 	bl	8002644 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80066fa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3314      	adds	r3, #20
 8006702:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	e853 3f00 	ldrex	r3, [r3]
 800670a:	617b      	str	r3, [r7, #20]
   return(result);
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006712:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	3314      	adds	r3, #20
 800671a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800671c:	627a      	str	r2, [r7, #36]	@ 0x24
 800671e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006720:	6a39      	ldr	r1, [r7, #32]
 8006722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006724:	e841 2300 	strex	r3, r2, [r1]
 8006728:	61fb      	str	r3, [r7, #28]
   return(result);
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1e5      	bne.n	80066fc <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006730:	2300      	movs	r3, #0
 8006732:	e000      	b.n	8006736 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006734:	2302      	movs	r3, #2
  }
}
 8006736:	4618      	mov	r0, r3
 8006738:	3730      	adds	r7, #48	@ 0x30
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	08006cc5 	.word	0x08006cc5
 8006744:	08006d5f 	.word	0x08006d5f
 8006748:	08006d7b 	.word	0x08006d7b

0800674c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b0ba      	sub	sp, #232	@ 0xe8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006772:	2300      	movs	r3, #0
 8006774:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006778:	2300      	movs	r3, #0
 800677a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800677e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006782:	f003 030f 	and.w	r3, r3, #15
 8006786:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800678a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10f      	bne.n	80067b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006796:	f003 0320 	and.w	r3, r3, #32
 800679a:	2b00      	cmp	r3, #0
 800679c:	d009      	beq.n	80067b2 <HAL_UART_IRQHandler+0x66>
 800679e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067a2:	f003 0320 	and.w	r3, r3, #32
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 fc70 	bl	8007090 <UART_Receive_IT>
      return;
 80067b0:	e25b      	b.n	8006c6a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80067b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f000 80de 	beq.w	8006978 <HAL_UART_IRQHandler+0x22c>
 80067bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d106      	bne.n	80067d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80067c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067cc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f000 80d1 	beq.w	8006978 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067da:	f003 0301 	and.w	r3, r3, #1
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00b      	beq.n	80067fa <HAL_UART_IRQHandler+0xae>
 80067e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d005      	beq.n	80067fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067f2:	f043 0201 	orr.w	r2, r3, #1
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067fe:	f003 0304 	and.w	r3, r3, #4
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00b      	beq.n	800681e <HAL_UART_IRQHandler+0xd2>
 8006806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b00      	cmp	r3, #0
 8006810:	d005      	beq.n	800681e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006816:	f043 0202 	orr.w	r2, r3, #2
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800681e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006822:	f003 0302 	and.w	r3, r3, #2
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00b      	beq.n	8006842 <HAL_UART_IRQHandler+0xf6>
 800682a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	d005      	beq.n	8006842 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800683a:	f043 0204 	orr.w	r2, r3, #4
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006846:	f003 0308 	and.w	r3, r3, #8
 800684a:	2b00      	cmp	r3, #0
 800684c:	d011      	beq.n	8006872 <HAL_UART_IRQHandler+0x126>
 800684e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006852:	f003 0320 	and.w	r3, r3, #32
 8006856:	2b00      	cmp	r3, #0
 8006858:	d105      	bne.n	8006866 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800685a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b00      	cmp	r3, #0
 8006864:	d005      	beq.n	8006872 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800686a:	f043 0208 	orr.w	r2, r3, #8
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006876:	2b00      	cmp	r3, #0
 8006878:	f000 81f2 	beq.w	8006c60 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800687c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006880:	f003 0320 	and.w	r3, r3, #32
 8006884:	2b00      	cmp	r3, #0
 8006886:	d008      	beq.n	800689a <HAL_UART_IRQHandler+0x14e>
 8006888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800688c:	f003 0320 	and.w	r3, r3, #32
 8006890:	2b00      	cmp	r3, #0
 8006892:	d002      	beq.n	800689a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fbfb 	bl	8007090 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068a4:	2b40      	cmp	r3, #64	@ 0x40
 80068a6:	bf0c      	ite	eq
 80068a8:	2301      	moveq	r3, #1
 80068aa:	2300      	movne	r3, #0
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068b6:	f003 0308 	and.w	r3, r3, #8
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d103      	bne.n	80068c6 <HAL_UART_IRQHandler+0x17a>
 80068be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d04f      	beq.n	8006966 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 fb03 	bl	8006ed2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068d6:	2b40      	cmp	r3, #64	@ 0x40
 80068d8:	d141      	bne.n	800695e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	3314      	adds	r3, #20
 80068e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80068e8:	e853 3f00 	ldrex	r3, [r3]
 80068ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80068f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80068f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	3314      	adds	r3, #20
 8006902:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006906:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800690a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006912:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006916:	e841 2300 	strex	r3, r2, [r1]
 800691a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800691e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1d9      	bne.n	80068da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800692a:	2b00      	cmp	r3, #0
 800692c:	d013      	beq.n	8006956 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006932:	4a7e      	ldr	r2, [pc, #504]	@ (8006b2c <HAL_UART_IRQHandler+0x3e0>)
 8006934:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800693a:	4618      	mov	r0, r3
 800693c:	f7fb ff4a 	bl	80027d4 <HAL_DMA_Abort_IT>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d016      	beq.n	8006974 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800694a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006950:	4610      	mov	r0, r2
 8006952:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006954:	e00e      	b.n	8006974 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f99e 	bl	8006c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800695c:	e00a      	b.n	8006974 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f99a 	bl	8006c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006964:	e006      	b.n	8006974 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f996 	bl	8006c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006972:	e175      	b.n	8006c60 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006974:	bf00      	nop
    return;
 8006976:	e173      	b.n	8006c60 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800697c:	2b01      	cmp	r3, #1
 800697e:	f040 814f 	bne.w	8006c20 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006986:	f003 0310 	and.w	r3, r3, #16
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 8148 	beq.w	8006c20 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006994:	f003 0310 	and.w	r3, r3, #16
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 8141 	beq.w	8006c20 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800699e:	2300      	movs	r3, #0
 80069a0:	60bb      	str	r3, [r7, #8]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	60bb      	str	r3, [r7, #8]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	60bb      	str	r3, [r7, #8]
 80069b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069be:	2b40      	cmp	r3, #64	@ 0x40
 80069c0:	f040 80b6 	bne.w	8006b30 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 8145 	beq.w	8006c64 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80069de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069e2:	429a      	cmp	r2, r3
 80069e4:	f080 813e 	bcs.w	8006c64 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069fa:	f000 8088 	beq.w	8006b0e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	330c      	adds	r3, #12
 8006a04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006a0c:	e853 3f00 	ldrex	r3, [r3]
 8006a10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006a14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	330c      	adds	r3, #12
 8006a26:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006a2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006a2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a32:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006a36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006a3a:	e841 2300 	strex	r3, r2, [r1]
 8006a3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006a42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1d9      	bne.n	80069fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	3314      	adds	r3, #20
 8006a50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a54:	e853 3f00 	ldrex	r3, [r3]
 8006a58:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006a5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a5c:	f023 0301 	bic.w	r3, r3, #1
 8006a60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3314      	adds	r3, #20
 8006a6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006a6e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006a72:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a74:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006a76:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006a7a:	e841 2300 	strex	r3, r2, [r1]
 8006a7e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006a80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1e1      	bne.n	8006a4a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3314      	adds	r3, #20
 8006a8c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a90:	e853 3f00 	ldrex	r3, [r3]
 8006a94:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006a96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3314      	adds	r3, #20
 8006aa6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006aaa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006aac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ab0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006ab2:	e841 2300 	strex	r3, r2, [r1]
 8006ab6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006ab8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1e3      	bne.n	8006a86 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2220      	movs	r2, #32
 8006ac2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	330c      	adds	r3, #12
 8006ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ad6:	e853 3f00 	ldrex	r3, [r3]
 8006ada:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006adc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ade:	f023 0310 	bic.w	r3, r3, #16
 8006ae2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	330c      	adds	r3, #12
 8006aec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006af0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006af2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006af6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006af8:	e841 2300 	strex	r3, r2, [r1]
 8006afc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006afe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1e3      	bne.n	8006acc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7fb fdf3 	bl	80026f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2202      	movs	r2, #2
 8006b12:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	4619      	mov	r1, r3
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 f8c1 	bl	8006cac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b2a:	e09b      	b.n	8006c64 <HAL_UART_IRQHandler+0x518>
 8006b2c:	08006f99 	.word	0x08006f99
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	1ad3      	subs	r3, r2, r3
 8006b3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 808e 	beq.w	8006c68 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006b4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f000 8089 	beq.w	8006c68 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	330c      	adds	r3, #12
 8006b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b60:	e853 3f00 	ldrex	r3, [r3]
 8006b64:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	330c      	adds	r3, #12
 8006b76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006b7a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b7c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b82:	e841 2300 	strex	r3, r2, [r1]
 8006b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1e3      	bne.n	8006b56 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	3314      	adds	r3, #20
 8006b94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b98:	e853 3f00 	ldrex	r3, [r3]
 8006b9c:	623b      	str	r3, [r7, #32]
   return(result);
 8006b9e:	6a3b      	ldr	r3, [r7, #32]
 8006ba0:	f023 0301 	bic.w	r3, r3, #1
 8006ba4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3314      	adds	r3, #20
 8006bae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006bb2:	633a      	str	r2, [r7, #48]	@ 0x30
 8006bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bba:	e841 2300 	strex	r3, r2, [r1]
 8006bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1e3      	bne.n	8006b8e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	330c      	adds	r3, #12
 8006bda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	e853 3f00 	ldrex	r3, [r3]
 8006be2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f023 0310 	bic.w	r3, r3, #16
 8006bea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	330c      	adds	r3, #12
 8006bf4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006bf8:	61fa      	str	r2, [r7, #28]
 8006bfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfc:	69b9      	ldr	r1, [r7, #24]
 8006bfe:	69fa      	ldr	r2, [r7, #28]
 8006c00:	e841 2300 	strex	r3, r2, [r1]
 8006c04:	617b      	str	r3, [r7, #20]
   return(result);
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1e3      	bne.n	8006bd4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c16:	4619      	mov	r1, r3
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f847 	bl	8006cac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c1e:	e023      	b.n	8006c68 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d009      	beq.n	8006c40 <HAL_UART_IRQHandler+0x4f4>
 8006c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d003      	beq.n	8006c40 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 f9c1 	bl	8006fc0 <UART_Transmit_IT>
    return;
 8006c3e:	e014      	b.n	8006c6a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00e      	beq.n	8006c6a <HAL_UART_IRQHandler+0x51e>
 8006c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d008      	beq.n	8006c6a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 fa01 	bl	8007060 <UART_EndTransmit_IT>
    return;
 8006c5e:	e004      	b.n	8006c6a <HAL_UART_IRQHandler+0x51e>
    return;
 8006c60:	bf00      	nop
 8006c62:	e002      	b.n	8006c6a <HAL_UART_IRQHandler+0x51e>
      return;
 8006c64:	bf00      	nop
 8006c66:	e000      	b.n	8006c6a <HAL_UART_IRQHandler+0x51e>
      return;
 8006c68:	bf00      	nop
  }
}
 8006c6a:	37e8      	adds	r7, #232	@ 0xe8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c78:	bf00      	nop
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b090      	sub	sp, #64	@ 0x40
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d137      	bne.n	8006d50 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	3314      	adds	r3, #20
 8006cec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf0:	e853 3f00 	ldrex	r3, [r3]
 8006cf4:	623b      	str	r3, [r7, #32]
   return(result);
 8006cf6:	6a3b      	ldr	r3, [r7, #32]
 8006cf8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	3314      	adds	r3, #20
 8006d04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d06:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d0e:	e841 2300 	strex	r3, r2, [r1]
 8006d12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1e5      	bne.n	8006ce6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	330c      	adds	r3, #12
 8006d20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	e853 3f00 	ldrex	r3, [r3]
 8006d28:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d30:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	330c      	adds	r3, #12
 8006d38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d3a:	61fa      	str	r2, [r7, #28]
 8006d3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3e:	69b9      	ldr	r1, [r7, #24]
 8006d40:	69fa      	ldr	r2, [r7, #28]
 8006d42:	e841 2300 	strex	r3, r2, [r1]
 8006d46:	617b      	str	r3, [r7, #20]
   return(result);
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1e5      	bne.n	8006d1a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d4e:	e002      	b.n	8006d56 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006d50:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006d52:	f7ff ff8d 	bl	8006c70 <HAL_UART_TxCpltCallback>
}
 8006d56:	bf00      	nop
 8006d58:	3740      	adds	r7, #64	@ 0x40
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b084      	sub	sp, #16
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d6a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f7ff ff89 	bl	8006c84 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d72:	bf00      	nop
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b084      	sub	sp, #16
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006d82:	2300      	movs	r3, #0
 8006d84:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d8a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d96:	2b80      	cmp	r3, #128	@ 0x80
 8006d98:	bf0c      	ite	eq
 8006d9a:	2301      	moveq	r3, #1
 8006d9c:	2300      	movne	r3, #0
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b21      	cmp	r3, #33	@ 0x21
 8006dac:	d108      	bne.n	8006dc0 <UART_DMAError+0x46>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d005      	beq.n	8006dc0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	2200      	movs	r2, #0
 8006db8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006dba:	68b8      	ldr	r0, [r7, #8]
 8006dbc:	f000 f861 	bl	8006e82 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dca:	2b40      	cmp	r3, #64	@ 0x40
 8006dcc:	bf0c      	ite	eq
 8006dce:	2301      	moveq	r3, #1
 8006dd0:	2300      	movne	r3, #0
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b22      	cmp	r3, #34	@ 0x22
 8006de0:	d108      	bne.n	8006df4 <UART_DMAError+0x7a>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d005      	beq.n	8006df4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	2200      	movs	r2, #0
 8006dec:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006dee:	68b8      	ldr	r0, [r7, #8]
 8006df0:	f000 f86f 	bl	8006ed2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006df8:	f043 0210 	orr.w	r2, r3, #16
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e00:	68b8      	ldr	r0, [r7, #8]
 8006e02:	f7ff ff49 	bl	8006c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e06:	bf00      	nop
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b085      	sub	sp, #20
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	60f8      	str	r0, [r7, #12]
 8006e16:	60b9      	str	r1, [r7, #8]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	88fa      	ldrh	r2, [r7, #6]
 8006e26:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	88fa      	ldrh	r2, [r7, #6]
 8006e2c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2222      	movs	r2, #34	@ 0x22
 8006e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d007      	beq.n	8006e54 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68da      	ldr	r2, [r3, #12]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e52:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	695a      	ldr	r2, [r3, #20]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f042 0201 	orr.w	r2, r2, #1
 8006e62:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68da      	ldr	r2, [r3, #12]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f042 0220 	orr.w	r2, r2, #32
 8006e72:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3714      	adds	r7, #20
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b089      	sub	sp, #36	@ 0x24
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	330c      	adds	r3, #12
 8006e90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	e853 3f00 	ldrex	r3, [r3]
 8006e98:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006ea0:	61fb      	str	r3, [r7, #28]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	330c      	adds	r3, #12
 8006ea8:	69fa      	ldr	r2, [r7, #28]
 8006eaa:	61ba      	str	r2, [r7, #24]
 8006eac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eae:	6979      	ldr	r1, [r7, #20]
 8006eb0:	69ba      	ldr	r2, [r7, #24]
 8006eb2:	e841 2300 	strex	r3, r2, [r1]
 8006eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1e5      	bne.n	8006e8a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2220      	movs	r2, #32
 8006ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006ec6:	bf00      	nop
 8006ec8:	3724      	adds	r7, #36	@ 0x24
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b095      	sub	sp, #84	@ 0x54
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	330c      	adds	r3, #12
 8006ee0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee4:	e853 3f00 	ldrex	r3, [r3]
 8006ee8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ef0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	330c      	adds	r3, #12
 8006ef8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006efa:	643a      	str	r2, [r7, #64]	@ 0x40
 8006efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f02:	e841 2300 	strex	r3, r2, [r1]
 8006f06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1e5      	bne.n	8006eda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	3314      	adds	r3, #20
 8006f14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f16:	6a3b      	ldr	r3, [r7, #32]
 8006f18:	e853 3f00 	ldrex	r3, [r3]
 8006f1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	f023 0301 	bic.w	r3, r3, #1
 8006f24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	3314      	adds	r3, #20
 8006f2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f36:	e841 2300 	strex	r3, r2, [r1]
 8006f3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1e5      	bne.n	8006f0e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d119      	bne.n	8006f7e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	330c      	adds	r3, #12
 8006f50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	e853 3f00 	ldrex	r3, [r3]
 8006f58:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	f023 0310 	bic.w	r3, r3, #16
 8006f60:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	330c      	adds	r3, #12
 8006f68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f6a:	61ba      	str	r2, [r7, #24]
 8006f6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6e:	6979      	ldr	r1, [r7, #20]
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	e841 2300 	strex	r3, r2, [r1]
 8006f76:	613b      	str	r3, [r7, #16]
   return(result);
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1e5      	bne.n	8006f4a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2220      	movs	r2, #32
 8006f82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006f8c:	bf00      	nop
 8006f8e:	3754      	adds	r7, #84	@ 0x54
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f7ff fe70 	bl	8006c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fb8:	bf00      	nop
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	2b21      	cmp	r3, #33	@ 0x21
 8006fd2:	d13e      	bne.n	8007052 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fdc:	d114      	bne.n	8007008 <UART_Transmit_IT+0x48>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d110      	bne.n	8007008 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	881b      	ldrh	r3, [r3, #0]
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ffa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a1b      	ldr	r3, [r3, #32]
 8007000:	1c9a      	adds	r2, r3, #2
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	621a      	str	r2, [r3, #32]
 8007006:	e008      	b.n	800701a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a1b      	ldr	r3, [r3, #32]
 800700c:	1c59      	adds	r1, r3, #1
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	6211      	str	r1, [r2, #32]
 8007012:	781a      	ldrb	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800701e:	b29b      	uxth	r3, r3
 8007020:	3b01      	subs	r3, #1
 8007022:	b29b      	uxth	r3, r3
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	4619      	mov	r1, r3
 8007028:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10f      	bne.n	800704e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68da      	ldr	r2, [r3, #12]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800703c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68da      	ldr	r2, [r3, #12]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800704c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800704e:	2300      	movs	r3, #0
 8007050:	e000      	b.n	8007054 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007052:	2302      	movs	r3, #2
  }
}
 8007054:	4618      	mov	r0, r3
 8007056:	3714      	adds	r7, #20
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68da      	ldr	r2, [r3, #12]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007076:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2220      	movs	r2, #32
 800707c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f7ff fdf5 	bl	8006c70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b08c      	sub	sp, #48	@ 0x30
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	2b22      	cmp	r3, #34	@ 0x22
 80070a2:	f040 80ae 	bne.w	8007202 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070ae:	d117      	bne.n	80070e0 <UART_Receive_IT+0x50>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d113      	bne.n	80070e0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80070b8:	2300      	movs	r3, #0
 80070ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d8:	1c9a      	adds	r2, r3, #2
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80070de:	e026      	b.n	800712e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80070e6:	2300      	movs	r3, #0
 80070e8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070f2:	d007      	beq.n	8007104 <UART_Receive_IT+0x74>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10a      	bne.n	8007112 <UART_Receive_IT+0x82>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d106      	bne.n	8007112 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	b2da      	uxtb	r2, r3
 800710c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800710e:	701a      	strb	r2, [r3, #0]
 8007110:	e008      	b.n	8007124 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	b2db      	uxtb	r3, r3
 800711a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800711e:	b2da      	uxtb	r2, r3
 8007120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007122:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007128:	1c5a      	adds	r2, r3, #1
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007132:	b29b      	uxth	r3, r3
 8007134:	3b01      	subs	r3, #1
 8007136:	b29b      	uxth	r3, r3
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	4619      	mov	r1, r3
 800713c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800713e:	2b00      	cmp	r3, #0
 8007140:	d15d      	bne.n	80071fe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68da      	ldr	r2, [r3, #12]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f022 0220 	bic.w	r2, r2, #32
 8007150:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68da      	ldr	r2, [r3, #12]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007160:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	695a      	ldr	r2, [r3, #20]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f022 0201 	bic.w	r2, r2, #1
 8007170:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2220      	movs	r2, #32
 8007176:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007184:	2b01      	cmp	r3, #1
 8007186:	d135      	bne.n	80071f4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	330c      	adds	r3, #12
 8007194:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	e853 3f00 	ldrex	r3, [r3]
 800719c:	613b      	str	r3, [r7, #16]
   return(result);
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	f023 0310 	bic.w	r3, r3, #16
 80071a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	330c      	adds	r3, #12
 80071ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071ae:	623a      	str	r2, [r7, #32]
 80071b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b2:	69f9      	ldr	r1, [r7, #28]
 80071b4:	6a3a      	ldr	r2, [r7, #32]
 80071b6:	e841 2300 	strex	r3, r2, [r1]
 80071ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1e5      	bne.n	800718e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 0310 	and.w	r3, r3, #16
 80071cc:	2b10      	cmp	r3, #16
 80071ce:	d10a      	bne.n	80071e6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071d0:	2300      	movs	r3, #0
 80071d2:	60fb      	str	r3, [r7, #12]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80071ea:	4619      	mov	r1, r3
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f7ff fd5d 	bl	8006cac <HAL_UARTEx_RxEventCallback>
 80071f2:	e002      	b.n	80071fa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7f9 ff61 	bl	80010bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80071fa:	2300      	movs	r3, #0
 80071fc:	e002      	b.n	8007204 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80071fe:	2300      	movs	r3, #0
 8007200:	e000      	b.n	8007204 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007202:	2302      	movs	r3, #2
  }
}
 8007204:	4618      	mov	r0, r3
 8007206:	3730      	adds	r7, #48	@ 0x30
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800720c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007210:	b0c0      	sub	sp, #256	@ 0x100
 8007212:	af00      	add	r7, sp, #0
 8007214:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007228:	68d9      	ldr	r1, [r3, #12]
 800722a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	ea40 0301 	orr.w	r3, r0, r1
 8007234:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800723a:	689a      	ldr	r2, [r3, #8]
 800723c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	431a      	orrs	r2, r3
 8007244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	431a      	orrs	r2, r3
 800724c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007250:	69db      	ldr	r3, [r3, #28]
 8007252:	4313      	orrs	r3, r2
 8007254:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007264:	f021 010c 	bic.w	r1, r1, #12
 8007268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007272:	430b      	orrs	r3, r1
 8007274:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007286:	6999      	ldr	r1, [r3, #24]
 8007288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	ea40 0301 	orr.w	r3, r0, r1
 8007292:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	4b8f      	ldr	r3, [pc, #572]	@ (80074d8 <UART_SetConfig+0x2cc>)
 800729c:	429a      	cmp	r2, r3
 800729e:	d005      	beq.n	80072ac <UART_SetConfig+0xa0>
 80072a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	4b8d      	ldr	r3, [pc, #564]	@ (80074dc <UART_SetConfig+0x2d0>)
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d104      	bne.n	80072b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80072ac:	f7fe fcec 	bl	8005c88 <HAL_RCC_GetPCLK2Freq>
 80072b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80072b4:	e003      	b.n	80072be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072b6:	f7fe fcd3 	bl	8005c60 <HAL_RCC_GetPCLK1Freq>
 80072ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072c2:	69db      	ldr	r3, [r3, #28]
 80072c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072c8:	f040 810c 	bne.w	80074e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072d0:	2200      	movs	r2, #0
 80072d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80072d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80072da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80072de:	4622      	mov	r2, r4
 80072e0:	462b      	mov	r3, r5
 80072e2:	1891      	adds	r1, r2, r2
 80072e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80072e6:	415b      	adcs	r3, r3
 80072e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80072ee:	4621      	mov	r1, r4
 80072f0:	eb12 0801 	adds.w	r8, r2, r1
 80072f4:	4629      	mov	r1, r5
 80072f6:	eb43 0901 	adc.w	r9, r3, r1
 80072fa:	f04f 0200 	mov.w	r2, #0
 80072fe:	f04f 0300 	mov.w	r3, #0
 8007302:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007306:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800730a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800730e:	4690      	mov	r8, r2
 8007310:	4699      	mov	r9, r3
 8007312:	4623      	mov	r3, r4
 8007314:	eb18 0303 	adds.w	r3, r8, r3
 8007318:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800731c:	462b      	mov	r3, r5
 800731e:	eb49 0303 	adc.w	r3, r9, r3
 8007322:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007332:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007336:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800733a:	460b      	mov	r3, r1
 800733c:	18db      	adds	r3, r3, r3
 800733e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007340:	4613      	mov	r3, r2
 8007342:	eb42 0303 	adc.w	r3, r2, r3
 8007346:	657b      	str	r3, [r7, #84]	@ 0x54
 8007348:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800734c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007350:	f7f8 ff42 	bl	80001d8 <__aeabi_uldivmod>
 8007354:	4602      	mov	r2, r0
 8007356:	460b      	mov	r3, r1
 8007358:	4b61      	ldr	r3, [pc, #388]	@ (80074e0 <UART_SetConfig+0x2d4>)
 800735a:	fba3 2302 	umull	r2, r3, r3, r2
 800735e:	095b      	lsrs	r3, r3, #5
 8007360:	011c      	lsls	r4, r3, #4
 8007362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007366:	2200      	movs	r2, #0
 8007368:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800736c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007370:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007374:	4642      	mov	r2, r8
 8007376:	464b      	mov	r3, r9
 8007378:	1891      	adds	r1, r2, r2
 800737a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800737c:	415b      	adcs	r3, r3
 800737e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007380:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007384:	4641      	mov	r1, r8
 8007386:	eb12 0a01 	adds.w	sl, r2, r1
 800738a:	4649      	mov	r1, r9
 800738c:	eb43 0b01 	adc.w	fp, r3, r1
 8007390:	f04f 0200 	mov.w	r2, #0
 8007394:	f04f 0300 	mov.w	r3, #0
 8007398:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800739c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80073a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073a4:	4692      	mov	sl, r2
 80073a6:	469b      	mov	fp, r3
 80073a8:	4643      	mov	r3, r8
 80073aa:	eb1a 0303 	adds.w	r3, sl, r3
 80073ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073b2:	464b      	mov	r3, r9
 80073b4:	eb4b 0303 	adc.w	r3, fp, r3
 80073b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80073bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80073c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80073cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80073d0:	460b      	mov	r3, r1
 80073d2:	18db      	adds	r3, r3, r3
 80073d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80073d6:	4613      	mov	r3, r2
 80073d8:	eb42 0303 	adc.w	r3, r2, r3
 80073dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80073de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80073e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80073e6:	f7f8 fef7 	bl	80001d8 <__aeabi_uldivmod>
 80073ea:	4602      	mov	r2, r0
 80073ec:	460b      	mov	r3, r1
 80073ee:	4611      	mov	r1, r2
 80073f0:	4b3b      	ldr	r3, [pc, #236]	@ (80074e0 <UART_SetConfig+0x2d4>)
 80073f2:	fba3 2301 	umull	r2, r3, r3, r1
 80073f6:	095b      	lsrs	r3, r3, #5
 80073f8:	2264      	movs	r2, #100	@ 0x64
 80073fa:	fb02 f303 	mul.w	r3, r2, r3
 80073fe:	1acb      	subs	r3, r1, r3
 8007400:	00db      	lsls	r3, r3, #3
 8007402:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007406:	4b36      	ldr	r3, [pc, #216]	@ (80074e0 <UART_SetConfig+0x2d4>)
 8007408:	fba3 2302 	umull	r2, r3, r3, r2
 800740c:	095b      	lsrs	r3, r3, #5
 800740e:	005b      	lsls	r3, r3, #1
 8007410:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007414:	441c      	add	r4, r3
 8007416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800741a:	2200      	movs	r2, #0
 800741c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007420:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007424:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007428:	4642      	mov	r2, r8
 800742a:	464b      	mov	r3, r9
 800742c:	1891      	adds	r1, r2, r2
 800742e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007430:	415b      	adcs	r3, r3
 8007432:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007434:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007438:	4641      	mov	r1, r8
 800743a:	1851      	adds	r1, r2, r1
 800743c:	6339      	str	r1, [r7, #48]	@ 0x30
 800743e:	4649      	mov	r1, r9
 8007440:	414b      	adcs	r3, r1
 8007442:	637b      	str	r3, [r7, #52]	@ 0x34
 8007444:	f04f 0200 	mov.w	r2, #0
 8007448:	f04f 0300 	mov.w	r3, #0
 800744c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007450:	4659      	mov	r1, fp
 8007452:	00cb      	lsls	r3, r1, #3
 8007454:	4651      	mov	r1, sl
 8007456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800745a:	4651      	mov	r1, sl
 800745c:	00ca      	lsls	r2, r1, #3
 800745e:	4610      	mov	r0, r2
 8007460:	4619      	mov	r1, r3
 8007462:	4603      	mov	r3, r0
 8007464:	4642      	mov	r2, r8
 8007466:	189b      	adds	r3, r3, r2
 8007468:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800746c:	464b      	mov	r3, r9
 800746e:	460a      	mov	r2, r1
 8007470:	eb42 0303 	adc.w	r3, r2, r3
 8007474:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007484:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007488:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800748c:	460b      	mov	r3, r1
 800748e:	18db      	adds	r3, r3, r3
 8007490:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007492:	4613      	mov	r3, r2
 8007494:	eb42 0303 	adc.w	r3, r2, r3
 8007498:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800749a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800749e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80074a2:	f7f8 fe99 	bl	80001d8 <__aeabi_uldivmod>
 80074a6:	4602      	mov	r2, r0
 80074a8:	460b      	mov	r3, r1
 80074aa:	4b0d      	ldr	r3, [pc, #52]	@ (80074e0 <UART_SetConfig+0x2d4>)
 80074ac:	fba3 1302 	umull	r1, r3, r3, r2
 80074b0:	095b      	lsrs	r3, r3, #5
 80074b2:	2164      	movs	r1, #100	@ 0x64
 80074b4:	fb01 f303 	mul.w	r3, r1, r3
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	00db      	lsls	r3, r3, #3
 80074bc:	3332      	adds	r3, #50	@ 0x32
 80074be:	4a08      	ldr	r2, [pc, #32]	@ (80074e0 <UART_SetConfig+0x2d4>)
 80074c0:	fba2 2303 	umull	r2, r3, r2, r3
 80074c4:	095b      	lsrs	r3, r3, #5
 80074c6:	f003 0207 	and.w	r2, r3, #7
 80074ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4422      	add	r2, r4
 80074d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80074d4:	e106      	b.n	80076e4 <UART_SetConfig+0x4d8>
 80074d6:	bf00      	nop
 80074d8:	40011000 	.word	0x40011000
 80074dc:	40011400 	.word	0x40011400
 80074e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074e8:	2200      	movs	r2, #0
 80074ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80074ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80074f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80074f6:	4642      	mov	r2, r8
 80074f8:	464b      	mov	r3, r9
 80074fa:	1891      	adds	r1, r2, r2
 80074fc:	6239      	str	r1, [r7, #32]
 80074fe:	415b      	adcs	r3, r3
 8007500:	627b      	str	r3, [r7, #36]	@ 0x24
 8007502:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007506:	4641      	mov	r1, r8
 8007508:	1854      	adds	r4, r2, r1
 800750a:	4649      	mov	r1, r9
 800750c:	eb43 0501 	adc.w	r5, r3, r1
 8007510:	f04f 0200 	mov.w	r2, #0
 8007514:	f04f 0300 	mov.w	r3, #0
 8007518:	00eb      	lsls	r3, r5, #3
 800751a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800751e:	00e2      	lsls	r2, r4, #3
 8007520:	4614      	mov	r4, r2
 8007522:	461d      	mov	r5, r3
 8007524:	4643      	mov	r3, r8
 8007526:	18e3      	adds	r3, r4, r3
 8007528:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800752c:	464b      	mov	r3, r9
 800752e:	eb45 0303 	adc.w	r3, r5, r3
 8007532:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007542:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007546:	f04f 0200 	mov.w	r2, #0
 800754a:	f04f 0300 	mov.w	r3, #0
 800754e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007552:	4629      	mov	r1, r5
 8007554:	008b      	lsls	r3, r1, #2
 8007556:	4621      	mov	r1, r4
 8007558:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800755c:	4621      	mov	r1, r4
 800755e:	008a      	lsls	r2, r1, #2
 8007560:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007564:	f7f8 fe38 	bl	80001d8 <__aeabi_uldivmod>
 8007568:	4602      	mov	r2, r0
 800756a:	460b      	mov	r3, r1
 800756c:	4b60      	ldr	r3, [pc, #384]	@ (80076f0 <UART_SetConfig+0x4e4>)
 800756e:	fba3 2302 	umull	r2, r3, r3, r2
 8007572:	095b      	lsrs	r3, r3, #5
 8007574:	011c      	lsls	r4, r3, #4
 8007576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800757a:	2200      	movs	r2, #0
 800757c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007580:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007584:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007588:	4642      	mov	r2, r8
 800758a:	464b      	mov	r3, r9
 800758c:	1891      	adds	r1, r2, r2
 800758e:	61b9      	str	r1, [r7, #24]
 8007590:	415b      	adcs	r3, r3
 8007592:	61fb      	str	r3, [r7, #28]
 8007594:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007598:	4641      	mov	r1, r8
 800759a:	1851      	adds	r1, r2, r1
 800759c:	6139      	str	r1, [r7, #16]
 800759e:	4649      	mov	r1, r9
 80075a0:	414b      	adcs	r3, r1
 80075a2:	617b      	str	r3, [r7, #20]
 80075a4:	f04f 0200 	mov.w	r2, #0
 80075a8:	f04f 0300 	mov.w	r3, #0
 80075ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075b0:	4659      	mov	r1, fp
 80075b2:	00cb      	lsls	r3, r1, #3
 80075b4:	4651      	mov	r1, sl
 80075b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075ba:	4651      	mov	r1, sl
 80075bc:	00ca      	lsls	r2, r1, #3
 80075be:	4610      	mov	r0, r2
 80075c0:	4619      	mov	r1, r3
 80075c2:	4603      	mov	r3, r0
 80075c4:	4642      	mov	r2, r8
 80075c6:	189b      	adds	r3, r3, r2
 80075c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80075cc:	464b      	mov	r3, r9
 80075ce:	460a      	mov	r2, r1
 80075d0:	eb42 0303 	adc.w	r3, r2, r3
 80075d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80075d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80075e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80075e4:	f04f 0200 	mov.w	r2, #0
 80075e8:	f04f 0300 	mov.w	r3, #0
 80075ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80075f0:	4649      	mov	r1, r9
 80075f2:	008b      	lsls	r3, r1, #2
 80075f4:	4641      	mov	r1, r8
 80075f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075fa:	4641      	mov	r1, r8
 80075fc:	008a      	lsls	r2, r1, #2
 80075fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007602:	f7f8 fde9 	bl	80001d8 <__aeabi_uldivmod>
 8007606:	4602      	mov	r2, r0
 8007608:	460b      	mov	r3, r1
 800760a:	4611      	mov	r1, r2
 800760c:	4b38      	ldr	r3, [pc, #224]	@ (80076f0 <UART_SetConfig+0x4e4>)
 800760e:	fba3 2301 	umull	r2, r3, r3, r1
 8007612:	095b      	lsrs	r3, r3, #5
 8007614:	2264      	movs	r2, #100	@ 0x64
 8007616:	fb02 f303 	mul.w	r3, r2, r3
 800761a:	1acb      	subs	r3, r1, r3
 800761c:	011b      	lsls	r3, r3, #4
 800761e:	3332      	adds	r3, #50	@ 0x32
 8007620:	4a33      	ldr	r2, [pc, #204]	@ (80076f0 <UART_SetConfig+0x4e4>)
 8007622:	fba2 2303 	umull	r2, r3, r2, r3
 8007626:	095b      	lsrs	r3, r3, #5
 8007628:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800762c:	441c      	add	r4, r3
 800762e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007632:	2200      	movs	r2, #0
 8007634:	673b      	str	r3, [r7, #112]	@ 0x70
 8007636:	677a      	str	r2, [r7, #116]	@ 0x74
 8007638:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800763c:	4642      	mov	r2, r8
 800763e:	464b      	mov	r3, r9
 8007640:	1891      	adds	r1, r2, r2
 8007642:	60b9      	str	r1, [r7, #8]
 8007644:	415b      	adcs	r3, r3
 8007646:	60fb      	str	r3, [r7, #12]
 8007648:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800764c:	4641      	mov	r1, r8
 800764e:	1851      	adds	r1, r2, r1
 8007650:	6039      	str	r1, [r7, #0]
 8007652:	4649      	mov	r1, r9
 8007654:	414b      	adcs	r3, r1
 8007656:	607b      	str	r3, [r7, #4]
 8007658:	f04f 0200 	mov.w	r2, #0
 800765c:	f04f 0300 	mov.w	r3, #0
 8007660:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007664:	4659      	mov	r1, fp
 8007666:	00cb      	lsls	r3, r1, #3
 8007668:	4651      	mov	r1, sl
 800766a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800766e:	4651      	mov	r1, sl
 8007670:	00ca      	lsls	r2, r1, #3
 8007672:	4610      	mov	r0, r2
 8007674:	4619      	mov	r1, r3
 8007676:	4603      	mov	r3, r0
 8007678:	4642      	mov	r2, r8
 800767a:	189b      	adds	r3, r3, r2
 800767c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800767e:	464b      	mov	r3, r9
 8007680:	460a      	mov	r2, r1
 8007682:	eb42 0303 	adc.w	r3, r2, r3
 8007686:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	663b      	str	r3, [r7, #96]	@ 0x60
 8007692:	667a      	str	r2, [r7, #100]	@ 0x64
 8007694:	f04f 0200 	mov.w	r2, #0
 8007698:	f04f 0300 	mov.w	r3, #0
 800769c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80076a0:	4649      	mov	r1, r9
 80076a2:	008b      	lsls	r3, r1, #2
 80076a4:	4641      	mov	r1, r8
 80076a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076aa:	4641      	mov	r1, r8
 80076ac:	008a      	lsls	r2, r1, #2
 80076ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80076b2:	f7f8 fd91 	bl	80001d8 <__aeabi_uldivmod>
 80076b6:	4602      	mov	r2, r0
 80076b8:	460b      	mov	r3, r1
 80076ba:	4b0d      	ldr	r3, [pc, #52]	@ (80076f0 <UART_SetConfig+0x4e4>)
 80076bc:	fba3 1302 	umull	r1, r3, r3, r2
 80076c0:	095b      	lsrs	r3, r3, #5
 80076c2:	2164      	movs	r1, #100	@ 0x64
 80076c4:	fb01 f303 	mul.w	r3, r1, r3
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	011b      	lsls	r3, r3, #4
 80076cc:	3332      	adds	r3, #50	@ 0x32
 80076ce:	4a08      	ldr	r2, [pc, #32]	@ (80076f0 <UART_SetConfig+0x4e4>)
 80076d0:	fba2 2303 	umull	r2, r3, r2, r3
 80076d4:	095b      	lsrs	r3, r3, #5
 80076d6:	f003 020f 	and.w	r2, r3, #15
 80076da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4422      	add	r2, r4
 80076e2:	609a      	str	r2, [r3, #8]
}
 80076e4:	bf00      	nop
 80076e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80076ea:	46bd      	mov	sp, r7
 80076ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076f0:	51eb851f 	.word	0x51eb851f

080076f4 <memset>:
 80076f4:	4402      	add	r2, r0
 80076f6:	4603      	mov	r3, r0
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d100      	bne.n	80076fe <memset+0xa>
 80076fc:	4770      	bx	lr
 80076fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007702:	e7f9      	b.n	80076f8 <memset+0x4>

08007704 <__libc_init_array>:
 8007704:	b570      	push	{r4, r5, r6, lr}
 8007706:	4d0d      	ldr	r5, [pc, #52]	@ (800773c <__libc_init_array+0x38>)
 8007708:	4c0d      	ldr	r4, [pc, #52]	@ (8007740 <__libc_init_array+0x3c>)
 800770a:	1b64      	subs	r4, r4, r5
 800770c:	10a4      	asrs	r4, r4, #2
 800770e:	2600      	movs	r6, #0
 8007710:	42a6      	cmp	r6, r4
 8007712:	d109      	bne.n	8007728 <__libc_init_array+0x24>
 8007714:	4d0b      	ldr	r5, [pc, #44]	@ (8007744 <__libc_init_array+0x40>)
 8007716:	4c0c      	ldr	r4, [pc, #48]	@ (8007748 <__libc_init_array+0x44>)
 8007718:	f000 f826 	bl	8007768 <_init>
 800771c:	1b64      	subs	r4, r4, r5
 800771e:	10a4      	asrs	r4, r4, #2
 8007720:	2600      	movs	r6, #0
 8007722:	42a6      	cmp	r6, r4
 8007724:	d105      	bne.n	8007732 <__libc_init_array+0x2e>
 8007726:	bd70      	pop	{r4, r5, r6, pc}
 8007728:	f855 3b04 	ldr.w	r3, [r5], #4
 800772c:	4798      	blx	r3
 800772e:	3601      	adds	r6, #1
 8007730:	e7ee      	b.n	8007710 <__libc_init_array+0xc>
 8007732:	f855 3b04 	ldr.w	r3, [r5], #4
 8007736:	4798      	blx	r3
 8007738:	3601      	adds	r6, #1
 800773a:	e7f2      	b.n	8007722 <__libc_init_array+0x1e>
 800773c:	080077b0 	.word	0x080077b0
 8007740:	080077b0 	.word	0x080077b0
 8007744:	080077b0 	.word	0x080077b0
 8007748:	080077b4 	.word	0x080077b4

0800774c <memcpy>:
 800774c:	440a      	add	r2, r1
 800774e:	4291      	cmp	r1, r2
 8007750:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007754:	d100      	bne.n	8007758 <memcpy+0xc>
 8007756:	4770      	bx	lr
 8007758:	b510      	push	{r4, lr}
 800775a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800775e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007762:	4291      	cmp	r1, r2
 8007764:	d1f9      	bne.n	800775a <memcpy+0xe>
 8007766:	bd10      	pop	{r4, pc}

08007768 <_init>:
 8007768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800776a:	bf00      	nop
 800776c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800776e:	bc08      	pop	{r3}
 8007770:	469e      	mov	lr, r3
 8007772:	4770      	bx	lr

08007774 <_fini>:
 8007774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007776:	bf00      	nop
 8007778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800777a:	bc08      	pop	{r3}
 800777c:	469e      	mov	lr, r3
 800777e:	4770      	bx	lr
