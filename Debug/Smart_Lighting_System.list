
Smart_Lighting_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057d0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005968  08005968  00006968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005980  08005980  00007020  2**0
                  CONTENTS
  4 .ARM          00000008  08005980  08005980  00006980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005988  08005988  00007020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005988  08005988  00006988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800598c  0800598c  0000698c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08005990  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000020  080059b0  00007020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  080059b0  000071d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd0e  00000000  00000000  00007050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028f0  00000000  00000000  00016d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00019650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c57  00000000  00000000  0001a648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018394  00000000  00000000  0001b29f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014d86  00000000  00000000  00033633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aa47  00000000  00000000  000483b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2e00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004154  00000000  00000000  000e2e44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000e6f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000020 	.word	0x20000020
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005950 	.word	0x08005950

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000024 	.word	0x20000024
 80001d4:	08005950 	.word	0x08005950

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_GPIO_EXTI_Callback>:
/**
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == PANIC_BUTTON_PIN) {
 80004d2:	88fb      	ldrh	r3, [r7, #6]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d101      	bne.n	80004dc <HAL_GPIO_EXTI_Callback+0x14>
		panic_button_set();
 80004d8:	f000 ff1e 	bl	8001318 <panic_button_set>
	}
	if(GPIO_Pin == MOVEMENT_SENSOR_PIN) {
 80004dc:	88fb      	ldrh	r3, [r7, #6]
 80004de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80004e2:	d101      	bne.n	80004e8 <HAL_GPIO_EXTI_Callback+0x20>
		sensors_movement_detected();
 80004e4:	f001 f808 	bl	80014f8 <sensors_movement_detected>
	}
}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <HAL_TIM_PeriodElapsedCallback>:
/*
 * @brief This function is the callback triggered when timer elapsed interrupt is managed
 * Inside this function the panic_timer_elapsed variable is set to 1 to request the interrupt management
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) {
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a0e      	ldr	r2, [pc, #56]	@ (8000538 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d101      	bne.n	8000506 <HAL_TIM_PeriodElapsedCallback+0x16>
		panic_timer_elapsed();
 8000502:	f000 ffb1 	bl	8001468 <panic_timer_elapsed>
	}
	if(htim->Instance == TIM9) {
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a0c      	ldr	r2, [pc, #48]	@ (800053c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d107      	bne.n	8000520 <HAL_TIM_PeriodElapsedCallback+0x30>
		light_level_check();
 8000510:	f000 fd98 	bl	8001044 <light_level_check>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000514:	2201      	movs	r2, #1
 8000516:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800051a:	4809      	ldr	r0, [pc, #36]	@ (8000540 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800051c:	f001 ff3a 	bl	8002394 <HAL_GPIO_WritePin>
	}
	if(htim->Instance == TIM4) {
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	@ (8000544 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d101      	bne.n	800052e <HAL_TIM_PeriodElapsedCallback+0x3e>
		sensors_movement_detected_reset();
 800052a:	f000 fffd 	bl	8001528 <sensors_movement_detected_reset>
	}
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40000400 	.word	0x40000400
 800053c:	40014000 	.word	0x40014000
 8000540:	40020c00 	.word	0x40020c00
 8000544:	40000800 	.word	0x40000800

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054c:	f000 fff8 	bl	8001540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000550:	f000 f81e 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000554:	f000 f9da 	bl	800090c <MX_GPIO_Init>
  MX_TIM3_Init();
 8000558:	f000 f902 	bl	8000760 <MX_TIM3_Init>
  MX_ADC1_Init();
 800055c:	f000 f880 	bl	8000660 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000560:	f000 f8d0 	bl	8000704 <MX_I2C1_Init>
  MX_TIM9_Init();
 8000564:	f000 f998 	bl	8000898 <MX_TIM9_Init>
  MX_TIM4_Init();
 8000568:	f000 f948 	bl	80007fc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  light_init();
 800056c:	f000 fcb0 	bl	8000ed0 <light_init>
  light_default_state(10);
 8000570:	200a      	movs	r0, #10
 8000572:	f000 fc7e 	bl	8000e72 <light_default_state>
  HAL_TIM_Base_Start_IT(&htim9);
 8000576:	4805      	ldr	r0, [pc, #20]	@ (800058c <main+0x44>)
 8000578:	f004 fd98 	bl	80050ac <HAL_TIM_Base_Start_IT>
  light_activate();
 800057c:	f000 fd52 	bl	8001024 <light_activate>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	panic_main();
 8000580:	f000 fe8a 	bl	8001298 <panic_main>
	light_main();
 8000584:	f000 fd6a 	bl	800105c <light_main>
	panic_main();
 8000588:	bf00      	nop
 800058a:	e7f9      	b.n	8000580 <main+0x38>
 800058c:	20000168 	.word	0x20000168

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	@ 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	@ 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f005 f99c 	bl	80058dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b27      	ldr	r3, [pc, #156]	@ (8000658 <SystemClock_Config+0xc8>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005bc:	4a26      	ldr	r2, [pc, #152]	@ (8000658 <SystemClock_Config+0xc8>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c4:	4b24      	ldr	r3, [pc, #144]	@ (8000658 <SystemClock_Config+0xc8>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b21      	ldr	r3, [pc, #132]	@ (800065c <SystemClock_Config+0xcc>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a20      	ldr	r2, [pc, #128]	@ (800065c <SystemClock_Config+0xcc>)
 80005da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b1e      	ldr	r3, [pc, #120]	@ (800065c <SystemClock_Config+0xcc>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ec:	2301      	movs	r3, #1
 80005ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000600:	2304      	movs	r3, #4
 8000602:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000604:	23c0      	movs	r3, #192	@ 0xc0
 8000606:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000608:	2304      	movs	r3, #4
 800060a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800060c:	2308      	movs	r3, #8
 800060e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0320 	add.w	r3, r7, #32
 8000614:	4618      	mov	r0, r3
 8000616:	f004 f875 	bl	8004704 <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000620:	f000 fa32 	bl	8000a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000628:	2302      	movs	r3, #2
 800062a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000630:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000634:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	2103      	movs	r1, #3
 8000640:	4618      	mov	r0, r3
 8000642:	f004 fad7 	bl	8004bf4 <HAL_RCC_ClockConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800064c:	f000 fa1c 	bl	8000a88 <Error_Handler>
  }
}
 8000650:	bf00      	nop
 8000652:	3750      	adds	r7, #80	@ 0x50
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000666:	463b      	mov	r3, r7
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000672:	4b21      	ldr	r3, [pc, #132]	@ (80006f8 <MX_ADC1_Init+0x98>)
 8000674:	4a21      	ldr	r2, [pc, #132]	@ (80006fc <MX_ADC1_Init+0x9c>)
 8000676:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000678:	4b1f      	ldr	r3, [pc, #124]	@ (80006f8 <MX_ADC1_Init+0x98>)
 800067a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800067e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000680:	4b1d      	ldr	r3, [pc, #116]	@ (80006f8 <MX_ADC1_Init+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000686:	4b1c      	ldr	r3, [pc, #112]	@ (80006f8 <MX_ADC1_Init+0x98>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800068c:	4b1a      	ldr	r3, [pc, #104]	@ (80006f8 <MX_ADC1_Init+0x98>)
 800068e:	2200      	movs	r2, #0
 8000690:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000692:	4b19      	ldr	r3, [pc, #100]	@ (80006f8 <MX_ADC1_Init+0x98>)
 8000694:	2200      	movs	r2, #0
 8000696:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800069a:	4b17      	ldr	r3, [pc, #92]	@ (80006f8 <MX_ADC1_Init+0x98>)
 800069c:	2200      	movs	r2, #0
 800069e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a0:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <MX_ADC1_Init+0x98>)
 80006a2:	4a17      	ldr	r2, [pc, #92]	@ (8000700 <MX_ADC1_Init+0xa0>)
 80006a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a6:	4b14      	ldr	r3, [pc, #80]	@ (80006f8 <MX_ADC1_Init+0x98>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006ac:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <MX_ADC1_Init+0x98>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006b2:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <MX_ADC1_Init+0x98>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ba:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <MX_ADC1_Init+0x98>)
 80006bc:	2201      	movs	r2, #1
 80006be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c0:	480d      	ldr	r0, [pc, #52]	@ (80006f8 <MX_ADC1_Init+0x98>)
 80006c2:	f000 ffaf 	bl	8001624 <HAL_ADC_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006cc:	f000 f9dc 	bl	8000a88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80006d8:	2307      	movs	r3, #7
 80006da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006dc:	463b      	mov	r3, r7
 80006de:	4619      	mov	r1, r3
 80006e0:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <MX_ADC1_Init+0x98>)
 80006e2:	f001 f963 	bl	80019ac <HAL_ADC_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006ec:	f000 f9cc 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	2000003c 	.word	0x2000003c
 80006fc:	40012000 	.word	0x40012000
 8000700:	0f000001 	.word	0x0f000001

08000704 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000708:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <MX_I2C1_Init+0x50>)
 800070a:	4a13      	ldr	r2, [pc, #76]	@ (8000758 <MX_I2C1_Init+0x54>)
 800070c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800070e:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000710:	4a12      	ldr	r2, [pc, #72]	@ (800075c <MX_I2C1_Init+0x58>)
 8000712:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000714:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <MX_I2C1_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000720:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000722:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000726:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000728:	4b0a      	ldr	r3, [pc, #40]	@ (8000754 <MX_I2C1_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800072e:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000734:	4b07      	ldr	r3, [pc, #28]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800073a:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <MX_I2C1_Init+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000742:	f001 fe59 	bl	80023f8 <HAL_I2C_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800074c:	f000 f99c 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000084 	.word	0x20000084
 8000758:	40005400 	.word	0x40005400
 800075c:	00061a80 	.word	0x00061a80

08000760 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000766:	f107 0308 	add.w	r3, r7, #8
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000774:	463b      	mov	r3, r7
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800077c:	4b1d      	ldr	r3, [pc, #116]	@ (80007f4 <MX_TIM3_Init+0x94>)
 800077e:	4a1e      	ldr	r2, [pc, #120]	@ (80007f8 <MX_TIM3_Init+0x98>)
 8000780:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47999;
 8000782:	4b1c      	ldr	r3, [pc, #112]	@ (80007f4 <MX_TIM3_Init+0x94>)
 8000784:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8000788:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078a:	4b1a      	ldr	r3, [pc, #104]	@ (80007f4 <MX_TIM3_Init+0x94>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000790:	4b18      	ldr	r3, [pc, #96]	@ (80007f4 <MX_TIM3_Init+0x94>)
 8000792:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000796:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000798:	4b16      	ldr	r3, [pc, #88]	@ (80007f4 <MX_TIM3_Init+0x94>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079e:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <MX_TIM3_Init+0x94>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007a4:	4813      	ldr	r0, [pc, #76]	@ (80007f4 <MX_TIM3_Init+0x94>)
 80007a6:	f004 fc31 	bl	800500c <HAL_TIM_Base_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80007b0:	f000 f96a 	bl	8000a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007ba:	f107 0308 	add.w	r3, r7, #8
 80007be:	4619      	mov	r1, r3
 80007c0:	480c      	ldr	r0, [pc, #48]	@ (80007f4 <MX_TIM3_Init+0x94>)
 80007c2:	f004 fdf4 	bl	80053ae <HAL_TIM_ConfigClockSource>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80007cc:	f000 f95c 	bl	8000a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d0:	2300      	movs	r3, #0
 80007d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007d8:	463b      	mov	r3, r7
 80007da:	4619      	mov	r1, r3
 80007dc:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <MX_TIM3_Init+0x94>)
 80007de:	f004 fffb 	bl	80057d8 <HAL_TIMEx_MasterConfigSynchronization>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80007e8:	f000 f94e 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	3718      	adds	r7, #24
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200000d8 	.word	0x200000d8
 80007f8:	40000400 	.word	0x40000400

080007fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000802:	f107 0308 	add.w	r3, r7, #8
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000810:	463b      	mov	r3, r7
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000818:	4b1d      	ldr	r3, [pc, #116]	@ (8000890 <MX_TIM4_Init+0x94>)
 800081a:	4a1e      	ldr	r2, [pc, #120]	@ (8000894 <MX_TIM4_Init+0x98>)
 800081c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47999;
 800081e:	4b1c      	ldr	r3, [pc, #112]	@ (8000890 <MX_TIM4_Init+0x94>)
 8000820:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8000824:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000826:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <MX_TIM4_Init+0x94>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9990;
 800082c:	4b18      	ldr	r3, [pc, #96]	@ (8000890 <MX_TIM4_Init+0x94>)
 800082e:	f242 7206 	movw	r2, #9990	@ 0x2706
 8000832:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000834:	4b16      	ldr	r3, [pc, #88]	@ (8000890 <MX_TIM4_Init+0x94>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083a:	4b15      	ldr	r3, [pc, #84]	@ (8000890 <MX_TIM4_Init+0x94>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000840:	4813      	ldr	r0, [pc, #76]	@ (8000890 <MX_TIM4_Init+0x94>)
 8000842:	f004 fbe3 	bl	800500c <HAL_TIM_Base_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800084c:	f000 f91c 	bl	8000a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000850:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000854:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000856:	f107 0308 	add.w	r3, r7, #8
 800085a:	4619      	mov	r1, r3
 800085c:	480c      	ldr	r0, [pc, #48]	@ (8000890 <MX_TIM4_Init+0x94>)
 800085e:	f004 fda6 	bl	80053ae <HAL_TIM_ConfigClockSource>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000868:	f000 f90e 	bl	8000a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800086c:	2300      	movs	r3, #0
 800086e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000874:	463b      	mov	r3, r7
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	@ (8000890 <MX_TIM4_Init+0x94>)
 800087a:	f004 ffad 	bl	80057d8 <HAL_TIMEx_MasterConfigSynchronization>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000884:	f000 f900 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	3718      	adds	r7, #24
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000120 	.word	0x20000120
 8000894:	40000800 	.word	0x40000800

08000898 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089e:	463b      	mov	r3, r7
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80008aa:	4b16      	ldr	r3, [pc, #88]	@ (8000904 <MX_TIM9_Init+0x6c>)
 80008ac:	4a16      	ldr	r2, [pc, #88]	@ (8000908 <MX_TIM9_Init+0x70>)
 80008ae:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 433;
 80008b0:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <MX_TIM9_Init+0x6c>)
 80008b2:	f240 12b1 	movw	r2, #433	@ 0x1b1
 80008b6:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <MX_TIM9_Init+0x6c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 80008be:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <MX_TIM9_Init+0x6c>)
 80008c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008c4:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <MX_TIM9_Init+0x6c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000904 <MX_TIM9_Init+0x6c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80008d2:	480c      	ldr	r0, [pc, #48]	@ (8000904 <MX_TIM9_Init+0x6c>)
 80008d4:	f004 fb9a 	bl	800500c <HAL_TIM_Base_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 80008de:	f000 f8d3 	bl	8000a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008e6:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80008e8:	463b      	mov	r3, r7
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	@ (8000904 <MX_TIM9_Init+0x6c>)
 80008ee:	f004 fd5e 	bl	80053ae <HAL_TIM_ConfigClockSource>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 80008f8:	f000 f8c6 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000168 	.word	0x20000168
 8000908:	40014000 	.word	0x40014000

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08c      	sub	sp, #48	@ 0x30
 8000910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
 8000926:	4b54      	ldr	r3, [pc, #336]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a53      	ldr	r2, [pc, #332]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b51      	ldr	r3, [pc, #324]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	61bb      	str	r3, [r7, #24]
 800093c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
 8000942:	4b4d      	ldr	r3, [pc, #308]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	4a4c      	ldr	r2, [pc, #304]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 8000948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800094c:	6313      	str	r3, [r2, #48]	@ 0x30
 800094e:	4b4a      	ldr	r3, [pc, #296]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	4b46      	ldr	r3, [pc, #280]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a45      	ldr	r2, [pc, #276]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b43      	ldr	r3, [pc, #268]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	4b3f      	ldr	r3, [pc, #252]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	4a3e      	ldr	r2, [pc, #248]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 8000980:	f043 0310 	orr.w	r3, r3, #16
 8000984:	6313      	str	r3, [r2, #48]	@ 0x30
 8000986:	4b3c      	ldr	r3, [pc, #240]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	f003 0310 	and.w	r3, r3, #16
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	4b38      	ldr	r3, [pc, #224]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	4a37      	ldr	r2, [pc, #220]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a2:	4b35      	ldr	r3, [pc, #212]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b31      	ldr	r3, [pc, #196]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	4a30      	ldr	r2, [pc, #192]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009be:	4b2e      	ldr	r3, [pc, #184]	@ (8000a78 <MX_GPIO_Init+0x16c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Panic_Buzzer_GPIO_Port, Panic_Buzzer_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2180      	movs	r1, #128	@ 0x80
 80009ce:	482b      	ldr	r0, [pc, #172]	@ (8000a7c <MX_GPIO_Init+0x170>)
 80009d0:	f001 fce0 	bl	8002394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009da:	4829      	ldr	r0, [pc, #164]	@ (8000a80 <MX_GPIO_Init+0x174>)
 80009dc:	f001 fcda 	bl	8002394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Panic_Buzzer_Pin */
  GPIO_InitStruct.Pin = Panic_Buzzer_Pin;
 80009e0:	2380      	movs	r3, #128	@ 0x80
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Panic_Buzzer_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	4821      	ldr	r0, [pc, #132]	@ (8000a7c <MX_GPIO_Init+0x170>)
 80009f8:	f001 fb48 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80009fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	481a      	ldr	r0, [pc, #104]	@ (8000a80 <MX_GPIO_Init+0x174>)
 8000a16:	f001 fb39 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pin : Movement_Sensors_Pin */
  GPIO_InitStruct.Pin = Movement_Sensors_Pin;
 8000a1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a20:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Movement_Sensors_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4814      	ldr	r0, [pc, #80]	@ (8000a84 <MX_GPIO_Init+0x178>)
 8000a32:	f001 fb2b 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pin : Panic_Button_Pin */
  GPIO_InitStruct.Pin = Panic_Button_Pin;
 8000a36:	2301      	movs	r3, #1
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a3a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a40:	2302      	movs	r3, #2
 8000a42:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Panic_Button_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480d      	ldr	r0, [pc, #52]	@ (8000a80 <MX_GPIO_Init+0x174>)
 8000a4c:	f001 fb1e 	bl	800208c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2100      	movs	r1, #0
 8000a54:	2006      	movs	r0, #6
 8000a56:	f001 fab2 	bl	8001fbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a5a:	2006      	movs	r0, #6
 8000a5c:	f001 facb 	bl	8001ff6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2100      	movs	r1, #0
 8000a64:	2017      	movs	r0, #23
 8000a66:	f001 faaa 	bl	8001fbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a6a:	2017      	movs	r0, #23
 8000a6c:	f001 fac3 	bl	8001ff6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a70:	bf00      	nop
 8000a72:	3730      	adds	r7, #48	@ 0x30
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40020c00 	.word	0x40020c00
 8000a84:	40020800 	.word	0x40020800

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8c:	b672      	cpsid	i
}
 8000a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <Error_Handler+0x8>

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa2:	4a0f      	ldr	r2, [pc, #60]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000aa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abe:	4a08      	ldr	r2, [pc, #32]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac6:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ad2:	2007      	movs	r0, #7
 8000ad4:	f001 fa68 	bl	8001fa8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40023800 	.word	0x40023800

08000ae4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	@ 0x28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a17      	ldr	r2, [pc, #92]	@ (8000b60 <HAL_ADC_MspInit+0x7c>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d127      	bne.n	8000b56 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4b16      	ldr	r3, [pc, #88]	@ (8000b64 <HAL_ADC_MspInit+0x80>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0e:	4a15      	ldr	r2, [pc, #84]	@ (8000b64 <HAL_ADC_MspInit+0x80>)
 8000b10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b16:	4b13      	ldr	r3, [pc, #76]	@ (8000b64 <HAL_ADC_MspInit+0x80>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b0f      	ldr	r3, [pc, #60]	@ (8000b64 <HAL_ADC_MspInit+0x80>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b64 <HAL_ADC_MspInit+0x80>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b32:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <HAL_ADC_MspInit+0x80>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b42:	2303      	movs	r3, #3
 8000b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4805      	ldr	r0, [pc, #20]	@ (8000b68 <HAL_ADC_MspInit+0x84>)
 8000b52:	f001 fa9b 	bl	800208c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b56:	bf00      	nop
 8000b58:	3728      	adds	r7, #40	@ 0x28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40012000 	.word	0x40012000
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020000 	.word	0x40020000

08000b6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	@ 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a21      	ldr	r2, [pc, #132]	@ (8000c10 <HAL_I2C_MspInit+0xa4>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d13b      	bne.n	8000c06 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	4b20      	ldr	r3, [pc, #128]	@ (8000c14 <HAL_I2C_MspInit+0xa8>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a1f      	ldr	r2, [pc, #124]	@ (8000c14 <HAL_I2C_MspInit+0xa8>)
 8000b98:	f043 0302 	orr.w	r3, r3, #2
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c14 <HAL_I2C_MspInit+0xa8>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000baa:	23c0      	movs	r3, #192	@ 0xc0
 8000bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bae:	2312      	movs	r3, #18
 8000bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bba:	2304      	movs	r3, #4
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4814      	ldr	r0, [pc, #80]	@ (8000c18 <HAL_I2C_MspInit+0xac>)
 8000bc6:	f001 fa61 	bl	800208c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <HAL_I2C_MspInit+0xa8>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd2:	4a10      	ldr	r2, [pc, #64]	@ (8000c14 <HAL_I2C_MspInit+0xa8>)
 8000bd4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bda:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <HAL_I2C_MspInit+0xa8>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	201f      	movs	r0, #31
 8000bec:	f001 f9e7 	bl	8001fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000bf0:	201f      	movs	r0, #31
 8000bf2:	f001 fa00 	bl	8001ff6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2020      	movs	r0, #32
 8000bfc:	f001 f9df 	bl	8001fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c00:	2020      	movs	r0, #32
 8000c02:	f001 f9f8 	bl	8001ff6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c06:	bf00      	nop
 8000c08:	3728      	adds	r7, #40	@ 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40005400 	.word	0x40005400
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020400 	.word	0x40020400

08000c1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a2a      	ldr	r2, [pc, #168]	@ (8000cd4 <HAL_TIM_Base_MspInit+0xb8>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d116      	bne.n	8000c5c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	4b29      	ldr	r3, [pc, #164]	@ (8000cd8 <HAL_TIM_Base_MspInit+0xbc>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c36:	4a28      	ldr	r2, [pc, #160]	@ (8000cd8 <HAL_TIM_Base_MspInit+0xbc>)
 8000c38:	f043 0302 	orr.w	r3, r3, #2
 8000c3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3e:	4b26      	ldr	r3, [pc, #152]	@ (8000cd8 <HAL_TIM_Base_MspInit+0xbc>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	201d      	movs	r0, #29
 8000c50:	f001 f9b5 	bl	8001fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c54:	201d      	movs	r0, #29
 8000c56:	f001 f9ce 	bl	8001ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8000c5a:	e036      	b.n	8000cca <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a1e      	ldr	r2, [pc, #120]	@ (8000cdc <HAL_TIM_Base_MspInit+0xc0>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d116      	bne.n	8000c94 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd8 <HAL_TIM_Base_MspInit+0xbc>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6e:	4a1a      	ldr	r2, [pc, #104]	@ (8000cd8 <HAL_TIM_Base_MspInit+0xbc>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c76:	4b18      	ldr	r3, [pc, #96]	@ (8000cd8 <HAL_TIM_Base_MspInit+0xbc>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2100      	movs	r1, #0
 8000c86:	201e      	movs	r0, #30
 8000c88:	f001 f999 	bl	8001fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c8c:	201e      	movs	r0, #30
 8000c8e:	f001 f9b2 	bl	8001ff6 <HAL_NVIC_EnableIRQ>
}
 8000c92:	e01a      	b.n	8000cca <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM9)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a11      	ldr	r2, [pc, #68]	@ (8000ce0 <HAL_TIM_Base_MspInit+0xc4>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d115      	bne.n	8000cca <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd8 <HAL_TIM_Base_MspInit+0xbc>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca6:	4a0c      	ldr	r2, [pc, #48]	@ (8000cd8 <HAL_TIM_Base_MspInit+0xbc>)
 8000ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cae:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <HAL_TIM_Base_MspInit+0xbc>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2018      	movs	r0, #24
 8000cc0:	f001 f97d 	bl	8001fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000cc4:	2018      	movs	r0, #24
 8000cc6:	f001 f996 	bl	8001ff6 <HAL_NVIC_EnableIRQ>
}
 8000cca:	bf00      	nop
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40000400 	.word	0x40000400
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40000800 	.word	0x40000800
 8000ce0:	40014000 	.word	0x40014000

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <NMI_Handler+0x4>

08000cec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3a:	f000 fc53 	bl	80015e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Panic_Button_Pin);
 8000d46:	2001      	movs	r0, #1
 8000d48:	f001 fb3e 	bl	80023c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Movement_Sensors_Pin);
 8000d54:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d58:	f001 fb36 	bl	80023c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000d64:	4802      	ldr	r0, [pc, #8]	@ (8000d70 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000d66:	f004 fa32 	bl	80051ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000168 	.word	0x20000168

08000d74 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d78:	4802      	ldr	r0, [pc, #8]	@ (8000d84 <TIM3_IRQHandler+0x10>)
 8000d7a:	f004 fa28 	bl	80051ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200000d8 	.word	0x200000d8

08000d88 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d8c:	4802      	ldr	r0, [pc, #8]	@ (8000d98 <TIM4_IRQHandler+0x10>)
 8000d8e:	f004 fa1e 	bl	80051ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000120 	.word	0x20000120

08000d9c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000da0:	4802      	ldr	r0, [pc, #8]	@ (8000dac <I2C1_EV_IRQHandler+0x10>)
 8000da2:	f001 fd81 	bl	80028a8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000084 	.word	0x20000084

08000db0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000db4:	4802      	ldr	r0, [pc, #8]	@ (8000dc0 <I2C1_ER_IRQHandler+0x10>)
 8000db6:	f001 feca 	bl	8002b4e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000084 	.word	0x20000084

08000dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <SystemInit+0x20>)
 8000dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dce:	4a05      	ldr	r2, [pc, #20]	@ (8000de4 <SystemInit+0x20>)
 8000dd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000de8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dec:	f7ff ffea 	bl	8000dc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df0:	480c      	ldr	r0, [pc, #48]	@ (8000e24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000df2:	490d      	ldr	r1, [pc, #52]	@ (8000e28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000df4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df8:	e002      	b.n	8000e00 <LoopCopyDataInit>

08000dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfe:	3304      	adds	r3, #4

08000e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e04:	d3f9      	bcc.n	8000dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e06:	4a0a      	ldr	r2, [pc, #40]	@ (8000e30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e08:	4c0a      	ldr	r4, [pc, #40]	@ (8000e34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e0c:	e001      	b.n	8000e12 <LoopFillZerobss>

08000e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e10:	3204      	adds	r2, #4

08000e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e14:	d3fb      	bcc.n	8000e0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e16:	f004 fd69 	bl	80058ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1a:	f7ff fb95 	bl	8000548 <main>
  bx  lr    
 8000e1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e28:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000e2c:	08005990 	.word	0x08005990
  ldr r2, =_sbss
 8000e30:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000e34:	200001d4 	.word	0x200001d4

08000e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC_IRQHandler>

08000e3a <light_power_on>:
};

static uint8_t light_on = 0;
static uint8_t check_light_level = 0;

void light_power_on() {
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	af00      	add	r7, sp, #0
	if(light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER, SHUTDOWN_REGISTER, TURN_ON) == HAL_BUSY) {
 8000e3e:	2201      	movs	r2, #1
 8000e40:	210a      	movs	r1, #10
 8000e42:	200b      	movs	r0, #11
 8000e44:	f000 f9a2 	bl	800118c <light_i2c_write_single_register>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d101      	bne.n	8000e52 <light_power_on+0x18>
		Error_Handler();
 8000e4e:	f7ff fe1b 	bl	8000a88 <Error_Handler>
	}
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <light_shutdown>:

void light_shutdown() {
 8000e56:	b580      	push	{r7, lr}
 8000e58:	af00      	add	r7, sp, #0
	if(light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER, SHUTDOWN_REGISTER, SHUTDOWN) == HAL_BUSY) {
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	210a      	movs	r1, #10
 8000e5e:	200b      	movs	r0, #11
 8000e60:	f000 f994 	bl	800118c <light_i2c_write_single_register>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d101      	bne.n	8000e6e <light_shutdown+0x18>
		Error_Handler();
 8000e6a:	f7ff fe0d 	bl	8000a88 <Error_Handler>
	}
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <light_default_state>:

void light_default_state(uint8_t intensity) {
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	71fb      	strb	r3, [r7, #7]
	if (light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER,
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2100      	movs	r1, #0
 8000e80:	200b      	movs	r0, #11
 8000e82:	f000 f983 	bl	800118c <light_i2c_write_single_register>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d101      	bne.n	8000e90 <light_default_state+0x1e>
			CONFIGURATION_REGISTER, PICTURE_MODE) == HAL_BUSY) {
		Error_Handler();
 8000e8c:	f7ff fdfc 	bl	8000a88 <Error_Handler>
	}
	if (light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER,
 8000e90:	2200      	movs	r2, #0
 8000e92:	2101      	movs	r1, #1
 8000e94:	200b      	movs	r0, #11
 8000e96:	f000 f979 	bl	800118c <light_i2c_write_single_register>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d101      	bne.n	8000ea4 <light_default_state+0x32>
			PICTURE_DISPLAY_REGISTER, MATRIX_FRAME1) == HAL_BUSY) {
		Error_Handler();
 8000ea0:	f7ff fdf2 	bl	8000a88 <Error_Handler>
	}
	if (light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER,
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2105      	movs	r1, #5
 8000ea8:	200b      	movs	r0, #11
 8000eaa:	f000 f96f 	bl	800118c <light_i2c_write_single_register>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d101      	bne.n	8000eb8 <light_default_state+0x46>
			DISPLAY_OPTION_REGISTER,
			DISPLAY_OPTIONS(INDEPENDENT_INTENSITY, BLINK_DISABLED, 0))
			== HAL_BUSY) {
		Error_Handler();
 8000eb4:	f7ff fde8 	bl	8000a88 <Error_Handler>
	}
	// setup frame1 to be all on but without outputting light
	light_turn_on_frame(MATRIX_FRAME1);
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f000 f847 	bl	8000f4c <light_turn_on_frame>
	light_set_intensity(MATRIX_FRAME1, intensity);
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f000 f86e 	bl	8000fa4 <light_set_intensity>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <light_init>:

void light_init() {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	light_default_state(DEFAULT_LIGHT_INTENSITY);
 8000ed4:	2064      	movs	r0, #100	@ 0x64
 8000ed6:	f7ff ffcc 	bl	8000e72 <light_default_state>
	light_turn_off_frame(MATRIX_FRAME1);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f000 f84c 	bl	8000f78 <light_turn_off_frame>

	// initialize frames 2-8 to have a smooth transition when someone is passing by
	light_turn_on_frame(MATRIX_FRAME2);
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f000 f833 	bl	8000f4c <light_turn_on_frame>
	light_turn_on_frame(MATRIX_FRAME3);
 8000ee6:	2002      	movs	r0, #2
 8000ee8:	f000 f830 	bl	8000f4c <light_turn_on_frame>
	light_turn_on_frame(MATRIX_FRAME4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 f82d 	bl	8000f4c <light_turn_on_frame>
	light_turn_on_frame(MATRIX_FRAME5);
 8000ef2:	2004      	movs	r0, #4
 8000ef4:	f000 f82a 	bl	8000f4c <light_turn_on_frame>
	light_turn_on_frame(MATRIX_FRAME6);
 8000ef8:	2005      	movs	r0, #5
 8000efa:	f000 f827 	bl	8000f4c <light_turn_on_frame>
	light_turn_on_frame(MATRIX_FRAME7);
 8000efe:	2006      	movs	r0, #6
 8000f00:	f000 f824 	bl	8000f4c <light_turn_on_frame>
	light_turn_on_frame(MATRIX_FRAME8);
 8000f04:	2007      	movs	r0, #7
 8000f06:	f000 f821 	bl	8000f4c <light_turn_on_frame>
	light_set_intensity(MATRIX_FRAME2, 105);
 8000f0a:	2169      	movs	r1, #105	@ 0x69
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f000 f849 	bl	8000fa4 <light_set_intensity>
	light_set_intensity(MATRIX_FRAME3, 130);
 8000f12:	2182      	movs	r1, #130	@ 0x82
 8000f14:	2002      	movs	r0, #2
 8000f16:	f000 f845 	bl	8000fa4 <light_set_intensity>
	light_set_intensity(MATRIX_FRAME4, 155);
 8000f1a:	219b      	movs	r1, #155	@ 0x9b
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f000 f841 	bl	8000fa4 <light_set_intensity>
	light_set_intensity(MATRIX_FRAME5, 180);
 8000f22:	21b4      	movs	r1, #180	@ 0xb4
 8000f24:	2004      	movs	r0, #4
 8000f26:	f000 f83d 	bl	8000fa4 <light_set_intensity>
	light_set_intensity(MATRIX_FRAME6, 205);
 8000f2a:	21cd      	movs	r1, #205	@ 0xcd
 8000f2c:	2005      	movs	r0, #5
 8000f2e:	f000 f839 	bl	8000fa4 <light_set_intensity>
	light_set_intensity(MATRIX_FRAME7, 230);
 8000f32:	21e6      	movs	r1, #230	@ 0xe6
 8000f34:	2006      	movs	r0, #6
 8000f36:	f000 f835 	bl	8000fa4 <light_set_intensity>
	light_set_intensity(MATRIX_FRAME8, MAX_LIGHT_INTENSITY);
 8000f3a:	21ff      	movs	r1, #255	@ 0xff
 8000f3c:	2007      	movs	r0, #7
 8000f3e:	f000 f831 	bl	8000fa4 <light_set_intensity>
	light_power_on();
 8000f42:	f7ff ff7a 	bl	8000e3a <light_power_on>
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <light_turn_on_frame>:

void light_turn_on_frame(uint8_t frame) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
	if(light_i2c_send_data(frame, LED_CONTROL_START, all_on, sizeof(all_on)) == HAL_BUSY) {
 8000f56:	79f8      	ldrb	r0, [r7, #7]
 8000f58:	2312      	movs	r3, #18
 8000f5a:	4a06      	ldr	r2, [pc, #24]	@ (8000f74 <light_turn_on_frame+0x28>)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	f000 f93d 	bl	80011dc <light_i2c_send_data>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d101      	bne.n	8000f6c <light_turn_on_frame+0x20>
			Error_Handler();
 8000f68:	f7ff fd8e 	bl	8000a88 <Error_Handler>
	}
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000004 	.word	0x20000004

08000f78 <light_turn_off_frame>:

void light_turn_off_frame(uint8_t frame) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
	if(light_i2c_send_data(MATRIX_FRAME1, LED_CONTROL_START, all_off, sizeof(all_off)) == HAL_BUSY) {
 8000f82:	2312      	movs	r3, #18
 8000f84:	4a06      	ldr	r2, [pc, #24]	@ (8000fa0 <light_turn_off_frame+0x28>)
 8000f86:	2100      	movs	r1, #0
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f000 f927 	bl	80011dc <light_i2c_send_data>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d101      	bne.n	8000f98 <light_turn_off_frame+0x20>
		Error_Handler();
 8000f94:	f7ff fd78 	bl	8000a88 <Error_Handler>
	}
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200001b0 	.word	0x200001b0

08000fa4 <light_set_intensity>:

void light_set_intensity(uint8_t frame, uint8_t intensity) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b0a6      	sub	sp, #152	@ 0x98
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	460a      	mov	r2, r1
 8000fae:	71fb      	strb	r3, [r7, #7]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	71bb      	strb	r3, [r7, #6]
	if(intensity <= MAX_LIGHT_INTENSITY) {
		uint8_t pwm[144];
		memset(pwm, intensity, 144);
 8000fb4:	79b9      	ldrb	r1, [r7, #6]
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	2290      	movs	r2, #144	@ 0x90
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f004 fc8d 	bl	80058dc <memset>
		light_i2c_send_data(frame, PWM_CONTROL_START, pwm, sizeof(pwm));
 8000fc2:	f107 0208 	add.w	r2, r7, #8
 8000fc6:	79f8      	ldrb	r0, [r7, #7]
 8000fc8:	2390      	movs	r3, #144	@ 0x90
 8000fca:	2124      	movs	r1, #36	@ 0x24
 8000fcc:	f000 f906 	bl	80011dc <light_i2c_send_data>
	}
}
 8000fd0:	bf00      	nop
 8000fd2:	3798      	adds	r7, #152	@ 0x98
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <light_transition_to_max>:

void light_transition_to_max() {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	light_shutdown();
 8000fdc:	f7ff ff3b 	bl	8000e56 <light_shutdown>
	// enable auto play mode
	if(light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER, CONFIGURATION_REGISTER, AUTOPLAY_MODE(AUTOFRAME_MODE, MATRIX_FRAME1)) == HAL_BUSY) {
 8000fe0:	2208      	movs	r2, #8
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	200b      	movs	r0, #11
 8000fe6:	f000 f8d1 	bl	800118c <light_i2c_write_single_register>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d101      	bne.n	8000ff4 <light_transition_to_max+0x1c>
		Error_Handler();
 8000ff0:	f7ff fd4a 	bl	8000a88 <Error_Handler>
	}
	// set number of loops
	if(light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER, AUTOPLAY_CONTROL_REGISTER1, AUTOPLAY_MODE_CONFIG(LOOPS_FRAMES1, LOOPS_FRAMES7)) == HAL_BUSY) {
 8000ff4:	2217      	movs	r2, #23
 8000ff6:	2102      	movs	r1, #2
 8000ff8:	200b      	movs	r0, #11
 8000ffa:	f000 f8c7 	bl	800118c <light_i2c_write_single_register>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b02      	cmp	r3, #2
 8001002:	d101      	bne.n	8001008 <light_transition_to_max+0x30>
		Error_Handler();
 8001004:	f7ff fd40 	bl	8000a88 <Error_Handler>
	}
	// setup loop delay
	if(light_i2c_write_single_register(MATRIX_FUNCTION_REGISTER, AUTOPLAY_CONTROL_REGISTER2, AUTOPLAY_DELAY_CONFIG(30)) == HAL_BUSY) { // ~330 ms per step
 8001008:	221e      	movs	r2, #30
 800100a:	2103      	movs	r1, #3
 800100c:	200b      	movs	r0, #11
 800100e:	f000 f8bd 	bl	800118c <light_i2c_write_single_register>
 8001012:	4603      	mov	r3, r0
 8001014:	2b02      	cmp	r3, #2
 8001016:	d101      	bne.n	800101c <light_transition_to_max+0x44>
		Error_Handler();
 8001018:	f7ff fd36 	bl	8000a88 <Error_Handler>
	}
	light_power_on();
 800101c:	f7ff ff0d 	bl	8000e3a <light_power_on>
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}

08001024 <light_activate>:

uint8_t light_is_on() {
	return light_on;
}

void light_activate() {
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	light_on = 1;
 8001028:	4b04      	ldr	r3, [pc, #16]	@ (800103c <light_activate+0x18>)
 800102a:	2201      	movs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
	sensors_light_sensor_start();
 800102e:	f000 fa57 	bl	80014e0 <sensors_light_sensor_start>
	check_light_level = 1;
 8001032:	4b03      	ldr	r3, [pc, #12]	@ (8001040 <light_activate+0x1c>)
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	200001c2 	.word	0x200001c2
 8001040:	200001c3 	.word	0x200001c3

08001044 <light_level_check>:

void light_deactivate() {
	light_on = 0;
}

void light_level_check() {
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
	check_light_level = 1;
 8001048:	4b03      	ldr	r3, [pc, #12]	@ (8001058 <light_level_check+0x14>)
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	200001c3 	.word	0x200001c3

0800105c <light_main>:

void light_main() {
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
	static uint8_t default_state = 1;
	static uint8_t current_light = 0;
	static uint8_t movement_detection_reacted = 0;
	if(light_on) {
 8001062:	4b37      	ldr	r3, [pc, #220]	@ (8001140 <light_main+0xe4>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d062      	beq.n	8001130 <light_main+0xd4>
		if(sensors_movement_is_detected()) {
 800106a:	f000 fa51 	bl	8001510 <sensors_movement_is_detected>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d016      	beq.n	80010a2 <light_main+0x46>
			if(!movement_detection_reacted) {
 8001074:	4b33      	ldr	r3, [pc, #204]	@ (8001144 <light_main+0xe8>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d108      	bne.n	800108e <light_main+0x32>
				light_transition_to_max();
 800107c:	f7ff ffac 	bl	8000fd8 <light_transition_to_max>
				movement_detection_reacted = 1;
 8001080:	4b30      	ldr	r3, [pc, #192]	@ (8001144 <light_main+0xe8>)
 8001082:	2201      	movs	r2, #1
 8001084:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim4);
 8001086:	4830      	ldr	r0, [pc, #192]	@ (8001148 <light_main+0xec>)
 8001088:	f004 f810 	bl	80050ac <HAL_TIM_Base_Start_IT>
 800108c:	e005      	b.n	800109a <light_main+0x3e>
			} else { // reset the timer
				HAL_TIM_Base_Stop_IT(&htim4);
 800108e:	482e      	ldr	r0, [pc, #184]	@ (8001148 <light_main+0xec>)
 8001090:	f004 f86e 	bl	8005170 <HAL_TIM_Base_Stop_IT>
				HAL_TIM_Base_Start_IT(&htim4);
 8001094:	482c      	ldr	r0, [pc, #176]	@ (8001148 <light_main+0xec>)
 8001096:	f004 f809 	bl	80050ac <HAL_TIM_Base_Start_IT>
			}
			default_state = 0;
 800109a:	4b2c      	ldr	r3, [pc, #176]	@ (800114c <light_main+0xf0>)
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
 80010a0:	e046      	b.n	8001130 <light_main+0xd4>
		} else {
			if(check_light_level){
 80010a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001150 <light_main+0xf4>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d02f      	beq.n	800110a <light_main+0xae>
				uint32_t ambient_light = sensors_light_get_ambient_light_level();
 80010aa:	f000 f9f5 	bl	8001498 <sensors_light_get_ambient_light_level>
 80010ae:	6078      	str	r0, [r7, #4]
				if(ambient_light <= 500) {
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80010b6:	d803      	bhi.n	80010c0 <light_main+0x64>
					current_light = DEFAULT_LIGHT_INTENSITY;
 80010b8:	4b26      	ldr	r3, [pc, #152]	@ (8001154 <light_main+0xf8>)
 80010ba:	2264      	movs	r2, #100	@ 0x64
 80010bc:	701a      	strb	r2, [r3, #0]
 80010be:	e024      	b.n	800110a <light_main+0xae>
				} else if (ambient_light <= 1000) {
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010c6:	d803      	bhi.n	80010d0 <light_main+0x74>
					current_light = 80;
 80010c8:	4b22      	ldr	r3, [pc, #136]	@ (8001154 <light_main+0xf8>)
 80010ca:	2250      	movs	r2, #80	@ 0x50
 80010cc:	701a      	strb	r2, [r3, #0]
 80010ce:	e01c      	b.n	800110a <light_main+0xae>
				} else if (ambient_light <= 1500) {
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d803      	bhi.n	80010e2 <light_main+0x86>
					current_light = 60;
 80010da:	4b1e      	ldr	r3, [pc, #120]	@ (8001154 <light_main+0xf8>)
 80010dc:	223c      	movs	r2, #60	@ 0x3c
 80010de:	701a      	strb	r2, [r3, #0]
 80010e0:	e013      	b.n	800110a <light_main+0xae>
				} else if (ambient_light <= 2000) {
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80010e8:	d803      	bhi.n	80010f2 <light_main+0x96>
					current_light = 40;
 80010ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001154 <light_main+0xf8>)
 80010ec:	2228      	movs	r2, #40	@ 0x28
 80010ee:	701a      	strb	r2, [r3, #0]
 80010f0:	e00b      	b.n	800110a <light_main+0xae>
				} else if (ambient_light <= 2500) {
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d803      	bhi.n	8001104 <light_main+0xa8>
					current_light = 20;
 80010fc:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <light_main+0xf8>)
 80010fe:	2214      	movs	r2, #20
 8001100:	701a      	strb	r2, [r3, #0]
 8001102:	e002      	b.n	800110a <light_main+0xae>
				} else {
					current_light = 10;
 8001104:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <light_main+0xf8>)
 8001106:	220a      	movs	r2, #10
 8001108:	701a      	strb	r2, [r3, #0]
				}
			}
			if(!default_state) {
 800110a:	4b10      	ldr	r3, [pc, #64]	@ (800114c <light_main+0xf0>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d108      	bne.n	8001124 <light_main+0xc8>
				light_default_state(current_light);
 8001112:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <light_main+0xf8>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff feab 	bl	8000e72 <light_default_state>
				default_state = 1;
 800111c:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <light_main+0xf0>)
 800111e:	2201      	movs	r2, #1
 8001120:	701a      	strb	r2, [r3, #0]
 8001122:	e005      	b.n	8001130 <light_main+0xd4>
			} else {
				light_set_current_intensity(current_light);
 8001124:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <light_main+0xf8>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff ff3a 	bl	8000fa4 <light_set_intensity>
			}
		}
	}
	check_light_level = 0;
 8001130:	4b07      	ldr	r3, [pc, #28]	@ (8001150 <light_main+0xf4>)
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200001c2 	.word	0x200001c2
 8001144:	200001c4 	.word	0x200001c4
 8001148:	20000120 	.word	0x20000120
 800114c:	20000016 	.word	0x20000016
 8001150:	200001c3 	.word	0x200001c3
 8001154:	200001c5 	.word	0x200001c5

08001158 <light_i2c_select_page>:
#include <stdint.h>
#include <string.h>
#include "light_i2c.h"
#include "stm32f4xx_hal.h"

HAL_StatusTypeDef light_i2c_select_page(uint8_t page) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af02      	add	r7, sp, #8
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2] = {COMMAND_REGISTER, page};
 8001162:	23fd      	movs	r3, #253	@ 0xfd
 8001164:	733b      	strb	r3, [r7, #12]
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(LIGHT_I2C_INTERFACE, LIGHT_MATRIX_ADDR, data, 2, 100);
 800116a:	f107 020c 	add.w	r2, r7, #12
 800116e:	2364      	movs	r3, #100	@ 0x64
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2302      	movs	r3, #2
 8001174:	21e8      	movs	r1, #232	@ 0xe8
 8001176:	4804      	ldr	r0, [pc, #16]	@ (8001188 <light_i2c_select_page+0x30>)
 8001178:	f001 fa98 	bl	80026ac <HAL_I2C_Master_Transmit>
 800117c:	4603      	mov	r3, r0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000084 	.word	0x20000084

0800118c <light_i2c_write_single_register>:

HAL_StatusTypeDef light_i2c_write_single_register(uint8_t page, uint8_t reg, uint8_t value) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af02      	add	r7, sp, #8
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
 8001196:	460b      	mov	r3, r1
 8001198:	71bb      	strb	r3, [r7, #6]
 800119a:	4613      	mov	r3, r2
 800119c:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef page_selected = light_i2c_select_page(page);
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ffd9 	bl	8001158 <light_i2c_select_page>
 80011a6:	4603      	mov	r3, r0
 80011a8:	73fb      	strb	r3, [r7, #15]
	if(page_selected != HAL_BUSY) {
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d00e      	beq.n	80011ce <light_i2c_write_single_register+0x42>
		uint8_t data[2] = {reg, value};
 80011b0:	79bb      	ldrb	r3, [r7, #6]
 80011b2:	733b      	strb	r3, [r7, #12]
 80011b4:	797b      	ldrb	r3, [r7, #5]
 80011b6:	737b      	strb	r3, [r7, #13]
		return HAL_I2C_Master_Transmit(LIGHT_I2C_INTERFACE, LIGHT_MATRIX_ADDR, data, 2, 100);
 80011b8:	f107 020c 	add.w	r2, r7, #12
 80011bc:	2364      	movs	r3, #100	@ 0x64
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2302      	movs	r3, #2
 80011c2:	21e8      	movs	r1, #232	@ 0xe8
 80011c4:	4804      	ldr	r0, [pc, #16]	@ (80011d8 <light_i2c_write_single_register+0x4c>)
 80011c6:	f001 fa71 	bl	80026ac <HAL_I2C_Master_Transmit>
 80011ca:	4603      	mov	r3, r0
 80011cc:	e000      	b.n	80011d0 <light_i2c_write_single_register+0x44>
	}
	return page_selected;
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000084 	.word	0x20000084

080011dc <light_i2c_send_data>:

HAL_StatusTypeDef light_i2c_send_data(uint8_t page, uint8_t reg, uint8_t *data, uint8_t data_len) {
 80011dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011e0:	b089      	sub	sp, #36	@ 0x24
 80011e2:	af02      	add	r7, sp, #8
 80011e4:	603a      	str	r2, [r7, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	4603      	mov	r3, r0
 80011ea:	71fb      	strb	r3, [r7, #7]
 80011ec:	460b      	mov	r3, r1
 80011ee:	71bb      	strb	r3, [r7, #6]
 80011f0:	4613      	mov	r3, r2
 80011f2:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef page_selected = light_i2c_select_page(page);
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ffae 	bl	8001158 <light_i2c_select_page>
 80011fc:	4603      	mov	r3, r0
 80011fe:	75fb      	strb	r3, [r7, #23]
	if(page_selected != HAL_BUSY) {
 8001200:	7dfb      	ldrb	r3, [r7, #23]
 8001202:	2b02      	cmp	r3, #2
 8001204:	d040      	beq.n	8001288 <light_i2c_send_data+0xac>
 8001206:	466b      	mov	r3, sp
 8001208:	461e      	mov	r6, r3
		uint8_t buff[data_len+1];
 800120a:	797b      	ldrb	r3, [r7, #5]
 800120c:	1c59      	adds	r1, r3, #1
 800120e:	1e4b      	subs	r3, r1, #1
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	460a      	mov	r2, r1
 8001214:	2300      	movs	r3, #0
 8001216:	4690      	mov	r8, r2
 8001218:	4699      	mov	r9, r3
 800121a:	f04f 0200 	mov.w	r2, #0
 800121e:	f04f 0300 	mov.w	r3, #0
 8001222:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001226:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800122a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800122e:	460a      	mov	r2, r1
 8001230:	2300      	movs	r3, #0
 8001232:	4614      	mov	r4, r2
 8001234:	461d      	mov	r5, r3
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	f04f 0300 	mov.w	r3, #0
 800123e:	00eb      	lsls	r3, r5, #3
 8001240:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001244:	00e2      	lsls	r2, r4, #3
 8001246:	460b      	mov	r3, r1
 8001248:	3307      	adds	r3, #7
 800124a:	08db      	lsrs	r3, r3, #3
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	ebad 0d03 	sub.w	sp, sp, r3
 8001252:	ab02      	add	r3, sp, #8
 8001254:	3300      	adds	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
		buff[0] = reg;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	79ba      	ldrb	r2, [r7, #6]
 800125c:	701a      	strb	r2, [r3, #0]
		memcpy(buff+1, data, data_len);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	3301      	adds	r3, #1
 8001262:	797a      	ldrb	r2, [r7, #5]
 8001264:	6839      	ldr	r1, [r7, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f004 fb64 	bl	8005934 <memcpy>
		return HAL_I2C_Master_Transmit(LIGHT_I2C_INTERFACE, LIGHT_MATRIX_ADDR, buff, data_len + 1, 100);
 800126c:	797b      	ldrb	r3, [r7, #5]
 800126e:	b29b      	uxth	r3, r3
 8001270:	3301      	adds	r3, #1
 8001272:	b29b      	uxth	r3, r3
 8001274:	2264      	movs	r2, #100	@ 0x64
 8001276:	9200      	str	r2, [sp, #0]
 8001278:	68fa      	ldr	r2, [r7, #12]
 800127a:	21e8      	movs	r1, #232	@ 0xe8
 800127c:	4805      	ldr	r0, [pc, #20]	@ (8001294 <light_i2c_send_data+0xb8>)
 800127e:	f001 fa15 	bl	80026ac <HAL_I2C_Master_Transmit>
 8001282:	4603      	mov	r3, r0
 8001284:	46b5      	mov	sp, r6
 8001286:	e000      	b.n	800128a <light_i2c_send_data+0xae>
	}
	return page_selected;
 8001288:	7dfb      	ldrb	r3, [r7, #23]
}
 800128a:	4618      	mov	r0, r3
 800128c:	371c      	adds	r7, #28
 800128e:	46bd      	mov	sp, r7
 8001290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001294:	20000084 	.word	0x20000084

08001298 <panic_main>:

/*
 * @brief Main actions performed each main loop cycle by the panic module
 * @retval None
 */
void panic_main() {
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	if(panic_button_is_pressed()) {
 800129c:	f000 f854 	bl	8001348 <panic_button_is_pressed>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d018      	beq.n	80012d8 <panic_main+0x40>
		if(panic_buzzer_is_active()) { // panic_button pressed with buzzer active
 80012a6:	f000 f883 	bl	80013b0 <panic_buzzer_is_active>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d004      	beq.n	80012ba <panic_main+0x22>
			panic_buzzer_stop();
 80012b0:	f000 f86e 	bl	8001390 <panic_buzzer_stop>
			panic_timer_stop();
 80012b4:	f000 f8b0 	bl	8001418 <panic_timer_stop>
			panic_timer_is_elapsed_reset();
		}
	} else {
		// do nothing
	}
}
 80012b8:	e02c      	b.n	8001314 <panic_main+0x7c>
		} else if(panic_timer_is_active()) { // panic_button pressed with timer active but buzzer inactive
 80012ba:	f000 f8bd 	bl	8001438 <panic_timer_is_active>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d002      	beq.n	80012ca <panic_main+0x32>
			panic_timer_stop();
 80012c4:	f000 f8a8 	bl	8001418 <panic_timer_stop>
}
 80012c8:	e024      	b.n	8001314 <panic_main+0x7c>
			panic_timer_start();
 80012ca:	f000 f895 	bl	80013f8 <panic_timer_start>
			panic_buzzer_start();
 80012ce:	f000 f847 	bl	8001360 <panic_buzzer_start>
			panic_button_reset();
 80012d2:	f000 f82d 	bl	8001330 <panic_button_reset>
}
 80012d6:	e01d      	b.n	8001314 <panic_main+0x7c>
	} else if(panic_timer_is_active()) { // turn on and off the buzzer (normal mode)
 80012d8:	f000 f8ae 	bl	8001438 <panic_timer_is_active>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d018      	beq.n	8001314 <panic_main+0x7c>
		if(panic_timer_is_elapsed()) {
 80012e2:	f000 f8b5 	bl	8001450 <panic_timer_is_elapsed>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d013      	beq.n	8001314 <panic_main+0x7c>
			if(panic_buzzer_is_active()) {
 80012ec:	f000 f860 	bl	80013b0 <panic_buzzer_is_active>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d002      	beq.n	80012fc <panic_main+0x64>
				panic_buzzer_stop();
 80012f6:	f000 f84b 	bl	8001390 <panic_buzzer_stop>
 80012fa:	e009      	b.n	8001310 <panic_main+0x78>
				if(panic_buzzer_get_counter() == 5) {
 80012fc:	f000 f864 	bl	80013c8 <panic_buzzer_get_counter>
 8001300:	4603      	mov	r3, r0
 8001302:	2b05      	cmp	r3, #5
 8001304:	d102      	bne.n	800130c <panic_main+0x74>
					panic_timer_stop();
 8001306:	f000 f887 	bl	8001418 <panic_timer_stop>
 800130a:	e001      	b.n	8001310 <panic_main+0x78>
					panic_buzzer_start();
 800130c:	f000 f828 	bl	8001360 <panic_buzzer_start>
			panic_timer_is_elapsed_reset();
 8001310:	f000 f8b6 	bl	8001480 <panic_timer_is_elapsed_reset>
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}

08001318 <panic_button_set>:
 * All this function does is setting the button_pressed global
 * variable to true to trigger the reaction of the other modules
 * that need this information
 * @retval None
 */
void panic_button_set() {
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
	panic_button_pressed = 1;
 800131c:	4b03      	ldr	r3, [pc, #12]	@ (800132c <panic_button_set+0x14>)
 800131e:	2201      	movs	r2, #1
 8001320:	701a      	strb	r2, [r3, #0]
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	200001c6 	.word	0x200001c6

08001330 <panic_button_reset>:
 * @brief This function is used to reset the panic button interrupt request variable, this means that the interrupt has been managed
 * This function resets the button_pressed global variable to stop
 * the panic procedure execution
 * @retval None
 */
void panic_button_reset() {
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
	panic_button_pressed = 0;
 8001334:	4b03      	ldr	r3, [pc, #12]	@ (8001344 <panic_button_reset+0x14>)
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	200001c6 	.word	0x200001c6

08001348 <panic_button_is_pressed>:

/*
 * @brief This function is used to check if an panic button interrupt has been triggered
 * @retval panic_button_pressed variable value which tells if an interrupt on button's EXTI line has been triggered
 */
uint8_t panic_button_is_pressed() {
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
	return panic_button_pressed;
 800134c:	4b03      	ldr	r3, [pc, #12]	@ (800135c <panic_button_is_pressed+0x14>)
 800134e:	781b      	ldrb	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	200001c6 	.word	0x200001c6

08001360 <panic_buzzer_start>:
/*
 * @brief Starts the panic buzzer
 * This function is used to turn on the panic buzzer and make it sound
 * @retval None
 */
void panic_buzzer_start() {
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PANIC_BUZZER, GPIO_PIN_SET);
 8001364:	2201      	movs	r2, #1
 8001366:	2180      	movs	r1, #128	@ 0x80
 8001368:	4806      	ldr	r0, [pc, #24]	@ (8001384 <panic_buzzer_start+0x24>)
 800136a:	f001 f813 	bl	8002394 <HAL_GPIO_WritePin>
	panic_buzzer_active = 1;
 800136e:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <panic_buzzer_start+0x28>)
 8001370:	2201      	movs	r2, #1
 8001372:	701a      	strb	r2, [r3, #0]
	panic_buzzer_counter++;
 8001374:	4b05      	ldr	r3, [pc, #20]	@ (800138c <panic_buzzer_start+0x2c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	3301      	adds	r3, #1
 800137a:	b2da      	uxtb	r2, r3
 800137c:	4b03      	ldr	r3, [pc, #12]	@ (800138c <panic_buzzer_start+0x2c>)
 800137e:	701a      	strb	r2, [r3, #0]
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40021000 	.word	0x40021000
 8001388:	200001c7 	.word	0x200001c7
 800138c:	200001c8 	.word	0x200001c8

08001390 <panic_buzzer_stop>:
/*
 * @brief Stops the panic buzzer
 * This function is used to stop any sound make by the panic buzzer
 * @retval None
 */
void panic_buzzer_stop() {
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PANIC_BUZZER, GPIO_PIN_RESET);
 8001394:	2200      	movs	r2, #0
 8001396:	2180      	movs	r1, #128	@ 0x80
 8001398:	4803      	ldr	r0, [pc, #12]	@ (80013a8 <panic_buzzer_stop+0x18>)
 800139a:	f000 fffb 	bl	8002394 <HAL_GPIO_WritePin>
	panic_buzzer_active = 0;
 800139e:	4b03      	ldr	r3, [pc, #12]	@ (80013ac <panic_buzzer_stop+0x1c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40021000 	.word	0x40021000
 80013ac:	200001c7 	.word	0x200001c7

080013b0 <panic_buzzer_is_active>:
/*
 * @brief Yells the panic buzzer status
 * This function is a getter for the panic_buzzer_active variable
 * @retval the panic_buzzer_active current value
 */
uint8_t panic_buzzer_is_active() {
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
	return panic_buzzer_active;
 80013b4:	4b03      	ldr	r3, [pc, #12]	@ (80013c4 <panic_buzzer_is_active+0x14>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	200001c7 	.word	0x200001c7

080013c8 <panic_buzzer_get_counter>:
/*
 * @brief Yells how many times the buzzer has been activated
 * This function is a getter for the panic_buzzer_counter variable
 * @retval the panic_buzzer_counter current value
 */
uint8_t panic_buzzer_get_counter() {
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
	return panic_buzzer_counter;
 80013cc:	4b03      	ldr	r3, [pc, #12]	@ (80013dc <panic_buzzer_get_counter+0x14>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	200001c8 	.word	0x200001c8

080013e0 <panic_buzzer_reset_counter>:
 * @brief Sets the panic buzzer counter to 0
 * This function resets the panic_buzzer_counter to zero, this is used to restart the emergency sound sequence
 * a complete sequence lasts 5 sounds.
 * @retval None
 */
void panic_buzzer_reset_counter() {
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
	panic_buzzer_counter = 0;
 80013e4:	4b03      	ldr	r3, [pc, #12]	@ (80013f4 <panic_buzzer_reset_counter+0x14>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	200001c8 	.word	0x200001c8

080013f8 <panic_timer_start>:
/*
 * @brief This function make the panic timer start
 * All this function does is making the panic timer start and activate its interrupt triggering
 * @retval None
 */
void panic_timer_start() {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(PANIC_TIMER);
 80013fc:	4804      	ldr	r0, [pc, #16]	@ (8001410 <panic_timer_start+0x18>)
 80013fe:	f003 fe55 	bl	80050ac <HAL_TIM_Base_Start_IT>
	timer_active = 1;
 8001402:	4b04      	ldr	r3, [pc, #16]	@ (8001414 <panic_timer_start+0x1c>)
 8001404:	2201      	movs	r2, #1
 8001406:	701a      	strb	r2, [r3, #0]
	panic_buzzer_reset_counter();
 8001408:	f7ff ffea 	bl	80013e0 <panic_buzzer_reset_counter>
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	200000d8 	.word	0x200000d8
 8001414:	200001c9 	.word	0x200001c9

08001418 <panic_timer_stop>:
/*
 * @brief This function makes the panic timer stop
 * All this function does is making the panic timer stop and deactivates timer's interrupt triggering
 * @retval None
 */
void panic_timer_stop() {
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(PANIC_TIMER);
 800141c:	4804      	ldr	r0, [pc, #16]	@ (8001430 <panic_timer_stop+0x18>)
 800141e:	f003 fea7 	bl	8005170 <HAL_TIM_Base_Stop_IT>
	timer_active = 0;
 8001422:	4b04      	ldr	r3, [pc, #16]	@ (8001434 <panic_timer_stop+0x1c>)
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
	panic_buzzer_reset_counter();
 8001428:	f7ff ffda 	bl	80013e0 <panic_buzzer_reset_counter>
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	200000d8 	.word	0x200000d8
 8001434:	200001c9 	.word	0x200001c9

08001438 <panic_timer_is_active>:

/*
 * @brief Yells if the panic timer is active
 * @retval panic_timer_active variable value
 */
uint8_t panic_timer_is_active() {
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
	return timer_active;
 800143c:	4b03      	ldr	r3, [pc, #12]	@ (800144c <panic_timer_is_active+0x14>)
 800143e:	781b      	ldrb	r3, [r3, #0]
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	200001c9 	.word	0x200001c9

08001450 <panic_timer_is_elapsed>:

/*
 * @brief Tells if a interrupt request has been triggered by timer elapsed event
 * @retval panic_timer_elapsed variable value
 */
uint8_t panic_timer_is_elapsed() {
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
	return timer_elapsed;
 8001454:	4b03      	ldr	r3, [pc, #12]	@ (8001464 <panic_timer_is_elapsed+0x14>)
 8001456:	781b      	ldrb	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	200001ca 	.word	0x200001ca

08001468 <panic_timer_elapsed>:

void panic_timer_elapsed() {
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
	timer_elapsed = 1;
 800146c:	4b03      	ldr	r3, [pc, #12]	@ (800147c <panic_timer_elapsed+0x14>)
 800146e:	2201      	movs	r2, #1
 8001470:	701a      	strb	r2, [r3, #0]
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	200001ca 	.word	0x200001ca

08001480 <panic_timer_is_elapsed_reset>:
/*
 * @brief Resets the panic_timer_elapsed variable
 * This function sets panic_timer_elapsed variable back to 0 meaning that the interrupt request has been managed
 * @retval None
 */
void panic_timer_is_elapsed_reset() {
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
	timer_elapsed = 0;
 8001484:	4b03      	ldr	r3, [pc, #12]	@ (8001494 <panic_timer_is_elapsed_reset+0x14>)
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	200001ca 	.word	0x200001ca

08001498 <sensors_light_get_ambient_light_level>:

/*
 * @brief Reads current ambient light level from the sensor
 * @retval current ambient light level
 */
uint32_t sensors_light_get_ambient_light_level() {
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
	uint32_t ambient_light = SENSORS_LIGHT_SENSOR_INACTIVE;
 800149e:	f04f 3311 	mov.w	r3, #286331153	@ 0x11111111
 80014a2:	607b      	str	r3, [r7, #4]
	if(light_sensor_active) {
 80014a4:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <sensors_light_get_ambient_light_level+0x40>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d010      	beq.n	80014ce <sensors_light_get_ambient_light_level+0x36>
		HAL_ADC_Start(SENSORS_LIGHT_SENSOR_ADC);
 80014ac:	480b      	ldr	r0, [pc, #44]	@ (80014dc <sensors_light_get_ambient_light_level+0x44>)
 80014ae:	f000 f8fd 	bl	80016ac <HAL_ADC_Start>
		if(HAL_ADC_PollForConversion(SENSORS_LIGHT_SENSOR_ADC, 10) == HAL_OK) {
 80014b2:	210a      	movs	r1, #10
 80014b4:	4809      	ldr	r0, [pc, #36]	@ (80014dc <sensors_light_get_ambient_light_level+0x44>)
 80014b6:	f000 f9e0 	bl	800187a <HAL_ADC_PollForConversion>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d106      	bne.n	80014ce <sensors_light_get_ambient_light_level+0x36>
			ambient_light = HAL_ADC_GetValue(SENSORS_LIGHT_SENSOR_ADC);
 80014c0:	4806      	ldr	r0, [pc, #24]	@ (80014dc <sensors_light_get_ambient_light_level+0x44>)
 80014c2:	f000 fa65 	bl	8001990 <HAL_ADC_GetValue>
 80014c6:	6078      	str	r0, [r7, #4]
			HAL_ADC_Stop(SENSORS_LIGHT_SENSOR_ADC);
 80014c8:	4804      	ldr	r0, [pc, #16]	@ (80014dc <sensors_light_get_ambient_light_level+0x44>)
 80014ca:	f000 f9a3 	bl	8001814 <HAL_ADC_Stop>
		}
	}
	return ambient_light;
 80014ce:	687b      	ldr	r3, [r7, #4]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	200001cb 	.word	0x200001cb
 80014dc:	2000003c 	.word	0x2000003c

080014e0 <sensors_light_sensor_start>:

/*
 * @brief Sets the light_sensor_active variable to 1 telling that it is possible to check the light intensity value
 * @retval None
 */
void sensors_light_sensor_start() {
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
	light_sensor_active = 1;
 80014e4:	4b03      	ldr	r3, [pc, #12]	@ (80014f4 <sensors_light_sensor_start+0x14>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	701a      	strb	r2, [r3, #0]
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	200001cb 	.word	0x200001cb

080014f8 <sensors_movement_detected>:
 * @brief Routine executed when movement is detected
 * This function sets the movement_sensor_detected variable to 1 to trigger
 * a reaction to the interrupted generated by the movement detection
 * @retval None
 */
void sensors_movement_detected() {
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
	movement_sensor_detected = 1;
 80014fc:	4b03      	ldr	r3, [pc, #12]	@ (800150c <sensors_movement_detected+0x14>)
 80014fe:	2201      	movs	r2, #1
 8001500:	701a      	strb	r2, [r3, #0]
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	200001cc 	.word	0x200001cc

08001510 <sensors_movement_is_detected>:
/*
 * @brief Yells the movement_sensor_detected variable value
 * This function is used to check if there has been any movement
 * @retval movement_sensor_detected current value
 */
uint8_t sensors_movement_is_detected() {
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
	return movement_sensor_detected;
 8001514:	4b03      	ldr	r3, [pc, #12]	@ (8001524 <sensors_movement_is_detected+0x14>)
 8001516:	781b      	ldrb	r3, [r3, #0]
}
 8001518:	4618      	mov	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	200001cc 	.word	0x200001cc

08001528 <sensors_movement_detected_reset>:
 * @brief Resets movement_sensor_detected to 0
 * This function is used to tell that the interrupt has been correctly served
 * by resetting the associated variable
 * @retval None
 */
void sensors_movement_detected_reset() {
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
	movement_sensor_detected = 0;
 800152c:	4b03      	ldr	r3, [pc, #12]	@ (800153c <sensors_movement_detected_reset+0x14>)
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	200001cc 	.word	0x200001cc

08001540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001544:	4b0e      	ldr	r3, [pc, #56]	@ (8001580 <HAL_Init+0x40>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0d      	ldr	r2, [pc, #52]	@ (8001580 <HAL_Init+0x40>)
 800154a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800154e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001550:	4b0b      	ldr	r3, [pc, #44]	@ (8001580 <HAL_Init+0x40>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a0a      	ldr	r2, [pc, #40]	@ (8001580 <HAL_Init+0x40>)
 8001556:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800155a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800155c:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <HAL_Init+0x40>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a07      	ldr	r2, [pc, #28]	@ (8001580 <HAL_Init+0x40>)
 8001562:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001566:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001568:	2003      	movs	r0, #3
 800156a:	f000 fd1d 	bl	8001fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156e:	2000      	movs	r0, #0
 8001570:	f000 f808 	bl	8001584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001574:	f7ff fa8e 	bl	8000a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40023c00 	.word	0x40023c00

08001584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <HAL_InitTick+0x54>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <HAL_InitTick+0x58>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4619      	mov	r1, r3
 8001596:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800159a:	fbb3 f3f1 	udiv	r3, r3, r1
 800159e:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 fd35 	bl	8002012 <HAL_SYSTICK_Config>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e00e      	b.n	80015d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b0f      	cmp	r3, #15
 80015b6:	d80a      	bhi.n	80015ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b8:	2200      	movs	r2, #0
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295
 80015c0:	f000 fcfd 	bl	8001fbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c4:	4a06      	ldr	r2, [pc, #24]	@ (80015e0 <HAL_InitTick+0x5c>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e000      	b.n	80015d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000000 	.word	0x20000000
 80015dc:	2000001c 	.word	0x2000001c
 80015e0:	20000018 	.word	0x20000018

080015e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e8:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <HAL_IncTick+0x20>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <HAL_IncTick+0x24>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	4a04      	ldr	r2, [pc, #16]	@ (8001608 <HAL_IncTick+0x24>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	2000001c 	.word	0x2000001c
 8001608:	200001d0 	.word	0x200001d0

0800160c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return uwTick;
 8001610:	4b03      	ldr	r3, [pc, #12]	@ (8001620 <HAL_GetTick+0x14>)
 8001612:	681b      	ldr	r3, [r3, #0]
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	200001d0 	.word	0x200001d0

08001624 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e033      	b.n	80016a2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	2b00      	cmp	r3, #0
 8001640:	d109      	bne.n	8001656 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff fa4e 	bl	8000ae4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	2b00      	cmp	r3, #0
 8001660:	d118      	bne.n	8001694 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800166a:	f023 0302 	bic.w	r3, r3, #2
 800166e:	f043 0202 	orr.w	r2, r3, #2
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 faca 	bl	8001c10 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001686:	f023 0303 	bic.w	r3, r3, #3
 800168a:	f043 0201 	orr.w	r2, r3, #1
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	641a      	str	r2, [r3, #64]	@ 0x40
 8001692:	e001      	b.n	8001698 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_ADC_Start+0x1a>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e097      	b.n	80017f6 <HAL_ADC_Start+0x14a>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d018      	beq.n	800170e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0201 	orr.w	r2, r2, #1
 80016ea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016ec:	4b45      	ldr	r3, [pc, #276]	@ (8001804 <HAL_ADC_Start+0x158>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a45      	ldr	r2, [pc, #276]	@ (8001808 <HAL_ADC_Start+0x15c>)
 80016f2:	fba2 2303 	umull	r2, r3, r2, r3
 80016f6:	0c9a      	lsrs	r2, r3, #18
 80016f8:	4613      	mov	r3, r2
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4413      	add	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001700:	e002      	b.n	8001708 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	3b01      	subs	r3, #1
 8001706:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f9      	bne.n	8001702 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b01      	cmp	r3, #1
 800171a:	d15f      	bne.n	80017dc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001720:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001724:	f023 0301 	bic.w	r3, r3, #1
 8001728:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800173a:	2b00      	cmp	r3, #0
 800173c:	d007      	beq.n	800174e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001742:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001746:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001752:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001756:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800175a:	d106      	bne.n	800176a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001760:	f023 0206 	bic.w	r2, r3, #6
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	645a      	str	r2, [r3, #68]	@ 0x44
 8001768:	e002      	b.n	8001770 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001778:	4b24      	ldr	r3, [pc, #144]	@ (800180c <HAL_ADC_Start+0x160>)
 800177a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001784:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 031f 	and.w	r3, r3, #31
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10f      	bne.n	80017b2 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d129      	bne.n	80017f4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	e020      	b.n	80017f4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a16      	ldr	r2, [pc, #88]	@ (8001810 <HAL_ADC_Start+0x164>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d11b      	bne.n	80017f4 <HAL_ADC_Start+0x148>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d114      	bne.n	80017f4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	e00b      	b.n	80017f4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e0:	f043 0210 	orr.w	r2, r3, #16
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ec:	f043 0201 	orr.w	r2, r3, #1
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	20000000 	.word	0x20000000
 8001808:	431bde83 	.word	0x431bde83
 800180c:	40012300 	.word	0x40012300
 8001810:	40012000 	.word	0x40012000

08001814 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001822:	2b01      	cmp	r3, #1
 8001824:	d101      	bne.n	800182a <HAL_ADC_Stop+0x16>
 8001826:	2302      	movs	r3, #2
 8001828:	e021      	b.n	800186e <HAL_ADC_Stop+0x5a>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0201 	bic.w	r2, r2, #1
 8001840:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b00      	cmp	r3, #0
 800184e:	d109      	bne.n	8001864 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001854:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001858:	f023 0301 	bic.w	r3, r3, #1
 800185c:	f043 0201 	orr.w	r2, r3, #1
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b084      	sub	sp, #16
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001892:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001896:	d113      	bne.n	80018c0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80018a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018a6:	d10b      	bne.n	80018c0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ac:	f043 0220 	orr.w	r2, r3, #32
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e063      	b.n	8001988 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80018c0:	f7ff fea4 	bl	800160c <HAL_GetTick>
 80018c4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018c6:	e021      	b.n	800190c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ce:	d01d      	beq.n	800190c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d007      	beq.n	80018e6 <HAL_ADC_PollForConversion+0x6c>
 80018d6:	f7ff fe99 	bl	800160c <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d212      	bcs.n	800190c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d00b      	beq.n	800190c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f8:	f043 0204 	orr.w	r2, r3, #4
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e03d      	b.n	8001988 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b02      	cmp	r3, #2
 8001918:	d1d6      	bne.n	80018c8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f06f 0212 	mvn.w	r2, #18
 8001922:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001928:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d123      	bne.n	8001986 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001942:	2b00      	cmp	r3, #0
 8001944:	d11f      	bne.n	8001986 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800194c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001950:	2b00      	cmp	r3, #0
 8001952:	d006      	beq.n	8001962 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800195e:	2b00      	cmp	r3, #0
 8001960:	d111      	bne.n	8001986 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001966:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d105      	bne.n	8001986 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	f043 0201 	orr.w	r2, r3, #1
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800199e:	4618      	mov	r0, r3
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d101      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x1c>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e113      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x244>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b09      	cmp	r3, #9
 80019d6:	d925      	bls.n	8001a24 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68d9      	ldr	r1, [r3, #12]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	461a      	mov	r2, r3
 80019e6:	4613      	mov	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	3b1e      	subs	r3, #30
 80019ee:	2207      	movs	r2, #7
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43da      	mvns	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	400a      	ands	r2, r1
 80019fc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68d9      	ldr	r1, [r3, #12]
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	4618      	mov	r0, r3
 8001a10:	4603      	mov	r3, r0
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	4403      	add	r3, r0
 8001a16:	3b1e      	subs	r3, #30
 8001a18:	409a      	lsls	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	e022      	b.n	8001a6a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6919      	ldr	r1, [r3, #16]
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	461a      	mov	r2, r3
 8001a32:	4613      	mov	r3, r2
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	4413      	add	r3, r2
 8001a38:	2207      	movs	r2, #7
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43da      	mvns	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	400a      	ands	r2, r1
 8001a46:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6919      	ldr	r1, [r3, #16]
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	4618      	mov	r0, r3
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4403      	add	r3, r0
 8001a60:	409a      	lsls	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b06      	cmp	r3, #6
 8001a70:	d824      	bhi.n	8001abc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	3b05      	subs	r3, #5
 8001a84:	221f      	movs	r2, #31
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	400a      	ands	r2, r1
 8001a92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	3b05      	subs	r3, #5
 8001aae:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001aba:	e04c      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b0c      	cmp	r3, #12
 8001ac2:	d824      	bhi.n	8001b0e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3b23      	subs	r3, #35	@ 0x23
 8001ad6:	221f      	movs	r2, #31
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43da      	mvns	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	400a      	ands	r2, r1
 8001ae4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	4618      	mov	r0, r3
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	3b23      	subs	r3, #35	@ 0x23
 8001b00:	fa00 f203 	lsl.w	r2, r0, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b0c:	e023      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	3b41      	subs	r3, #65	@ 0x41
 8001b20:	221f      	movs	r2, #31
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43da      	mvns	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	400a      	ands	r2, r1
 8001b2e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	3b41      	subs	r3, #65	@ 0x41
 8001b4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b56:	4b29      	ldr	r3, [pc, #164]	@ (8001bfc <HAL_ADC_ConfigChannel+0x250>)
 8001b58:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a28      	ldr	r2, [pc, #160]	@ (8001c00 <HAL_ADC_ConfigChannel+0x254>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d10f      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x1d8>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b12      	cmp	r3, #18
 8001b6a:	d10b      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a1d      	ldr	r2, [pc, #116]	@ (8001c00 <HAL_ADC_ConfigChannel+0x254>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d12b      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x23a>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a1c      	ldr	r2, [pc, #112]	@ (8001c04 <HAL_ADC_ConfigChannel+0x258>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d003      	beq.n	8001ba0 <HAL_ADC_ConfigChannel+0x1f4>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b11      	cmp	r3, #17
 8001b9e:	d122      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a11      	ldr	r2, [pc, #68]	@ (8001c04 <HAL_ADC_ConfigChannel+0x258>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d111      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bc2:	4b11      	ldr	r3, [pc, #68]	@ (8001c08 <HAL_ADC_ConfigChannel+0x25c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a11      	ldr	r2, [pc, #68]	@ (8001c0c <HAL_ADC_ConfigChannel+0x260>)
 8001bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bcc:	0c9a      	lsrs	r2, r3, #18
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001bd8:	e002      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f9      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	40012300 	.word	0x40012300
 8001c00:	40012000 	.word	0x40012000
 8001c04:	10000012 	.word	0x10000012
 8001c08:	20000000 	.word	0x20000000
 8001c0c:	431bde83 	.word	0x431bde83

08001c10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c18:	4b79      	ldr	r3, [pc, #484]	@ (8001e00 <ADC_Init+0x1f0>)
 8001c1a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	431a      	orrs	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6859      	ldr	r1, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	021a      	lsls	r2, r3, #8
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001c68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6859      	ldr	r1, [r3, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6899      	ldr	r1, [r3, #8]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca2:	4a58      	ldr	r2, [pc, #352]	@ (8001e04 <ADC_Init+0x1f4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d022      	beq.n	8001cee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001cb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6899      	ldr	r1, [r3, #8]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001cd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6899      	ldr	r1, [r3, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	e00f      	b.n	8001d0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001cfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d0c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0202 	bic.w	r2, r2, #2
 8001d1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6899      	ldr	r1, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	7e1b      	ldrb	r3, [r3, #24]
 8001d28:	005a      	lsls	r2, r3, #1
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d01b      	beq.n	8001d74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d4a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001d5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6859      	ldr	r1, [r3, #4]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d66:	3b01      	subs	r3, #1
 8001d68:	035a      	lsls	r2, r3, #13
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	e007      	b.n	8001d84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d82:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001d92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	051a      	lsls	r2, r3, #20
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001db8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6899      	ldr	r1, [r3, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001dc6:	025a      	lsls	r2, r3, #9
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6899      	ldr	r1, [r3, #8]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	029a      	lsls	r2, r3, #10
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	609a      	str	r2, [r3, #8]
}
 8001df4:	bf00      	nop
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	40012300 	.word	0x40012300
 8001e04:	0f000001 	.word	0x0f000001

08001e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e18:	4b0c      	ldr	r3, [pc, #48]	@ (8001e4c <__NVIC_SetPriorityGrouping+0x44>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e24:	4013      	ands	r3, r2
 8001e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e3a:	4a04      	ldr	r2, [pc, #16]	@ (8001e4c <__NVIC_SetPriorityGrouping+0x44>)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	60d3      	str	r3, [r2, #12]
}
 8001e40:	bf00      	nop
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e54:	4b04      	ldr	r3, [pc, #16]	@ (8001e68 <__NVIC_GetPriorityGrouping+0x18>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	f003 0307 	and.w	r3, r3, #7
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	db0b      	blt.n	8001e96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	f003 021f 	and.w	r2, r3, #31
 8001e84:	4907      	ldr	r1, [pc, #28]	@ (8001ea4 <__NVIC_EnableIRQ+0x38>)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	095b      	lsrs	r3, r3, #5
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000e100 	.word	0xe000e100

08001ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	6039      	str	r1, [r7, #0]
 8001eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	db0a      	blt.n	8001ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	490c      	ldr	r1, [pc, #48]	@ (8001ef4 <__NVIC_SetPriority+0x4c>)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	0112      	lsls	r2, r2, #4
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	440b      	add	r3, r1
 8001ecc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ed0:	e00a      	b.n	8001ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	4908      	ldr	r1, [pc, #32]	@ (8001ef8 <__NVIC_SetPriority+0x50>)
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	3b04      	subs	r3, #4
 8001ee0:	0112      	lsls	r2, r2, #4
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	761a      	strb	r2, [r3, #24]
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000e100 	.word	0xe000e100
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b089      	sub	sp, #36	@ 0x24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f1c3 0307 	rsb	r3, r3, #7
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	bf28      	it	cs
 8001f1a:	2304      	movcs	r3, #4
 8001f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3304      	adds	r3, #4
 8001f22:	2b06      	cmp	r3, #6
 8001f24:	d902      	bls.n	8001f2c <NVIC_EncodePriority+0x30>
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3b03      	subs	r3, #3
 8001f2a:	e000      	b.n	8001f2e <NVIC_EncodePriority+0x32>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f30:	f04f 32ff 	mov.w	r2, #4294967295
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43da      	mvns	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	401a      	ands	r2, r3
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f44:	f04f 31ff 	mov.w	r1, #4294967295
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4e:	43d9      	mvns	r1, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f54:	4313      	orrs	r3, r2
         );
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3724      	adds	r7, #36	@ 0x24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f74:	d301      	bcc.n	8001f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f76:	2301      	movs	r3, #1
 8001f78:	e00f      	b.n	8001f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa4 <SysTick_Config+0x40>)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f82:	210f      	movs	r1, #15
 8001f84:	f04f 30ff 	mov.w	r0, #4294967295
 8001f88:	f7ff ff8e 	bl	8001ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f8c:	4b05      	ldr	r3, [pc, #20]	@ (8001fa4 <SysTick_Config+0x40>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f92:	4b04      	ldr	r3, [pc, #16]	@ (8001fa4 <SysTick_Config+0x40>)
 8001f94:	2207      	movs	r2, #7
 8001f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	e000e010 	.word	0xe000e010

08001fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff ff29 	bl	8001e08 <__NVIC_SetPriorityGrouping>
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b086      	sub	sp, #24
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
 8001fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd0:	f7ff ff3e 	bl	8001e50 <__NVIC_GetPriorityGrouping>
 8001fd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	68b9      	ldr	r1, [r7, #8]
 8001fda:	6978      	ldr	r0, [r7, #20]
 8001fdc:	f7ff ff8e 	bl	8001efc <NVIC_EncodePriority>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff ff5d 	bl	8001ea8 <__NVIC_SetPriority>
}
 8001fee:	bf00      	nop
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ff31 	bl	8001e6c <__NVIC_EnableIRQ>
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff ffa2 	bl	8001f64 <SysTick_Config>
 8002020:	4603      	mov	r3, r0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d004      	beq.n	8002048 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2280      	movs	r2, #128	@ 0x80
 8002042:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e00c      	b.n	8002062 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2205      	movs	r2, #5
 800204c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0201 	bic.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800207c:	b2db      	uxtb	r3, r3
}
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800208c:	b480      	push	{r7}
 800208e:	b089      	sub	sp, #36	@ 0x24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
 80020a6:	e159      	b.n	800235c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020a8:	2201      	movs	r2, #1
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	4013      	ands	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	f040 8148 	bne.w	8002356 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d005      	beq.n	80020de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d130      	bne.n	8002140 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	2203      	movs	r2, #3
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002114:	2201      	movs	r2, #1
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	f003 0201 	and.w	r2, r3, #1
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	2b03      	cmp	r3, #3
 800214a:	d017      	beq.n	800217c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	2203      	movs	r2, #3
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d123      	bne.n	80021d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	08da      	lsrs	r2, r3, #3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3208      	adds	r2, #8
 8002190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	220f      	movs	r2, #15
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	08da      	lsrs	r2, r3, #3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3208      	adds	r2, #8
 80021ca:	69b9      	ldr	r1, [r7, #24]
 80021cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	2203      	movs	r2, #3
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 0203 	and.w	r2, r3, #3
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80a2 	beq.w	8002356 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	4b57      	ldr	r3, [pc, #348]	@ (8002374 <HAL_GPIO_Init+0x2e8>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221a:	4a56      	ldr	r2, [pc, #344]	@ (8002374 <HAL_GPIO_Init+0x2e8>)
 800221c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002220:	6453      	str	r3, [r2, #68]	@ 0x44
 8002222:	4b54      	ldr	r3, [pc, #336]	@ (8002374 <HAL_GPIO_Init+0x2e8>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002226:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800222e:	4a52      	ldr	r2, [pc, #328]	@ (8002378 <HAL_GPIO_Init+0x2ec>)
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	089b      	lsrs	r3, r3, #2
 8002234:	3302      	adds	r3, #2
 8002236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	220f      	movs	r2, #15
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a49      	ldr	r2, [pc, #292]	@ (800237c <HAL_GPIO_Init+0x2f0>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d019      	beq.n	800228e <HAL_GPIO_Init+0x202>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a48      	ldr	r2, [pc, #288]	@ (8002380 <HAL_GPIO_Init+0x2f4>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d013      	beq.n	800228a <HAL_GPIO_Init+0x1fe>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a47      	ldr	r2, [pc, #284]	@ (8002384 <HAL_GPIO_Init+0x2f8>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d00d      	beq.n	8002286 <HAL_GPIO_Init+0x1fa>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a46      	ldr	r2, [pc, #280]	@ (8002388 <HAL_GPIO_Init+0x2fc>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d007      	beq.n	8002282 <HAL_GPIO_Init+0x1f6>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a45      	ldr	r2, [pc, #276]	@ (800238c <HAL_GPIO_Init+0x300>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d101      	bne.n	800227e <HAL_GPIO_Init+0x1f2>
 800227a:	2304      	movs	r3, #4
 800227c:	e008      	b.n	8002290 <HAL_GPIO_Init+0x204>
 800227e:	2307      	movs	r3, #7
 8002280:	e006      	b.n	8002290 <HAL_GPIO_Init+0x204>
 8002282:	2303      	movs	r3, #3
 8002284:	e004      	b.n	8002290 <HAL_GPIO_Init+0x204>
 8002286:	2302      	movs	r3, #2
 8002288:	e002      	b.n	8002290 <HAL_GPIO_Init+0x204>
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <HAL_GPIO_Init+0x204>
 800228e:	2300      	movs	r3, #0
 8002290:	69fa      	ldr	r2, [r7, #28]
 8002292:	f002 0203 	and.w	r2, r2, #3
 8002296:	0092      	lsls	r2, r2, #2
 8002298:	4093      	lsls	r3, r2
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022a0:	4935      	ldr	r1, [pc, #212]	@ (8002378 <HAL_GPIO_Init+0x2ec>)
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	089b      	lsrs	r3, r3, #2
 80022a6:	3302      	adds	r3, #2
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ae:	4b38      	ldr	r3, [pc, #224]	@ (8002390 <HAL_GPIO_Init+0x304>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	43db      	mvns	r3, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4013      	ands	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022d2:	4a2f      	ldr	r2, [pc, #188]	@ (8002390 <HAL_GPIO_Init+0x304>)
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002390 <HAL_GPIO_Init+0x304>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022fc:	4a24      	ldr	r2, [pc, #144]	@ (8002390 <HAL_GPIO_Init+0x304>)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002302:	4b23      	ldr	r3, [pc, #140]	@ (8002390 <HAL_GPIO_Init+0x304>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	43db      	mvns	r3, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4013      	ands	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002326:	4a1a      	ldr	r2, [pc, #104]	@ (8002390 <HAL_GPIO_Init+0x304>)
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800232c:	4b18      	ldr	r3, [pc, #96]	@ (8002390 <HAL_GPIO_Init+0x304>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002350:	4a0f      	ldr	r2, [pc, #60]	@ (8002390 <HAL_GPIO_Init+0x304>)
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3301      	adds	r3, #1
 800235a:	61fb      	str	r3, [r7, #28]
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	2b0f      	cmp	r3, #15
 8002360:	f67f aea2 	bls.w	80020a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002364:	bf00      	nop
 8002366:	bf00      	nop
 8002368:	3724      	adds	r7, #36	@ 0x24
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40023800 	.word	0x40023800
 8002378:	40013800 	.word	0x40013800
 800237c:	40020000 	.word	0x40020000
 8002380:	40020400 	.word	0x40020400
 8002384:	40020800 	.word	0x40020800
 8002388:	40020c00 	.word	0x40020c00
 800238c:	40021000 	.word	0x40021000
 8002390:	40013c00 	.word	0x40013c00

08002394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	807b      	strh	r3, [r7, #2]
 80023a0:	4613      	mov	r3, r2
 80023a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023a4:	787b      	ldrb	r3, [r7, #1]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023aa:	887a      	ldrh	r2, [r7, #2]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023b0:	e003      	b.n	80023ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023b2:	887b      	ldrh	r3, [r7, #2]
 80023b4:	041a      	lsls	r2, r3, #16
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	619a      	str	r2, [r3, #24]
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80023d2:	4b08      	ldr	r3, [pc, #32]	@ (80023f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023d4:	695a      	ldr	r2, [r3, #20]
 80023d6:	88fb      	ldrh	r3, [r7, #6]
 80023d8:	4013      	ands	r3, r2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d006      	beq.n	80023ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023de:	4a05      	ldr	r2, [pc, #20]	@ (80023f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe f86e 	bl	80004c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80023ec:	bf00      	nop
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40013c00 	.word	0x40013c00

080023f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e12b      	b.n	8002662 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d106      	bne.n	8002424 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7fe fba4 	bl	8000b6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2224      	movs	r2, #36	@ 0x24
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 0201 	bic.w	r2, r2, #1
 800243a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800244a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800245a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800245c:	f002 fdc2 	bl	8004fe4 <HAL_RCC_GetPCLK1Freq>
 8002460:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	4a81      	ldr	r2, [pc, #516]	@ (800266c <HAL_I2C_Init+0x274>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d807      	bhi.n	800247c <HAL_I2C_Init+0x84>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4a80      	ldr	r2, [pc, #512]	@ (8002670 <HAL_I2C_Init+0x278>)
 8002470:	4293      	cmp	r3, r2
 8002472:	bf94      	ite	ls
 8002474:	2301      	movls	r3, #1
 8002476:	2300      	movhi	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	e006      	b.n	800248a <HAL_I2C_Init+0x92>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4a7d      	ldr	r2, [pc, #500]	@ (8002674 <HAL_I2C_Init+0x27c>)
 8002480:	4293      	cmp	r3, r2
 8002482:	bf94      	ite	ls
 8002484:	2301      	movls	r3, #1
 8002486:	2300      	movhi	r3, #0
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e0e7      	b.n	8002662 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	4a78      	ldr	r2, [pc, #480]	@ (8002678 <HAL_I2C_Init+0x280>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	0c9b      	lsrs	r3, r3, #18
 800249c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	4a6a      	ldr	r2, [pc, #424]	@ (800266c <HAL_I2C_Init+0x274>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d802      	bhi.n	80024cc <HAL_I2C_Init+0xd4>
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	3301      	adds	r3, #1
 80024ca:	e009      	b.n	80024e0 <HAL_I2C_Init+0xe8>
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80024d2:	fb02 f303 	mul.w	r3, r2, r3
 80024d6:	4a69      	ldr	r2, [pc, #420]	@ (800267c <HAL_I2C_Init+0x284>)
 80024d8:	fba2 2303 	umull	r2, r3, r2, r3
 80024dc:	099b      	lsrs	r3, r3, #6
 80024de:	3301      	adds	r3, #1
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	430b      	orrs	r3, r1
 80024e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80024f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	495c      	ldr	r1, [pc, #368]	@ (800266c <HAL_I2C_Init+0x274>)
 80024fc:	428b      	cmp	r3, r1
 80024fe:	d819      	bhi.n	8002534 <HAL_I2C_Init+0x13c>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	1e59      	subs	r1, r3, #1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	fbb1 f3f3 	udiv	r3, r1, r3
 800250e:	1c59      	adds	r1, r3, #1
 8002510:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002514:	400b      	ands	r3, r1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <HAL_I2C_Init+0x138>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1e59      	subs	r1, r3, #1
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	fbb1 f3f3 	udiv	r3, r1, r3
 8002528:	3301      	adds	r3, #1
 800252a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800252e:	e051      	b.n	80025d4 <HAL_I2C_Init+0x1dc>
 8002530:	2304      	movs	r3, #4
 8002532:	e04f      	b.n	80025d4 <HAL_I2C_Init+0x1dc>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d111      	bne.n	8002560 <HAL_I2C_Init+0x168>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	1e58      	subs	r0, r3, #1
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6859      	ldr	r1, [r3, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	440b      	add	r3, r1
 800254a:	fbb0 f3f3 	udiv	r3, r0, r3
 800254e:	3301      	adds	r3, #1
 8002550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002554:	2b00      	cmp	r3, #0
 8002556:	bf0c      	ite	eq
 8002558:	2301      	moveq	r3, #1
 800255a:	2300      	movne	r3, #0
 800255c:	b2db      	uxtb	r3, r3
 800255e:	e012      	b.n	8002586 <HAL_I2C_Init+0x18e>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	1e58      	subs	r0, r3, #1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6859      	ldr	r1, [r3, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	0099      	lsls	r1, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	fbb0 f3f3 	udiv	r3, r0, r3
 8002576:	3301      	adds	r3, #1
 8002578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800257c:	2b00      	cmp	r3, #0
 800257e:	bf0c      	ite	eq
 8002580:	2301      	moveq	r3, #1
 8002582:	2300      	movne	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_I2C_Init+0x196>
 800258a:	2301      	movs	r3, #1
 800258c:	e022      	b.n	80025d4 <HAL_I2C_Init+0x1dc>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10e      	bne.n	80025b4 <HAL_I2C_Init+0x1bc>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1e58      	subs	r0, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6859      	ldr	r1, [r3, #4]
 800259e:	460b      	mov	r3, r1
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	440b      	add	r3, r1
 80025a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80025a8:	3301      	adds	r3, #1
 80025aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025b2:	e00f      	b.n	80025d4 <HAL_I2C_Init+0x1dc>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	1e58      	subs	r0, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6859      	ldr	r1, [r3, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	0099      	lsls	r1, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ca:	3301      	adds	r3, #1
 80025cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	6809      	ldr	r1, [r1, #0]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69da      	ldr	r2, [r3, #28]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002602:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6911      	ldr	r1, [r2, #16]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	68d2      	ldr	r2, [r2, #12]
 800260e:	4311      	orrs	r1, r2
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	430b      	orrs	r3, r1
 8002616:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	695a      	ldr	r2, [r3, #20]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0201 	orr.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2220      	movs	r2, #32
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	000186a0 	.word	0x000186a0
 8002670:	001e847f 	.word	0x001e847f
 8002674:	003d08ff 	.word	0x003d08ff
 8002678:	431bde83 	.word	0x431bde83
 800267c:	10624dd3 	.word	0x10624dd3

08002680 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002692:	2b80      	cmp	r3, #128	@ 0x80
 8002694:	d103      	bne.n	800269e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2200      	movs	r2, #0
 800269c:	611a      	str	r2, [r3, #16]
  }
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
	...

080026ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b088      	sub	sp, #32
 80026b0:	af02      	add	r7, sp, #8
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	607a      	str	r2, [r7, #4]
 80026b6:	461a      	mov	r2, r3
 80026b8:	460b      	mov	r3, r1
 80026ba:	817b      	strh	r3, [r7, #10]
 80026bc:	4613      	mov	r3, r2
 80026be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026c0:	f7fe ffa4 	bl	800160c <HAL_GetTick>
 80026c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b20      	cmp	r3, #32
 80026d0:	f040 80e0 	bne.w	8002894 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	2319      	movs	r3, #25
 80026da:	2201      	movs	r2, #1
 80026dc:	4970      	ldr	r1, [pc, #448]	@ (80028a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f001 fdea 	bl	80042b8 <I2C_WaitOnFlagUntilTimeout>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80026ea:	2302      	movs	r3, #2
 80026ec:	e0d3      	b.n	8002896 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <HAL_I2C_Master_Transmit+0x50>
 80026f8:	2302      	movs	r3, #2
 80026fa:	e0cc      	b.n	8002896 <HAL_I2C_Master_Transmit+0x1ea>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b01      	cmp	r3, #1
 8002710:	d007      	beq.n	8002722 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 0201 	orr.w	r2, r2, #1
 8002720:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002730:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2221      	movs	r2, #33	@ 0x21
 8002736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2210      	movs	r2, #16
 800273e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	893a      	ldrh	r2, [r7, #8]
 8002752:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002758:	b29a      	uxth	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4a50      	ldr	r2, [pc, #320]	@ (80028a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002762:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002764:	8979      	ldrh	r1, [r7, #10]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	6a3a      	ldr	r2, [r7, #32]
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f001 fc7a 	bl	8004064 <I2C_MasterRequestWrite>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e08d      	b.n	8002896 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002790:	e066      	b.n	8002860 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	6a39      	ldr	r1, [r7, #32]
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f001 fea8 	bl	80044ec <I2C_WaitOnTXEFlagUntilTimeout>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00d      	beq.n	80027be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d107      	bne.n	80027ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e06b      	b.n	8002896 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c2:	781a      	ldrb	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d8:	b29b      	uxth	r3, r3
 80027da:	3b01      	subs	r3, #1
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d11b      	bne.n	8002834 <HAL_I2C_Master_Transmit+0x188>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002800:	2b00      	cmp	r3, #0
 8002802:	d017      	beq.n	8002834 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002808:	781a      	ldrb	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800281e:	b29b      	uxth	r3, r3
 8002820:	3b01      	subs	r3, #1
 8002822:	b29a      	uxth	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282c:	3b01      	subs	r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	6a39      	ldr	r1, [r7, #32]
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f001 fe9f 	bl	800457c <I2C_WaitOnBTFFlagUntilTimeout>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00d      	beq.n	8002860 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002848:	2b04      	cmp	r3, #4
 800284a:	d107      	bne.n	800285c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800285a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e01a      	b.n	8002896 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002864:	2b00      	cmp	r3, #0
 8002866:	d194      	bne.n	8002792 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002876:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	e000      	b.n	8002896 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002894:	2302      	movs	r3, #2
  }
}
 8002896:	4618      	mov	r0, r3
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	00100002 	.word	0x00100002
 80028a4:	ffff0000 	.word	0xffff0000

080028a8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80028c8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028d0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
 80028d4:	2b10      	cmp	r3, #16
 80028d6:	d003      	beq.n	80028e0 <HAL_I2C_EV_IRQHandler+0x38>
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	2b40      	cmp	r3, #64	@ 0x40
 80028dc:	f040 80b1 	bne.w	8002a42 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10d      	bne.n	8002916 <HAL_I2C_EV_IRQHandler+0x6e>
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002900:	d003      	beq.n	800290a <HAL_I2C_EV_IRQHandler+0x62>
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002908:	d101      	bne.n	800290e <HAL_I2C_EV_IRQHandler+0x66>
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <HAL_I2C_EV_IRQHandler+0x68>
 800290e:	2300      	movs	r3, #0
 8002910:	2b01      	cmp	r3, #1
 8002912:	f000 8114 	beq.w	8002b3e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00b      	beq.n	8002938 <HAL_I2C_EV_IRQHandler+0x90>
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002926:	2b00      	cmp	r3, #0
 8002928:	d006      	beq.n	8002938 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f001 fecf 	bl	80046ce <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 fd7a 	bl	800342a <I2C_Master_SB>
 8002936:	e083      	b.n	8002a40 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d008      	beq.n	8002954 <HAL_I2C_EV_IRQHandler+0xac>
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 fdf2 	bl	8003536 <I2C_Master_ADD10>
 8002952:	e075      	b.n	8002a40 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d008      	beq.n	8002970 <HAL_I2C_EV_IRQHandler+0xc8>
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002964:	2b00      	cmp	r3, #0
 8002966:	d003      	beq.n	8002970 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 fe0e 	bl	800358a <I2C_Master_ADDR>
 800296e:	e067      	b.n	8002a40 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	2b00      	cmp	r3, #0
 8002978:	d036      	beq.n	80029e8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002984:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002988:	f000 80db 	beq.w	8002b42 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00d      	beq.n	80029b2 <HAL_I2C_EV_IRQHandler+0x10a>
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <HAL_I2C_EV_IRQHandler+0x10a>
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d103      	bne.n	80029b2 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f9d6 	bl	8002d5c <I2C_MasterTransmit_TXE>
 80029b0:	e046      	b.n	8002a40 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80c2 	beq.w	8002b42 <HAL_I2C_EV_IRQHandler+0x29a>
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 80bc 	beq.w	8002b42 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80029ca:	7bbb      	ldrb	r3, [r7, #14]
 80029cc:	2b21      	cmp	r3, #33	@ 0x21
 80029ce:	d103      	bne.n	80029d8 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 fa5f 	bl	8002e94 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029d6:	e0b4      	b.n	8002b42 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
 80029da:	2b40      	cmp	r3, #64	@ 0x40
 80029dc:	f040 80b1 	bne.w	8002b42 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 facd 	bl	8002f80 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029e6:	e0ac      	b.n	8002b42 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029f6:	f000 80a4 	beq.w	8002b42 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00d      	beq.n	8002a20 <HAL_I2C_EV_IRQHandler+0x178>
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d008      	beq.n	8002a20 <HAL_I2C_EV_IRQHandler+0x178>
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d103      	bne.n	8002a20 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 fb49 	bl	80030b0 <I2C_MasterReceive_RXNE>
 8002a1e:	e00f      	b.n	8002a40 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f003 0304 	and.w	r3, r3, #4
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 808b 	beq.w	8002b42 <HAL_I2C_EV_IRQHandler+0x29a>
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 8085 	beq.w	8002b42 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 fc01 	bl	8003240 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a3e:	e080      	b.n	8002b42 <HAL_I2C_EV_IRQHandler+0x29a>
 8002a40:	e07f      	b.n	8002b42 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d004      	beq.n	8002a54 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	61fb      	str	r3, [r7, #28]
 8002a52:	e007      	b.n	8002a64 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d011      	beq.n	8002a92 <HAL_I2C_EV_IRQHandler+0x1ea>
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00c      	beq.n	8002a92 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002a88:	69b9      	ldr	r1, [r7, #24]
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 ffcc 	bl	8003a28 <I2C_Slave_ADDR>
 8002a90:	e05a      	b.n	8002b48 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	f003 0310 	and.w	r3, r3, #16
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d008      	beq.n	8002aae <HAL_I2C_EV_IRQHandler+0x206>
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f001 f806 	bl	8003ab8 <I2C_Slave_STOPF>
 8002aac:	e04c      	b.n	8002b48 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002aae:	7bbb      	ldrb	r3, [r7, #14]
 8002ab0:	2b21      	cmp	r3, #33	@ 0x21
 8002ab2:	d002      	beq.n	8002aba <HAL_I2C_EV_IRQHandler+0x212>
 8002ab4:	7bbb      	ldrb	r3, [r7, #14]
 8002ab6:	2b29      	cmp	r3, #41	@ 0x29
 8002ab8:	d120      	bne.n	8002afc <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00d      	beq.n	8002ae0 <HAL_I2C_EV_IRQHandler+0x238>
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d008      	beq.n	8002ae0 <HAL_I2C_EV_IRQHandler+0x238>
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d103      	bne.n	8002ae0 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 fee7 	bl	80038ac <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ade:	e032      	b.n	8002b46 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f003 0304 	and.w	r3, r3, #4
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d02d      	beq.n	8002b46 <HAL_I2C_EV_IRQHandler+0x29e>
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d028      	beq.n	8002b46 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 ff16 	bl	8003926 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002afa:	e024      	b.n	8002b46 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00d      	beq.n	8002b22 <HAL_I2C_EV_IRQHandler+0x27a>
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <HAL_I2C_EV_IRQHandler+0x27a>
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f003 0304 	and.w	r3, r3, #4
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d103      	bne.n	8002b22 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 ff24 	bl	8003968 <I2C_SlaveReceive_RXNE>
 8002b20:	e012      	b.n	8002b48 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00d      	beq.n	8002b48 <HAL_I2C_EV_IRQHandler+0x2a0>
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d008      	beq.n	8002b48 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 ff54 	bl	80039e4 <I2C_SlaveReceive_BTF>
 8002b3c:	e004      	b.n	8002b48 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002b3e:	bf00      	nop
 8002b40:	e002      	b.n	8002b48 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b42:	bf00      	nop
 8002b44:	e000      	b.n	8002b48 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b46:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002b48:	3720      	adds	r7, #32
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b08a      	sub	sp, #40	@ 0x28
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002b66:	2300      	movs	r3, #0
 8002b68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b70:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00d      	beq.n	8002b98 <HAL_I2C_ER_IRQHandler+0x4a>
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d008      	beq.n	8002b98 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002b96:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00d      	beq.n	8002bbe <HAL_I2C_ER_IRQHandler+0x70>
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bae:	f043 0302 	orr.w	r3, r3, #2
 8002bb2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002bbc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d03e      	beq.n	8002c46 <HAL_I2C_ER_IRQHandler+0xf8>
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d039      	beq.n	8002c46 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8002bd2:	7efb      	ldrb	r3, [r7, #27]
 8002bd4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002be4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bea:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002bec:	7ebb      	ldrb	r3, [r7, #26]
 8002bee:	2b20      	cmp	r3, #32
 8002bf0:	d112      	bne.n	8002c18 <HAL_I2C_ER_IRQHandler+0xca>
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10f      	bne.n	8002c18 <HAL_I2C_ER_IRQHandler+0xca>
 8002bf8:	7cfb      	ldrb	r3, [r7, #19]
 8002bfa:	2b21      	cmp	r3, #33	@ 0x21
 8002bfc:	d008      	beq.n	8002c10 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002bfe:	7cfb      	ldrb	r3, [r7, #19]
 8002c00:	2b29      	cmp	r3, #41	@ 0x29
 8002c02:	d005      	beq.n	8002c10 <HAL_I2C_ER_IRQHandler+0xc2>
 8002c04:	7cfb      	ldrb	r3, [r7, #19]
 8002c06:	2b28      	cmp	r3, #40	@ 0x28
 8002c08:	d106      	bne.n	8002c18 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2b21      	cmp	r3, #33	@ 0x21
 8002c0e:	d103      	bne.n	8002c18 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f001 f881 	bl	8003d18 <I2C_Slave_AF>
 8002c16:	e016      	b.n	8002c46 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c20:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c24:	f043 0304 	orr.w	r3, r3, #4
 8002c28:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002c2a:	7efb      	ldrb	r3, [r7, #27]
 8002c2c:	2b10      	cmp	r3, #16
 8002c2e:	d002      	beq.n	8002c36 <HAL_I2C_ER_IRQHandler+0xe8>
 8002c30:	7efb      	ldrb	r3, [r7, #27]
 8002c32:	2b40      	cmp	r3, #64	@ 0x40
 8002c34:	d107      	bne.n	8002c46 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c44:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00d      	beq.n	8002c6c <HAL_I2C_ER_IRQHandler+0x11e>
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d008      	beq.n	8002c6c <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5c:	f043 0308 	orr.w	r3, r3, #8
 8002c60:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002c6a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d008      	beq.n	8002c84 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f001 f8be 	bl	8003e00 <I2C_ITError>
  }
}
 8002c84:	bf00      	nop
 8002c86:	3728      	adds	r7, #40	@ 0x28
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	70fb      	strb	r3, [r7, #3]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d6a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d72:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d78:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d150      	bne.n	8002e24 <I2C_MasterTransmit_TXE+0xc8>
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
 8002d84:	2b21      	cmp	r3, #33	@ 0x21
 8002d86:	d14d      	bne.n	8002e24 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d01d      	beq.n	8002dca <I2C_MasterTransmit_TXE+0x6e>
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	2b20      	cmp	r3, #32
 8002d92:	d01a      	beq.n	8002dca <I2C_MasterTransmit_TXE+0x6e>
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d9a:	d016      	beq.n	8002dca <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002daa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2211      	movs	r2, #17
 8002db0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff ff62 	bl	8002c8c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002dc8:	e060      	b.n	8002e8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002dd8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002de8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2220      	movs	r2, #32
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b40      	cmp	r3, #64	@ 0x40
 8002e02:	d107      	bne.n	8002e14 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7ff ff7d 	bl	8002d0c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e12:	e03b      	b.n	8002e8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f7ff ff35 	bl	8002c8c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e22:	e033      	b.n	8002e8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
 8002e26:	2b21      	cmp	r3, #33	@ 0x21
 8002e28:	d005      	beq.n	8002e36 <I2C_MasterTransmit_TXE+0xda>
 8002e2a:	7bbb      	ldrb	r3, [r7, #14]
 8002e2c:	2b40      	cmp	r3, #64	@ 0x40
 8002e2e:	d12d      	bne.n	8002e8c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
 8002e32:	2b22      	cmp	r3, #34	@ 0x22
 8002e34:	d12a      	bne.n	8002e8c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d108      	bne.n	8002e52 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e4e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002e50:	e01c      	b.n	8002e8c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b40      	cmp	r3, #64	@ 0x40
 8002e5c:	d103      	bne.n	8002e66 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f88e 	bl	8002f80 <I2C_MemoryTransmit_TXE_BTF>
}
 8002e64:	e012      	b.n	8002e8c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6a:	781a      	ldrb	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e76:	1c5a      	adds	r2, r3, #1
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002e8a:	e7ff      	b.n	8002e8c <I2C_MasterTransmit_TXE+0x130>
 8002e8c:	bf00      	nop
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b21      	cmp	r3, #33	@ 0x21
 8002eac:	d164      	bne.n	8002f78 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d012      	beq.n	8002ede <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ebc:	781a      	ldrb	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec8:	1c5a      	adds	r2, r3, #1
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002edc:	e04c      	b.n	8002f78 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d01d      	beq.n	8002f20 <I2C_MasterTransmit_BTF+0x8c>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2b20      	cmp	r3, #32
 8002ee8:	d01a      	beq.n	8002f20 <I2C_MasterTransmit_BTF+0x8c>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ef0:	d016      	beq.n	8002f20 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f00:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2211      	movs	r2, #17
 8002f06:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7ff feb7 	bl	8002c8c <HAL_I2C_MasterTxCpltCallback>
}
 8002f1e:	e02b      	b.n	8002f78 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f2e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f3e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b40      	cmp	r3, #64	@ 0x40
 8002f58:	d107      	bne.n	8002f6a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff fed2 	bl	8002d0c <HAL_I2C_MemTxCpltCallback>
}
 8002f68:	e006      	b.n	8002f78 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff fe8a 	bl	8002c8c <HAL_I2C_MasterTxCpltCallback>
}
 8002f78:	bf00      	nop
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f8e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d11d      	bne.n	8002fd4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d10b      	bne.n	8002fb8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fb0:	1c9a      	adds	r2, r3, #2
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002fb6:	e077      	b.n	80030a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	121b      	asrs	r3, r3, #8
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002fd2:	e069      	b.n	80030a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d10b      	bne.n	8002ff4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002ff2:	e059      	b.n	80030a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d152      	bne.n	80030a2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
 8002ffe:	2b22      	cmp	r3, #34	@ 0x22
 8003000:	d10d      	bne.n	800301e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003010:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800301c:	e044      	b.n	80030a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003022:	b29b      	uxth	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	d015      	beq.n	8003054 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003028:	7bfb      	ldrb	r3, [r7, #15]
 800302a:	2b21      	cmp	r3, #33	@ 0x21
 800302c:	d112      	bne.n	8003054 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003032:	781a      	ldrb	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303e:	1c5a      	adds	r2, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003048:	b29b      	uxth	r3, r3
 800304a:	3b01      	subs	r3, #1
 800304c:	b29a      	uxth	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003052:	e029      	b.n	80030a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003058:	b29b      	uxth	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d124      	bne.n	80030a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	2b21      	cmp	r3, #33	@ 0x21
 8003062:	d121      	bne.n	80030a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003072:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003082:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2220      	movs	r2, #32
 800308e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7ff fe36 	bl	8002d0c <HAL_I2C_MemTxCpltCallback>
}
 80030a0:	e002      	b.n	80030a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7ff faec 	bl	8002680 <I2C_Flush_DR>
}
 80030a8:	bf00      	nop
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b22      	cmp	r3, #34	@ 0x22
 80030c2:	f040 80b9 	bne.w	8003238 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ca:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	d921      	bls.n	800311e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	691a      	ldr	r2, [r3, #16]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ec:	1c5a      	adds	r2, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b03      	cmp	r3, #3
 8003108:	f040 8096 	bne.w	8003238 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800311a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800311c:	e08c      	b.n	8003238 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003122:	2b02      	cmp	r3, #2
 8003124:	d07f      	beq.n	8003226 <I2C_MasterReceive_RXNE+0x176>
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d002      	beq.n	8003132 <I2C_MasterReceive_RXNE+0x82>
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d179      	bne.n	8003226 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f001 fa6a 	bl	800460c <I2C_WaitOnSTOPRequestThroughIT>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d14c      	bne.n	80031d8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800314c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800315c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	691a      	ldr	r2, [r3, #16]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003170:	1c5a      	adds	r2, r3, #1
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800317a:	b29b      	uxth	r3, r3
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2220      	movs	r2, #32
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b40      	cmp	r3, #64	@ 0x40
 8003196:	d10a      	bne.n	80031ae <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7ff fdba 	bl	8002d20 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80031ac:	e044      	b.n	8003238 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d002      	beq.n	80031c2 <I2C_MasterReceive_RXNE+0x112>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b20      	cmp	r3, #32
 80031c0:	d103      	bne.n	80031ca <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80031c8:	e002      	b.n	80031d0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2212      	movs	r2, #18
 80031ce:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7ff fd65 	bl	8002ca0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80031d6:	e02f      	b.n	8003238 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80031e6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	691a      	ldr	r2, [r3, #16]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003204:	b29b      	uxth	r3, r3
 8003206:	3b01      	subs	r3, #1
 8003208:	b29a      	uxth	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7ff fd88 	bl	8002d34 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003224:	e008      	b.n	8003238 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003234:	605a      	str	r2, [r3, #4]
}
 8003236:	e7ff      	b.n	8003238 <I2C_MasterReceive_RXNE+0x188>
 8003238:	bf00      	nop
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800324c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003252:	b29b      	uxth	r3, r3
 8003254:	2b04      	cmp	r3, #4
 8003256:	d11b      	bne.n	8003290 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003266:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691a      	ldr	r2, [r3, #16]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003284:	b29b      	uxth	r3, r3
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800328e:	e0c8      	b.n	8003422 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b03      	cmp	r3, #3
 8003298:	d129      	bne.n	80032ee <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032a8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d00a      	beq.n	80032c6 <I2C_MasterReceive_BTF+0x86>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d007      	beq.n	80032c6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032c4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d8:	1c5a      	adds	r2, r3, #1
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80032ec:	e099      	b.n	8003422 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	f040 8081 	bne.w	80033fc <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d002      	beq.n	8003306 <I2C_MasterReceive_BTF+0xc6>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b10      	cmp	r3, #16
 8003304:	d108      	bne.n	8003318 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	e019      	b.n	800334c <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2b04      	cmp	r3, #4
 800331c:	d002      	beq.n	8003324 <I2C_MasterReceive_BTF+0xe4>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b02      	cmp	r3, #2
 8003322:	d108      	bne.n	8003336 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	e00a      	b.n	800334c <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2b10      	cmp	r3, #16
 800333a:	d007      	beq.n	800334c <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800334a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	691a      	ldr	r2, [r3, #16]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335e:	1c5a      	adds	r2, r3, #1
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003368:	b29b      	uxth	r3, r3
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338e:	b29b      	uxth	r3, r3
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80033a6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b40      	cmp	r3, #64	@ 0x40
 80033ba:	d10a      	bne.n	80033d2 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff fca8 	bl	8002d20 <HAL_I2C_MemRxCpltCallback>
}
 80033d0:	e027      	b.n	8003422 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d002      	beq.n	80033e6 <I2C_MasterReceive_BTF+0x1a6>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b20      	cmp	r3, #32
 80033e4:	d103      	bne.n	80033ee <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80033ec:	e002      	b.n	80033f4 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2212      	movs	r2, #18
 80033f2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff fc53 	bl	8002ca0 <HAL_I2C_MasterRxCpltCallback>
}
 80033fa:	e012      	b.n	8003422 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691a      	ldr	r2, [r3, #16]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003418:	b29b      	uxth	r3, r3
 800341a:	3b01      	subs	r3, #1
 800341c:	b29a      	uxth	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003422:	bf00      	nop
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b40      	cmp	r3, #64	@ 0x40
 800343c:	d117      	bne.n	800346e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003442:	2b00      	cmp	r3, #0
 8003444:	d109      	bne.n	800345a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344a:	b2db      	uxtb	r3, r3
 800344c:	461a      	mov	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003456:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003458:	e067      	b.n	800352a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345e:	b2db      	uxtb	r3, r3
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	b2da      	uxtb	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	611a      	str	r2, [r3, #16]
}
 800346c:	e05d      	b.n	800352a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003476:	d133      	bne.n	80034e0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b21      	cmp	r3, #33	@ 0x21
 8003482:	d109      	bne.n	8003498 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003488:	b2db      	uxtb	r3, r3
 800348a:	461a      	mov	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003494:	611a      	str	r2, [r3, #16]
 8003496:	e008      	b.n	80034aa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349c:	b2db      	uxtb	r3, r3
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d004      	beq.n	80034bc <I2C_Master_SB+0x92>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d108      	bne.n	80034ce <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d032      	beq.n	800352a <I2C_Master_SB+0x100>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d02d      	beq.n	800352a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034dc:	605a      	str	r2, [r3, #4]
}
 80034de:	e024      	b.n	800352a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10e      	bne.n	8003506 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	11db      	asrs	r3, r3, #7
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	f003 0306 	and.w	r3, r3, #6
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	f063 030f 	orn	r3, r3, #15
 80034fc:	b2da      	uxtb	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	611a      	str	r2, [r3, #16]
}
 8003504:	e011      	b.n	800352a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800350a:	2b01      	cmp	r3, #1
 800350c:	d10d      	bne.n	800352a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003512:	b29b      	uxth	r3, r3
 8003514:	11db      	asrs	r3, r3, #7
 8003516:	b2db      	uxtb	r3, r3
 8003518:	f003 0306 	and.w	r3, r3, #6
 800351c:	b2db      	uxtb	r3, r3
 800351e:	f063 030e 	orn	r3, r3, #14
 8003522:	b2da      	uxtb	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	611a      	str	r2, [r3, #16]
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003542:	b2da      	uxtb	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800354e:	2b00      	cmp	r3, #0
 8003550:	d004      	beq.n	800355c <I2C_Master_ADD10+0x26>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003558:	2b00      	cmp	r3, #0
 800355a:	d108      	bne.n	800356e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00c      	beq.n	800357e <I2C_Master_ADD10+0x48>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800356a:	2b00      	cmp	r3, #0
 800356c:	d007      	beq.n	800357e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800357c:	605a      	str	r2, [r3, #4]
  }
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800358a:	b480      	push	{r7}
 800358c:	b091      	sub	sp, #68	@ 0x44
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003598:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b22      	cmp	r3, #34	@ 0x22
 80035b2:	f040 8169 	bne.w	8003888 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10f      	bne.n	80035de <I2C_Master_ADDR+0x54>
 80035be:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80035c2:	2b40      	cmp	r3, #64	@ 0x40
 80035c4:	d10b      	bne.n	80035de <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035c6:	2300      	movs	r3, #0
 80035c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80035da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035dc:	e160      	b.n	80038a0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d11d      	bne.n	8003622 <I2C_Master_ADDR+0x98>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80035ee:	d118      	bne.n	8003622 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f0:	2300      	movs	r3, #0
 80035f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003614:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003620:	e13e      	b.n	80038a0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003626:	b29b      	uxth	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	d113      	bne.n	8003654 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800362c:	2300      	movs	r3, #0
 800362e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003640:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	e115      	b.n	8003880 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003658:	b29b      	uxth	r3, r3
 800365a:	2b01      	cmp	r3, #1
 800365c:	f040 808a 	bne.w	8003774 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003662:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003666:	d137      	bne.n	80036d8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003676:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003682:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003686:	d113      	bne.n	80036b0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003696:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003698:	2300      	movs	r3, #0
 800369a:	627b      	str	r3, [r7, #36]	@ 0x24
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80036ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ae:	e0e7      	b.n	8003880 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b0:	2300      	movs	r3, #0
 80036b2:	623b      	str	r3, [r7, #32]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	623b      	str	r3, [r7, #32]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	623b      	str	r3, [r7, #32]
 80036c4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	e0d3      	b.n	8003880 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80036d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d02e      	beq.n	800373c <I2C_Master_ADDR+0x1b2>
 80036de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036e0:	2b20      	cmp	r3, #32
 80036e2:	d02b      	beq.n	800373c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80036e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036e6:	2b12      	cmp	r3, #18
 80036e8:	d102      	bne.n	80036f0 <I2C_Master_ADDR+0x166>
 80036ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d125      	bne.n	800373c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80036f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d00e      	beq.n	8003714 <I2C_Master_ADDR+0x18a>
 80036f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d00b      	beq.n	8003714 <I2C_Master_ADDR+0x18a>
 80036fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036fe:	2b10      	cmp	r3, #16
 8003700:	d008      	beq.n	8003714 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	e007      	b.n	8003724 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003722:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003724:	2300      	movs	r3, #0
 8003726:	61fb      	str	r3, [r7, #28]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	61fb      	str	r3, [r7, #28]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	61fb      	str	r3, [r7, #28]
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	e0a1      	b.n	8003880 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800374a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800374c:	2300      	movs	r3, #0
 800374e:	61bb      	str	r3, [r7, #24]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	61bb      	str	r3, [r7, #24]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	61bb      	str	r3, [r7, #24]
 8003760:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	e085      	b.n	8003880 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003778:	b29b      	uxth	r3, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d14d      	bne.n	800381a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800377e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003780:	2b04      	cmp	r3, #4
 8003782:	d016      	beq.n	80037b2 <I2C_Master_ADDR+0x228>
 8003784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003786:	2b02      	cmp	r3, #2
 8003788:	d013      	beq.n	80037b2 <I2C_Master_ADDR+0x228>
 800378a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800378c:	2b10      	cmp	r3, #16
 800378e:	d010      	beq.n	80037b2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800379e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	e007      	b.n	80037c2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80037c0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037d0:	d117      	bne.n	8003802 <I2C_Master_ADDR+0x278>
 80037d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80037d8:	d00b      	beq.n	80037f2 <I2C_Master_ADDR+0x268>
 80037da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d008      	beq.n	80037f2 <I2C_Master_ADDR+0x268>
 80037e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037e2:	2b08      	cmp	r3, #8
 80037e4:	d005      	beq.n	80037f2 <I2C_Master_ADDR+0x268>
 80037e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037e8:	2b10      	cmp	r3, #16
 80037ea:	d002      	beq.n	80037f2 <I2C_Master_ADDR+0x268>
 80037ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ee:	2b20      	cmp	r3, #32
 80037f0:	d107      	bne.n	8003802 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003800:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003802:	2300      	movs	r3, #0
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	617b      	str	r3, [r7, #20]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	e032      	b.n	8003880 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003828:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003834:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003838:	d117      	bne.n	800386a <I2C_Master_ADDR+0x2e0>
 800383a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800383c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003840:	d00b      	beq.n	800385a <I2C_Master_ADDR+0x2d0>
 8003842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003844:	2b01      	cmp	r3, #1
 8003846:	d008      	beq.n	800385a <I2C_Master_ADDR+0x2d0>
 8003848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800384a:	2b08      	cmp	r3, #8
 800384c:	d005      	beq.n	800385a <I2C_Master_ADDR+0x2d0>
 800384e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003850:	2b10      	cmp	r3, #16
 8003852:	d002      	beq.n	800385a <I2C_Master_ADDR+0x2d0>
 8003854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003856:	2b20      	cmp	r3, #32
 8003858:	d107      	bne.n	800386a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003868:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800386a:	2300      	movs	r3, #0
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003886:	e00b      	b.n	80038a0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003888:	2300      	movs	r3, #0
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	68fb      	ldr	r3, [r7, #12]
}
 800389e:	e7ff      	b.n	80038a0 <I2C_Master_ADDR+0x316>
 80038a0:	bf00      	nop
 80038a2:	3744      	adds	r7, #68	@ 0x44
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038ba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d02b      	beq.n	800391e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ca:	781a      	ldrb	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d114      	bne.n	800391e <I2C_SlaveTransmit_TXE+0x72>
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	2b29      	cmp	r3, #41	@ 0x29
 80038f8:	d111      	bne.n	800391e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003908:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2221      	movs	r2, #33	@ 0x21
 800390e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2228      	movs	r2, #40	@ 0x28
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7ff f9cb 	bl	8002cb4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800391e:	bf00      	nop
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d011      	beq.n	800395c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393c:	781a      	ldrb	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003952:	b29b      	uxth	r3, r3
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003976:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800397c:	b29b      	uxth	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d02c      	beq.n	80039dc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d114      	bne.n	80039dc <I2C_SlaveReceive_RXNE+0x74>
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
 80039b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80039b6:	d111      	bne.n	80039dc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039c6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2222      	movs	r2, #34	@ 0x22
 80039cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2228      	movs	r2, #40	@ 0x28
 80039d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7ff f976 	bl	8002cc8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80039dc:	bf00      	nop
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d012      	beq.n	8003a1c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a00:	b2d2      	uxtb	r2, r2
 8003a02:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003a32:	2300      	movs	r3, #0
 8003a34:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003a42:	2b28      	cmp	r3, #40	@ 0x28
 8003a44:	d125      	bne.n	8003a92 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a54:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003a60:	2301      	movs	r3, #1
 8003a62:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d103      	bne.n	8003a76 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	81bb      	strh	r3, [r7, #12]
 8003a74:	e002      	b.n	8003a7c <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003a84:	89ba      	ldrh	r2, [r7, #12]
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
 8003a88:	4619      	mov	r1, r3
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7ff f926 	bl	8002cdc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003a90:	e00e      	b.n	8003ab0 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a92:	2300      	movs	r3, #0
 8003a94:	60bb      	str	r3, [r7, #8]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	60bb      	str	r3, [r7, #8]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003ab0:	bf00      	nop
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ac6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ad6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60bb      	str	r3, [r7, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	60bb      	str	r3, [r7, #8]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0201 	orr.w	r2, r2, #1
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b04:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b14:	d172      	bne.n	8003bfc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
 8003b18:	2b22      	cmp	r3, #34	@ 0x22
 8003b1a:	d002      	beq.n	8003b22 <I2C_Slave_STOPF+0x6a>
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
 8003b1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b20:	d135      	bne.n	8003b8e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3e:	f043 0204 	orr.w	r2, r3, #4
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b54:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fe fa87 	bl	800206e <HAL_DMA_GetState>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d049      	beq.n	8003bfa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b6a:	4a69      	ldr	r2, [pc, #420]	@ (8003d10 <I2C_Slave_STOPF+0x258>)
 8003b6c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fe fa59 	bl	800202a <HAL_DMA_Abort_IT>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d03d      	beq.n	8003bfa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003b88:	4610      	mov	r0, r2
 8003b8a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b8c:	e035      	b.n	8003bfa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d005      	beq.n	8003bb2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003baa:	f043 0204 	orr.w	r2, r3, #4
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bc0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fe fa51 	bl	800206e <HAL_DMA_GetState>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d014      	beq.n	8003bfc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bd6:	4a4e      	ldr	r2, [pc, #312]	@ (8003d10 <I2C_Slave_STOPF+0x258>)
 8003bd8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fe fa23 	bl	800202a <HAL_DMA_Abort_IT>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d008      	beq.n	8003bfc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	4798      	blx	r3
 8003bf8:	e000      	b.n	8003bfc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003bfa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d03e      	beq.n	8003c84 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d112      	bne.n	8003c3a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691a      	ldr	r2, [r3, #16]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c44:	2b40      	cmp	r3, #64	@ 0x40
 8003c46:	d112      	bne.n	8003c6e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691a      	ldr	r2, [r3, #16]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d005      	beq.n	8003c84 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7c:	f043 0204 	orr.w	r2, r3, #4
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 f8b7 	bl	8003e00 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003c92:	e039      	b.n	8003d08 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003c94:	7bfb      	ldrb	r3, [r7, #15]
 8003c96:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c98:	d109      	bne.n	8003cae <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2228      	movs	r2, #40	@ 0x28
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7ff f80d 	bl	8002cc8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b28      	cmp	r3, #40	@ 0x28
 8003cb8:	d111      	bne.n	8003cde <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a15      	ldr	r2, [pc, #84]	@ (8003d14 <I2C_Slave_STOPF+0x25c>)
 8003cbe:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7ff f80e 	bl	8002cf8 <HAL_I2C_ListenCpltCallback>
}
 8003cdc:	e014      	b.n	8003d08 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce2:	2b22      	cmp	r3, #34	@ 0x22
 8003ce4:	d002      	beq.n	8003cec <I2C_Slave_STOPF+0x234>
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
 8003ce8:	2b22      	cmp	r3, #34	@ 0x22
 8003cea:	d10d      	bne.n	8003d08 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7fe ffe0 	bl	8002cc8 <HAL_I2C_SlaveRxCpltCallback>
}
 8003d08:	bf00      	nop
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	08004169 	.word	0x08004169
 8003d14:	ffff0000 	.word	0xffff0000

08003d18 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d26:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d002      	beq.n	8003d3a <I2C_Slave_AF+0x22>
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	d129      	bne.n	8003d8e <I2C_Slave_AF+0x76>
 8003d3a:	7bfb      	ldrb	r3, [r7, #15]
 8003d3c:	2b28      	cmp	r3, #40	@ 0x28
 8003d3e:	d126      	bne.n	8003d8e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a2e      	ldr	r2, [pc, #184]	@ (8003dfc <I2C_Slave_AF+0xe4>)
 8003d44:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d54:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d5e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d6e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7fe ffb6 	bl	8002cf8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003d8c:	e031      	b.n	8003df2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
 8003d90:	2b21      	cmp	r3, #33	@ 0x21
 8003d92:	d129      	bne.n	8003de8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a19      	ldr	r2, [pc, #100]	@ (8003dfc <I2C_Slave_AF+0xe4>)
 8003d98:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2221      	movs	r2, #33	@ 0x21
 8003d9e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003dbe:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003dc8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dd8:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fe fc50 	bl	8002680 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7fe ff67 	bl	8002cb4 <HAL_I2C_SlaveTxCpltCallback>
}
 8003de6:	e004      	b.n	8003df2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003df0:	615a      	str	r2, [r3, #20]
}
 8003df2:	bf00      	nop
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	ffff0000 	.word	0xffff0000

08003e00 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e0e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e16:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003e18:	7bbb      	ldrb	r3, [r7, #14]
 8003e1a:	2b10      	cmp	r3, #16
 8003e1c:	d002      	beq.n	8003e24 <I2C_ITError+0x24>
 8003e1e:	7bbb      	ldrb	r3, [r7, #14]
 8003e20:	2b40      	cmp	r3, #64	@ 0x40
 8003e22:	d10a      	bne.n	8003e3a <I2C_ITError+0x3a>
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
 8003e26:	2b22      	cmp	r3, #34	@ 0x22
 8003e28:	d107      	bne.n	8003e3a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e38:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003e40:	2b28      	cmp	r3, #40	@ 0x28
 8003e42:	d107      	bne.n	8003e54 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2228      	movs	r2, #40	@ 0x28
 8003e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003e52:	e015      	b.n	8003e80 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e62:	d00a      	beq.n	8003e7a <I2C_ITError+0x7a>
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	2b60      	cmp	r3, #96	@ 0x60
 8003e68:	d007      	beq.n	8003e7a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e8e:	d162      	bne.n	8003f56 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e9e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d020      	beq.n	8003ef0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb2:	4a6a      	ldr	r2, [pc, #424]	@ (800405c <I2C_ITError+0x25c>)
 8003eb4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fe f8b5 	bl	800202a <HAL_DMA_Abort_IT>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 8089 	beq.w	8003fda <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0201 	bic.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ee4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003eea:	4610      	mov	r0, r2
 8003eec:	4798      	blx	r3
 8003eee:	e074      	b.n	8003fda <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef4:	4a59      	ldr	r2, [pc, #356]	@ (800405c <I2C_ITError+0x25c>)
 8003ef6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7fe f894 	bl	800202a <HAL_DMA_Abort_IT>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d068      	beq.n	8003fda <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f12:	2b40      	cmp	r3, #64	@ 0x40
 8003f14:	d10b      	bne.n	8003f2e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f20:	b2d2      	uxtb	r2, r2
 8003f22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0201 	bic.w	r2, r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2220      	movs	r2, #32
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003f50:	4610      	mov	r0, r2
 8003f52:	4798      	blx	r3
 8003f54:	e041      	b.n	8003fda <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b60      	cmp	r3, #96	@ 0x60
 8003f60:	d125      	bne.n	8003fae <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2220      	movs	r2, #32
 8003f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f7a:	2b40      	cmp	r3, #64	@ 0x40
 8003f7c:	d10b      	bne.n	8003f96 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f90:	1c5a      	adds	r2, r3, #1
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0201 	bic.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7fe fece 	bl	8002d48 <HAL_I2C_AbortCpltCallback>
 8003fac:	e015      	b.n	8003fda <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb8:	2b40      	cmp	r3, #64	@ 0x40
 8003fba:	d10b      	bne.n	8003fd4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691a      	ldr	r2, [r3, #16]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7fe fead 	bl	8002d34 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fde:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10e      	bne.n	8004008 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d109      	bne.n	8004008 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d104      	bne.n	8004008 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004004:	2b00      	cmp	r3, #0
 8004006:	d007      	beq.n	8004018 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004016:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800401e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b04      	cmp	r3, #4
 800402a:	d113      	bne.n	8004054 <I2C_ITError+0x254>
 800402c:	7bfb      	ldrb	r3, [r7, #15]
 800402e:	2b28      	cmp	r3, #40	@ 0x28
 8004030:	d110      	bne.n	8004054 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a0a      	ldr	r2, [pc, #40]	@ (8004060 <I2C_ITError+0x260>)
 8004036:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fe fe52 	bl	8002cf8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004054:	bf00      	nop
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	08004169 	.word	0x08004169
 8004060:	ffff0000 	.word	0xffff0000

08004064 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b088      	sub	sp, #32
 8004068:	af02      	add	r7, sp, #8
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	607a      	str	r2, [r7, #4]
 800406e:	603b      	str	r3, [r7, #0]
 8004070:	460b      	mov	r3, r1
 8004072:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004078:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2b08      	cmp	r3, #8
 800407e:	d006      	beq.n	800408e <I2C_MasterRequestWrite+0x2a>
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d003      	beq.n	800408e <I2C_MasterRequestWrite+0x2a>
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800408c:	d108      	bne.n	80040a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	e00b      	b.n	80040b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a4:	2b12      	cmp	r3, #18
 80040a6:	d107      	bne.n	80040b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 f8f7 	bl	80042b8 <I2C_WaitOnFlagUntilTimeout>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00d      	beq.n	80040ec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040de:	d103      	bne.n	80040e8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e035      	b.n	8004158 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040f4:	d108      	bne.n	8004108 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040f6:	897b      	ldrh	r3, [r7, #10]
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	461a      	mov	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004104:	611a      	str	r2, [r3, #16]
 8004106:	e01b      	b.n	8004140 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004108:	897b      	ldrh	r3, [r7, #10]
 800410a:	11db      	asrs	r3, r3, #7
 800410c:	b2db      	uxtb	r3, r3
 800410e:	f003 0306 	and.w	r3, r3, #6
 8004112:	b2db      	uxtb	r3, r3
 8004114:	f063 030f 	orn	r3, r3, #15
 8004118:	b2da      	uxtb	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	490e      	ldr	r1, [pc, #56]	@ (8004160 <I2C_MasterRequestWrite+0xfc>)
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 f940 	bl	80043ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e010      	b.n	8004158 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004136:	897b      	ldrh	r3, [r7, #10]
 8004138:	b2da      	uxtb	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	4907      	ldr	r1, [pc, #28]	@ (8004164 <I2C_MasterRequestWrite+0x100>)
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 f930 	bl	80043ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	00010008 	.word	0x00010008
 8004164:	00010002 	.word	0x00010002

08004168 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004178:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004180:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004182:	4b4b      	ldr	r3, [pc, #300]	@ (80042b0 <I2C_DMAAbort+0x148>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	08db      	lsrs	r3, r3, #3
 8004188:	4a4a      	ldr	r2, [pc, #296]	@ (80042b4 <I2C_DMAAbort+0x14c>)
 800418a:	fba2 2303 	umull	r2, r3, r2, r3
 800418e:	0a1a      	lsrs	r2, r3, #8
 8004190:	4613      	mov	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	00da      	lsls	r2, r3, #3
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d106      	bne.n	80041b0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a6:	f043 0220 	orr.w	r2, r3, #32
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80041ae:	e00a      	b.n	80041c6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041c4:	d0ea      	beq.n	800419c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041d2:	2200      	movs	r2, #0
 80041d4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e2:	2200      	movs	r2, #0
 80041e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041f4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	2200      	movs	r2, #0
 80041fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004208:	2200      	movs	r2, #0
 800420a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004218:	2200      	movs	r2, #0
 800421a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0201 	bic.w	r2, r2, #1
 800422a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b60      	cmp	r3, #96	@ 0x60
 8004236:	d10e      	bne.n	8004256 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	2200      	movs	r2, #0
 800424c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800424e:	6978      	ldr	r0, [r7, #20]
 8004250:	f7fe fd7a 	bl	8002d48 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004254:	e027      	b.n	80042a6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004256:	7cfb      	ldrb	r3, [r7, #19]
 8004258:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800425c:	2b28      	cmp	r3, #40	@ 0x28
 800425e:	d117      	bne.n	8004290 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0201 	orr.w	r2, r2, #1
 800426e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800427e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	2200      	movs	r2, #0
 8004284:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	2228      	movs	r2, #40	@ 0x28
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800428e:	e007      	b.n	80042a0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	2220      	movs	r2, #32
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80042a0:	6978      	ldr	r0, [r7, #20]
 80042a2:	f7fe fd47 	bl	8002d34 <HAL_I2C_ErrorCallback>
}
 80042a6:	bf00      	nop
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	20000000 	.word	0x20000000
 80042b4:	14f8b589 	.word	0x14f8b589

080042b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	4613      	mov	r3, r2
 80042c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042c8:	e048      	b.n	800435c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d0:	d044      	beq.n	800435c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d2:	f7fd f99b 	bl	800160c <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d302      	bcc.n	80042e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d139      	bne.n	800435c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	0c1b      	lsrs	r3, r3, #16
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d10d      	bne.n	800430e <I2C_WaitOnFlagUntilTimeout+0x56>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	43da      	mvns	r2, r3
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	4013      	ands	r3, r2
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	bf0c      	ite	eq
 8004304:	2301      	moveq	r3, #1
 8004306:	2300      	movne	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	461a      	mov	r2, r3
 800430c:	e00c      	b.n	8004328 <I2C_WaitOnFlagUntilTimeout+0x70>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	43da      	mvns	r2, r3
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	4013      	ands	r3, r2
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	bf0c      	ite	eq
 8004320:	2301      	moveq	r3, #1
 8004322:	2300      	movne	r3, #0
 8004324:	b2db      	uxtb	r3, r3
 8004326:	461a      	mov	r2, r3
 8004328:	79fb      	ldrb	r3, [r7, #7]
 800432a:	429a      	cmp	r2, r3
 800432c:	d116      	bne.n	800435c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2220      	movs	r2, #32
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004348:	f043 0220 	orr.w	r2, r3, #32
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e023      	b.n	80043a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	0c1b      	lsrs	r3, r3, #16
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b01      	cmp	r3, #1
 8004364:	d10d      	bne.n	8004382 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	43da      	mvns	r2, r3
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	4013      	ands	r3, r2
 8004372:	b29b      	uxth	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	bf0c      	ite	eq
 8004378:	2301      	moveq	r3, #1
 800437a:	2300      	movne	r3, #0
 800437c:	b2db      	uxtb	r3, r3
 800437e:	461a      	mov	r2, r3
 8004380:	e00c      	b.n	800439c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	43da      	mvns	r2, r3
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	4013      	ands	r3, r2
 800438e:	b29b      	uxth	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	bf0c      	ite	eq
 8004394:	2301      	moveq	r3, #1
 8004396:	2300      	movne	r3, #0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	461a      	mov	r2, r3
 800439c:	79fb      	ldrb	r3, [r7, #7]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d093      	beq.n	80042ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043ba:	e071      	b.n	80044a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043ca:	d123      	bne.n	8004414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004400:	f043 0204 	orr.w	r2, r3, #4
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e067      	b.n	80044e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441a:	d041      	beq.n	80044a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800441c:	f7fd f8f6 	bl	800160c <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	429a      	cmp	r2, r3
 800442a:	d302      	bcc.n	8004432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d136      	bne.n	80044a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	0c1b      	lsrs	r3, r3, #16
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b01      	cmp	r3, #1
 800443a:	d10c      	bne.n	8004456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	43da      	mvns	r2, r3
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	4013      	ands	r3, r2
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	bf14      	ite	ne
 800444e:	2301      	movne	r3, #1
 8004450:	2300      	moveq	r3, #0
 8004452:	b2db      	uxtb	r3, r3
 8004454:	e00b      	b.n	800446e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	43da      	mvns	r2, r3
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	4013      	ands	r3, r2
 8004462:	b29b      	uxth	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	bf14      	ite	ne
 8004468:	2301      	movne	r3, #1
 800446a:	2300      	moveq	r3, #0
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d016      	beq.n	80044a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448c:	f043 0220 	orr.w	r2, r3, #32
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e021      	b.n	80044e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	0c1b      	lsrs	r3, r3, #16
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d10c      	bne.n	80044c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	43da      	mvns	r2, r3
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	4013      	ands	r3, r2
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	bf14      	ite	ne
 80044bc:	2301      	movne	r3, #1
 80044be:	2300      	moveq	r3, #0
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	e00b      	b.n	80044dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	43da      	mvns	r2, r3
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	4013      	ands	r3, r2
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	bf14      	ite	ne
 80044d6:	2301      	movne	r3, #1
 80044d8:	2300      	moveq	r3, #0
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f47f af6d 	bne.w	80043bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044f8:	e034      	b.n	8004564 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 f8b8 	bl	8004670 <I2C_IsAcknowledgeFailed>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e034      	b.n	8004574 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004510:	d028      	beq.n	8004564 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004512:	f7fd f87b 	bl	800160c <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	429a      	cmp	r2, r3
 8004520:	d302      	bcc.n	8004528 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d11d      	bne.n	8004564 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004532:	2b80      	cmp	r3, #128	@ 0x80
 8004534:	d016      	beq.n	8004564 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2220      	movs	r2, #32
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004550:	f043 0220 	orr.w	r2, r3, #32
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e007      	b.n	8004574 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800456e:	2b80      	cmp	r3, #128	@ 0x80
 8004570:	d1c3      	bne.n	80044fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004588:	e034      	b.n	80045f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 f870 	bl	8004670 <I2C_IsAcknowledgeFailed>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e034      	b.n	8004604 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a0:	d028      	beq.n	80045f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a2:	f7fd f833 	bl	800160c <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d302      	bcc.n	80045b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d11d      	bne.n	80045f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	f003 0304 	and.w	r3, r3, #4
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d016      	beq.n	80045f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e0:	f043 0220 	orr.w	r2, r3, #32
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e007      	b.n	8004604 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b04      	cmp	r3, #4
 8004600:	d1c3      	bne.n	800458a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004618:	4b13      	ldr	r3, [pc, #76]	@ (8004668 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	08db      	lsrs	r3, r3, #3
 800461e:	4a13      	ldr	r2, [pc, #76]	@ (800466c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004620:	fba2 2303 	umull	r2, r3, r2, r3
 8004624:	0a1a      	lsrs	r2, r3, #8
 8004626:	4613      	mov	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4413      	add	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	3b01      	subs	r3, #1
 8004632:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d107      	bne.n	800464a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463e:	f043 0220 	orr.w	r2, r3, #32
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e008      	b.n	800465c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004654:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004658:	d0e9      	beq.n	800462e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	20000000 	.word	0x20000000
 800466c:	14f8b589 	.word	0x14f8b589

08004670 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004686:	d11b      	bne.n	80046c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004690:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ac:	f043 0204 	orr.w	r2, r3, #4
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e000      	b.n	80046c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046da:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80046de:	d103      	bne.n	80046e8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80046e6:	e007      	b.n	80046f8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ec:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80046f0:	d102      	bne.n	80046f8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2208      	movs	r2, #8
 80046f6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e267      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d075      	beq.n	800480e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004722:	4b88      	ldr	r3, [pc, #544]	@ (8004944 <HAL_RCC_OscConfig+0x240>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f003 030c 	and.w	r3, r3, #12
 800472a:	2b04      	cmp	r3, #4
 800472c:	d00c      	beq.n	8004748 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800472e:	4b85      	ldr	r3, [pc, #532]	@ (8004944 <HAL_RCC_OscConfig+0x240>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004736:	2b08      	cmp	r3, #8
 8004738:	d112      	bne.n	8004760 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800473a:	4b82      	ldr	r3, [pc, #520]	@ (8004944 <HAL_RCC_OscConfig+0x240>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004742:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004746:	d10b      	bne.n	8004760 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004748:	4b7e      	ldr	r3, [pc, #504]	@ (8004944 <HAL_RCC_OscConfig+0x240>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d05b      	beq.n	800480c <HAL_RCC_OscConfig+0x108>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d157      	bne.n	800480c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e242      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004768:	d106      	bne.n	8004778 <HAL_RCC_OscConfig+0x74>
 800476a:	4b76      	ldr	r3, [pc, #472]	@ (8004944 <HAL_RCC_OscConfig+0x240>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a75      	ldr	r2, [pc, #468]	@ (8004944 <HAL_RCC_OscConfig+0x240>)
 8004770:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	e01d      	b.n	80047b4 <HAL_RCC_OscConfig+0xb0>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004780:	d10c      	bne.n	800479c <HAL_RCC_OscConfig+0x98>
 8004782:	4b70      	ldr	r3, [pc, #448]	@ (8004944 <HAL_RCC_OscConfig+0x240>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a6f      	ldr	r2, [pc, #444]	@ (8004944 <HAL_RCC_OscConfig+0x240>)
 8004788:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	4b6d      	ldr	r3, [pc, #436]	@ (8004944 <HAL_RCC_OscConfig+0x240>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a6c      	ldr	r2, [pc, #432]	@ (8004944 <HAL_RCC_OscConfig+0x240>)
 8004794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	e00b      	b.n	80047b4 <HAL_RCC_OscConfig+0xb0>
 800479c:	4b69      	ldr	r3, [pc, #420]	@ (8004944 <HAL_RCC_OscConfig+0x240>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a68      	ldr	r2, [pc, #416]	@ (8004944 <HAL_RCC_OscConfig+0x240>)
 80047a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047a6:	6013      	str	r3, [r2, #0]
 80047a8:	4b66      	ldr	r3, [pc, #408]	@ (8004944 <HAL_RCC_OscConfig+0x240>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a65      	ldr	r2, [pc, #404]	@ (8004944 <HAL_RCC_OscConfig+0x240>)
 80047ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d013      	beq.n	80047e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047bc:	f7fc ff26 	bl	800160c <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047c4:	f7fc ff22 	bl	800160c <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b64      	cmp	r3, #100	@ 0x64
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e207      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d6:	4b5b      	ldr	r3, [pc, #364]	@ (8004944 <HAL_RCC_OscConfig+0x240>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f0      	beq.n	80047c4 <HAL_RCC_OscConfig+0xc0>
 80047e2:	e014      	b.n	800480e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e4:	f7fc ff12 	bl	800160c <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047ec:	f7fc ff0e 	bl	800160c <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b64      	cmp	r3, #100	@ 0x64
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e1f3      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047fe:	4b51      	ldr	r3, [pc, #324]	@ (8004944 <HAL_RCC_OscConfig+0x240>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f0      	bne.n	80047ec <HAL_RCC_OscConfig+0xe8>
 800480a:	e000      	b.n	800480e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800480c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d063      	beq.n	80048e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800481a:	4b4a      	ldr	r3, [pc, #296]	@ (8004944 <HAL_RCC_OscConfig+0x240>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 030c 	and.w	r3, r3, #12
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00b      	beq.n	800483e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004826:	4b47      	ldr	r3, [pc, #284]	@ (8004944 <HAL_RCC_OscConfig+0x240>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800482e:	2b08      	cmp	r3, #8
 8004830:	d11c      	bne.n	800486c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004832:	4b44      	ldr	r3, [pc, #272]	@ (8004944 <HAL_RCC_OscConfig+0x240>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d116      	bne.n	800486c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800483e:	4b41      	ldr	r3, [pc, #260]	@ (8004944 <HAL_RCC_OscConfig+0x240>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d005      	beq.n	8004856 <HAL_RCC_OscConfig+0x152>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d001      	beq.n	8004856 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e1c7      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004856:	4b3b      	ldr	r3, [pc, #236]	@ (8004944 <HAL_RCC_OscConfig+0x240>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	4937      	ldr	r1, [pc, #220]	@ (8004944 <HAL_RCC_OscConfig+0x240>)
 8004866:	4313      	orrs	r3, r2
 8004868:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800486a:	e03a      	b.n	80048e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d020      	beq.n	80048b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004874:	4b34      	ldr	r3, [pc, #208]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 8004876:	2201      	movs	r2, #1
 8004878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487a:	f7fc fec7 	bl	800160c <HAL_GetTick>
 800487e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004880:	e008      	b.n	8004894 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004882:	f7fc fec3 	bl	800160c <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e1a8      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004894:	4b2b      	ldr	r3, [pc, #172]	@ (8004944 <HAL_RCC_OscConfig+0x240>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0f0      	beq.n	8004882 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a0:	4b28      	ldr	r3, [pc, #160]	@ (8004944 <HAL_RCC_OscConfig+0x240>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	00db      	lsls	r3, r3, #3
 80048ae:	4925      	ldr	r1, [pc, #148]	@ (8004944 <HAL_RCC_OscConfig+0x240>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	600b      	str	r3, [r1, #0]
 80048b4:	e015      	b.n	80048e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048b6:	4b24      	ldr	r3, [pc, #144]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048bc:	f7fc fea6 	bl	800160c <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048c4:	f7fc fea2 	bl	800160c <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e187      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004944 <HAL_RCC_OscConfig+0x240>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1f0      	bne.n	80048c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d036      	beq.n	800495c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d016      	beq.n	8004924 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048f6:	4b15      	ldr	r3, [pc, #84]	@ (800494c <HAL_RCC_OscConfig+0x248>)
 80048f8:	2201      	movs	r2, #1
 80048fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048fc:	f7fc fe86 	bl	800160c <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004904:	f7fc fe82 	bl	800160c <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e167      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004916:	4b0b      	ldr	r3, [pc, #44]	@ (8004944 <HAL_RCC_OscConfig+0x240>)
 8004918:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0f0      	beq.n	8004904 <HAL_RCC_OscConfig+0x200>
 8004922:	e01b      	b.n	800495c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004924:	4b09      	ldr	r3, [pc, #36]	@ (800494c <HAL_RCC_OscConfig+0x248>)
 8004926:	2200      	movs	r2, #0
 8004928:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800492a:	f7fc fe6f 	bl	800160c <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004930:	e00e      	b.n	8004950 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004932:	f7fc fe6b 	bl	800160c <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d907      	bls.n	8004950 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e150      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
 8004944:	40023800 	.word	0x40023800
 8004948:	42470000 	.word	0x42470000
 800494c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004950:	4b88      	ldr	r3, [pc, #544]	@ (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004952:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1ea      	bne.n	8004932 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 8097 	beq.w	8004a98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800496a:	2300      	movs	r3, #0
 800496c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800496e:	4b81      	ldr	r3, [pc, #516]	@ (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10f      	bne.n	800499a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800497a:	2300      	movs	r3, #0
 800497c:	60bb      	str	r3, [r7, #8]
 800497e:	4b7d      	ldr	r3, [pc, #500]	@ (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004982:	4a7c      	ldr	r2, [pc, #496]	@ (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004988:	6413      	str	r3, [r2, #64]	@ 0x40
 800498a:	4b7a      	ldr	r3, [pc, #488]	@ (8004b74 <HAL_RCC_OscConfig+0x470>)
 800498c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004992:	60bb      	str	r3, [r7, #8]
 8004994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004996:	2301      	movs	r3, #1
 8004998:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800499a:	4b77      	ldr	r3, [pc, #476]	@ (8004b78 <HAL_RCC_OscConfig+0x474>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d118      	bne.n	80049d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049a6:	4b74      	ldr	r3, [pc, #464]	@ (8004b78 <HAL_RCC_OscConfig+0x474>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a73      	ldr	r2, [pc, #460]	@ (8004b78 <HAL_RCC_OscConfig+0x474>)
 80049ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049b2:	f7fc fe2b 	bl	800160c <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b8:	e008      	b.n	80049cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ba:	f7fc fe27 	bl	800160c <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e10c      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049cc:	4b6a      	ldr	r3, [pc, #424]	@ (8004b78 <HAL_RCC_OscConfig+0x474>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0f0      	beq.n	80049ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d106      	bne.n	80049ee <HAL_RCC_OscConfig+0x2ea>
 80049e0:	4b64      	ldr	r3, [pc, #400]	@ (8004b74 <HAL_RCC_OscConfig+0x470>)
 80049e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e4:	4a63      	ldr	r2, [pc, #396]	@ (8004b74 <HAL_RCC_OscConfig+0x470>)
 80049e6:	f043 0301 	orr.w	r3, r3, #1
 80049ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80049ec:	e01c      	b.n	8004a28 <HAL_RCC_OscConfig+0x324>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	2b05      	cmp	r3, #5
 80049f4:	d10c      	bne.n	8004a10 <HAL_RCC_OscConfig+0x30c>
 80049f6:	4b5f      	ldr	r3, [pc, #380]	@ (8004b74 <HAL_RCC_OscConfig+0x470>)
 80049f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049fa:	4a5e      	ldr	r2, [pc, #376]	@ (8004b74 <HAL_RCC_OscConfig+0x470>)
 80049fc:	f043 0304 	orr.w	r3, r3, #4
 8004a00:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a02:	4b5c      	ldr	r3, [pc, #368]	@ (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a06:	4a5b      	ldr	r2, [pc, #364]	@ (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004a08:	f043 0301 	orr.w	r3, r3, #1
 8004a0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a0e:	e00b      	b.n	8004a28 <HAL_RCC_OscConfig+0x324>
 8004a10:	4b58      	ldr	r3, [pc, #352]	@ (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a14:	4a57      	ldr	r2, [pc, #348]	@ (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004a16:	f023 0301 	bic.w	r3, r3, #1
 8004a1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a1c:	4b55      	ldr	r3, [pc, #340]	@ (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a20:	4a54      	ldr	r2, [pc, #336]	@ (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004a22:	f023 0304 	bic.w	r3, r3, #4
 8004a26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d015      	beq.n	8004a5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a30:	f7fc fdec 	bl	800160c <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a36:	e00a      	b.n	8004a4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a38:	f7fc fde8 	bl	800160c <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e0cb      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a4e:	4b49      	ldr	r3, [pc, #292]	@ (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0ee      	beq.n	8004a38 <HAL_RCC_OscConfig+0x334>
 8004a5a:	e014      	b.n	8004a86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a5c:	f7fc fdd6 	bl	800160c <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a62:	e00a      	b.n	8004a7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a64:	f7fc fdd2 	bl	800160c <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e0b5      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a7a:	4b3e      	ldr	r3, [pc, #248]	@ (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1ee      	bne.n	8004a64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a86:	7dfb      	ldrb	r3, [r7, #23]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d105      	bne.n	8004a98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a8c:	4b39      	ldr	r3, [pc, #228]	@ (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a90:	4a38      	ldr	r2, [pc, #224]	@ (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004a92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 80a1 	beq.w	8004be4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004aa2:	4b34      	ldr	r3, [pc, #208]	@ (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 030c 	and.w	r3, r3, #12
 8004aaa:	2b08      	cmp	r3, #8
 8004aac:	d05c      	beq.n	8004b68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d141      	bne.n	8004b3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ab6:	4b31      	ldr	r3, [pc, #196]	@ (8004b7c <HAL_RCC_OscConfig+0x478>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004abc:	f7fc fda6 	bl	800160c <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ac4:	f7fc fda2 	bl	800160c <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e087      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad6:	4b27      	ldr	r3, [pc, #156]	@ (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1f0      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	69da      	ldr	r2, [r3, #28]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af0:	019b      	lsls	r3, r3, #6
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af8:	085b      	lsrs	r3, r3, #1
 8004afa:	3b01      	subs	r3, #1
 8004afc:	041b      	lsls	r3, r3, #16
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b04:	061b      	lsls	r3, r3, #24
 8004b06:	491b      	ldr	r1, [pc, #108]	@ (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8004b7c <HAL_RCC_OscConfig+0x478>)
 8004b0e:	2201      	movs	r2, #1
 8004b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b12:	f7fc fd7b 	bl	800160c <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b1a:	f7fc fd77 	bl	800160c <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e05c      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b2c:	4b11      	ldr	r3, [pc, #68]	@ (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0f0      	beq.n	8004b1a <HAL_RCC_OscConfig+0x416>
 8004b38:	e054      	b.n	8004be4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b3a:	4b10      	ldr	r3, [pc, #64]	@ (8004b7c <HAL_RCC_OscConfig+0x478>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b40:	f7fc fd64 	bl	800160c <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b48:	f7fc fd60 	bl	800160c <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e045      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b5a:	4b06      	ldr	r3, [pc, #24]	@ (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1f0      	bne.n	8004b48 <HAL_RCC_OscConfig+0x444>
 8004b66:	e03d      	b.n	8004be4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d107      	bne.n	8004b80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e038      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
 8004b74:	40023800 	.word	0x40023800
 8004b78:	40007000 	.word	0x40007000
 8004b7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b80:	4b1b      	ldr	r3, [pc, #108]	@ (8004bf0 <HAL_RCC_OscConfig+0x4ec>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d028      	beq.n	8004be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d121      	bne.n	8004be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d11a      	bne.n	8004be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004bb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d111      	bne.n	8004be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc6:	085b      	lsrs	r3, r3, #1
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d107      	bne.n	8004be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d001      	beq.n	8004be4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e000      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	40023800 	.word	0x40023800

08004bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e0cc      	b.n	8004da2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c08:	4b68      	ldr	r3, [pc, #416]	@ (8004dac <HAL_RCC_ClockConfig+0x1b8>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d90c      	bls.n	8004c30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c16:	4b65      	ldr	r3, [pc, #404]	@ (8004dac <HAL_RCC_ClockConfig+0x1b8>)
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c1e:	4b63      	ldr	r3, [pc, #396]	@ (8004dac <HAL_RCC_ClockConfig+0x1b8>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d001      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e0b8      	b.n	8004da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d020      	beq.n	8004c7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c48:	4b59      	ldr	r3, [pc, #356]	@ (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	4a58      	ldr	r2, [pc, #352]	@ (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0308 	and.w	r3, r3, #8
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c60:	4b53      	ldr	r3, [pc, #332]	@ (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	4a52      	ldr	r2, [pc, #328]	@ (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c66:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c6c:	4b50      	ldr	r3, [pc, #320]	@ (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	494d      	ldr	r1, [pc, #308]	@ (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d044      	beq.n	8004d14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d107      	bne.n	8004ca2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c92:	4b47      	ldr	r3, [pc, #284]	@ (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d119      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e07f      	b.n	8004da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d003      	beq.n	8004cb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cae:	2b03      	cmp	r3, #3
 8004cb0:	d107      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cb2:	4b3f      	ldr	r3, [pc, #252]	@ (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d109      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e06f      	b.n	8004da2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cc2:	4b3b      	ldr	r3, [pc, #236]	@ (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e067      	b.n	8004da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cd2:	4b37      	ldr	r3, [pc, #220]	@ (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f023 0203 	bic.w	r2, r3, #3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	4934      	ldr	r1, [pc, #208]	@ (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ce4:	f7fc fc92 	bl	800160c <HAL_GetTick>
 8004ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cea:	e00a      	b.n	8004d02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cec:	f7fc fc8e 	bl	800160c <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e04f      	b.n	8004da2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d02:	4b2b      	ldr	r3, [pc, #172]	@ (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f003 020c 	and.w	r2, r3, #12
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d1eb      	bne.n	8004cec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d14:	4b25      	ldr	r3, [pc, #148]	@ (8004dac <HAL_RCC_ClockConfig+0x1b8>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d20c      	bcs.n	8004d3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d22:	4b22      	ldr	r3, [pc, #136]	@ (8004dac <HAL_RCC_ClockConfig+0x1b8>)
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	b2d2      	uxtb	r2, r2
 8004d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d2a:	4b20      	ldr	r3, [pc, #128]	@ (8004dac <HAL_RCC_ClockConfig+0x1b8>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d001      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e032      	b.n	8004da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d008      	beq.n	8004d5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d48:	4b19      	ldr	r3, [pc, #100]	@ (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	4916      	ldr	r1, [pc, #88]	@ (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0308 	and.w	r3, r3, #8
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d009      	beq.n	8004d7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d66:	4b12      	ldr	r3, [pc, #72]	@ (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	490e      	ldr	r1, [pc, #56]	@ (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d7a:	f000 f821 	bl	8004dc0 <HAL_RCC_GetSysClockFreq>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	4b0b      	ldr	r3, [pc, #44]	@ (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	091b      	lsrs	r3, r3, #4
 8004d86:	f003 030f 	and.w	r3, r3, #15
 8004d8a:	490a      	ldr	r1, [pc, #40]	@ (8004db4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d8c:	5ccb      	ldrb	r3, [r1, r3]
 8004d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d92:	4a09      	ldr	r2, [pc, #36]	@ (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d96:	4b09      	ldr	r3, [pc, #36]	@ (8004dbc <HAL_RCC_ClockConfig+0x1c8>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fc fbf2 	bl	8001584 <HAL_InitTick>

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	40023c00 	.word	0x40023c00
 8004db0:	40023800 	.word	0x40023800
 8004db4:	08005968 	.word	0x08005968
 8004db8:	20000000 	.word	0x20000000
 8004dbc:	20000018 	.word	0x20000018

08004dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dc4:	b094      	sub	sp, #80	@ 0x50
 8004dc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dcc:	2300      	movs	r3, #0
 8004dce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dd8:	4b79      	ldr	r3, [pc, #484]	@ (8004fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f003 030c 	and.w	r3, r3, #12
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d00d      	beq.n	8004e00 <HAL_RCC_GetSysClockFreq+0x40>
 8004de4:	2b08      	cmp	r3, #8
 8004de6:	f200 80e1 	bhi.w	8004fac <HAL_RCC_GetSysClockFreq+0x1ec>
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d002      	beq.n	8004df4 <HAL_RCC_GetSysClockFreq+0x34>
 8004dee:	2b04      	cmp	r3, #4
 8004df0:	d003      	beq.n	8004dfa <HAL_RCC_GetSysClockFreq+0x3a>
 8004df2:	e0db      	b.n	8004fac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004df4:	4b73      	ldr	r3, [pc, #460]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004df6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004df8:	e0db      	b.n	8004fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dfa:	4b73      	ldr	r3, [pc, #460]	@ (8004fc8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004dfc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004dfe:	e0d8      	b.n	8004fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e00:	4b6f      	ldr	r3, [pc, #444]	@ (8004fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e08:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e0a:	4b6d      	ldr	r3, [pc, #436]	@ (8004fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d063      	beq.n	8004ede <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e16:	4b6a      	ldr	r3, [pc, #424]	@ (8004fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	099b      	lsrs	r3, r3, #6
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e20:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e28:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004e32:	4622      	mov	r2, r4
 8004e34:	462b      	mov	r3, r5
 8004e36:	f04f 0000 	mov.w	r0, #0
 8004e3a:	f04f 0100 	mov.w	r1, #0
 8004e3e:	0159      	lsls	r1, r3, #5
 8004e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e44:	0150      	lsls	r0, r2, #5
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4621      	mov	r1, r4
 8004e4c:	1a51      	subs	r1, r2, r1
 8004e4e:	6139      	str	r1, [r7, #16]
 8004e50:	4629      	mov	r1, r5
 8004e52:	eb63 0301 	sbc.w	r3, r3, r1
 8004e56:	617b      	str	r3, [r7, #20]
 8004e58:	f04f 0200 	mov.w	r2, #0
 8004e5c:	f04f 0300 	mov.w	r3, #0
 8004e60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e64:	4659      	mov	r1, fp
 8004e66:	018b      	lsls	r3, r1, #6
 8004e68:	4651      	mov	r1, sl
 8004e6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e6e:	4651      	mov	r1, sl
 8004e70:	018a      	lsls	r2, r1, #6
 8004e72:	4651      	mov	r1, sl
 8004e74:	ebb2 0801 	subs.w	r8, r2, r1
 8004e78:	4659      	mov	r1, fp
 8004e7a:	eb63 0901 	sbc.w	r9, r3, r1
 8004e7e:	f04f 0200 	mov.w	r2, #0
 8004e82:	f04f 0300 	mov.w	r3, #0
 8004e86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e92:	4690      	mov	r8, r2
 8004e94:	4699      	mov	r9, r3
 8004e96:	4623      	mov	r3, r4
 8004e98:	eb18 0303 	adds.w	r3, r8, r3
 8004e9c:	60bb      	str	r3, [r7, #8]
 8004e9e:	462b      	mov	r3, r5
 8004ea0:	eb49 0303 	adc.w	r3, r9, r3
 8004ea4:	60fb      	str	r3, [r7, #12]
 8004ea6:	f04f 0200 	mov.w	r2, #0
 8004eaa:	f04f 0300 	mov.w	r3, #0
 8004eae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004eb2:	4629      	mov	r1, r5
 8004eb4:	024b      	lsls	r3, r1, #9
 8004eb6:	4621      	mov	r1, r4
 8004eb8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ebc:	4621      	mov	r1, r4
 8004ebe:	024a      	lsls	r2, r1, #9
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ecc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ed0:	f7fb f982 	bl	80001d8 <__aeabi_uldivmod>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4613      	mov	r3, r2
 8004eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004edc:	e058      	b.n	8004f90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ede:	4b38      	ldr	r3, [pc, #224]	@ (8004fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	099b      	lsrs	r3, r3, #6
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	4611      	mov	r1, r2
 8004eea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004eee:	623b      	str	r3, [r7, #32]
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ef4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ef8:	4642      	mov	r2, r8
 8004efa:	464b      	mov	r3, r9
 8004efc:	f04f 0000 	mov.w	r0, #0
 8004f00:	f04f 0100 	mov.w	r1, #0
 8004f04:	0159      	lsls	r1, r3, #5
 8004f06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f0a:	0150      	lsls	r0, r2, #5
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4641      	mov	r1, r8
 8004f12:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f16:	4649      	mov	r1, r9
 8004f18:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	f04f 0300 	mov.w	r3, #0
 8004f24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f30:	ebb2 040a 	subs.w	r4, r2, sl
 8004f34:	eb63 050b 	sbc.w	r5, r3, fp
 8004f38:	f04f 0200 	mov.w	r2, #0
 8004f3c:	f04f 0300 	mov.w	r3, #0
 8004f40:	00eb      	lsls	r3, r5, #3
 8004f42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f46:	00e2      	lsls	r2, r4, #3
 8004f48:	4614      	mov	r4, r2
 8004f4a:	461d      	mov	r5, r3
 8004f4c:	4643      	mov	r3, r8
 8004f4e:	18e3      	adds	r3, r4, r3
 8004f50:	603b      	str	r3, [r7, #0]
 8004f52:	464b      	mov	r3, r9
 8004f54:	eb45 0303 	adc.w	r3, r5, r3
 8004f58:	607b      	str	r3, [r7, #4]
 8004f5a:	f04f 0200 	mov.w	r2, #0
 8004f5e:	f04f 0300 	mov.w	r3, #0
 8004f62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f66:	4629      	mov	r1, r5
 8004f68:	028b      	lsls	r3, r1, #10
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f70:	4621      	mov	r1, r4
 8004f72:	028a      	lsls	r2, r1, #10
 8004f74:	4610      	mov	r0, r2
 8004f76:	4619      	mov	r1, r3
 8004f78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	61bb      	str	r3, [r7, #24]
 8004f7e:	61fa      	str	r2, [r7, #28]
 8004f80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f84:	f7fb f928 	bl	80001d8 <__aeabi_uldivmod>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f90:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	0c1b      	lsrs	r3, r3, #16
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004fa0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004fa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004faa:	e002      	b.n	8004fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fac:	4b05      	ldr	r3, [pc, #20]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004fae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3750      	adds	r7, #80	@ 0x50
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fbe:	bf00      	nop
 8004fc0:	40023800 	.word	0x40023800
 8004fc4:	00f42400 	.word	0x00f42400
 8004fc8:	007a1200 	.word	0x007a1200

08004fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fd0:	4b03      	ldr	r3, [pc, #12]	@ (8004fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	20000000 	.word	0x20000000

08004fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fe8:	f7ff fff0 	bl	8004fcc <HAL_RCC_GetHCLKFreq>
 8004fec:	4602      	mov	r2, r0
 8004fee:	4b05      	ldr	r3, [pc, #20]	@ (8005004 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	0a9b      	lsrs	r3, r3, #10
 8004ff4:	f003 0307 	and.w	r3, r3, #7
 8004ff8:	4903      	ldr	r1, [pc, #12]	@ (8005008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ffa:	5ccb      	ldrb	r3, [r1, r3]
 8004ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005000:	4618      	mov	r0, r3
 8005002:	bd80      	pop	{r7, pc}
 8005004:	40023800 	.word	0x40023800
 8005008:	08005978 	.word	0x08005978

0800500c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e041      	b.n	80050a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d106      	bne.n	8005038 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7fb fdf2 	bl	8000c1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2202      	movs	r2, #2
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	3304      	adds	r3, #4
 8005048:	4619      	mov	r1, r3
 800504a:	4610      	mov	r0, r2
 800504c:	f000 fa9e 	bl	800558c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
	...

080050ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d001      	beq.n	80050c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e044      	b.n	800514e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68da      	ldr	r2, [r3, #12]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0201 	orr.w	r2, r2, #1
 80050da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a1e      	ldr	r2, [pc, #120]	@ (800515c <HAL_TIM_Base_Start_IT+0xb0>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d018      	beq.n	8005118 <HAL_TIM_Base_Start_IT+0x6c>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ee:	d013      	beq.n	8005118 <HAL_TIM_Base_Start_IT+0x6c>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a1a      	ldr	r2, [pc, #104]	@ (8005160 <HAL_TIM_Base_Start_IT+0xb4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d00e      	beq.n	8005118 <HAL_TIM_Base_Start_IT+0x6c>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a19      	ldr	r2, [pc, #100]	@ (8005164 <HAL_TIM_Base_Start_IT+0xb8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d009      	beq.n	8005118 <HAL_TIM_Base_Start_IT+0x6c>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a17      	ldr	r2, [pc, #92]	@ (8005168 <HAL_TIM_Base_Start_IT+0xbc>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d004      	beq.n	8005118 <HAL_TIM_Base_Start_IT+0x6c>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a16      	ldr	r2, [pc, #88]	@ (800516c <HAL_TIM_Base_Start_IT+0xc0>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d111      	bne.n	800513c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 0307 	and.w	r3, r3, #7
 8005122:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2b06      	cmp	r3, #6
 8005128:	d010      	beq.n	800514c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f042 0201 	orr.w	r2, r2, #1
 8005138:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800513a:	e007      	b.n	800514c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 0201 	orr.w	r2, r2, #1
 800514a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	40010000 	.word	0x40010000
 8005160:	40000400 	.word	0x40000400
 8005164:	40000800 	.word	0x40000800
 8005168:	40000c00 	.word	0x40000c00
 800516c:	40014000 	.word	0x40014000

08005170 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0201 	bic.w	r2, r2, #1
 8005186:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6a1a      	ldr	r2, [r3, #32]
 800518e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005192:	4013      	ands	r3, r2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10f      	bne.n	80051b8 <HAL_TIM_Base_Stop_IT+0x48>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6a1a      	ldr	r2, [r3, #32]
 800519e:	f240 4344 	movw	r3, #1092	@ 0x444
 80051a2:	4013      	ands	r3, r2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d107      	bne.n	80051b8 <HAL_TIM_Base_Stop_IT+0x48>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0201 	bic.w	r2, r2, #1
 80051b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b084      	sub	sp, #16
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d020      	beq.n	8005232 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d01b      	beq.n	8005232 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f06f 0202 	mvn.w	r2, #2
 8005202:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	f003 0303 	and.w	r3, r3, #3
 8005214:	2b00      	cmp	r3, #0
 8005216:	d003      	beq.n	8005220 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f999 	bl	8005550 <HAL_TIM_IC_CaptureCallback>
 800521e:	e005      	b.n	800522c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f98b 	bl	800553c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f99c 	bl	8005564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	f003 0304 	and.w	r3, r3, #4
 8005238:	2b00      	cmp	r3, #0
 800523a:	d020      	beq.n	800527e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f003 0304 	and.w	r3, r3, #4
 8005242:	2b00      	cmp	r3, #0
 8005244:	d01b      	beq.n	800527e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f06f 0204 	mvn.w	r2, #4
 800524e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005260:	2b00      	cmp	r3, #0
 8005262:	d003      	beq.n	800526c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 f973 	bl	8005550 <HAL_TIM_IC_CaptureCallback>
 800526a:	e005      	b.n	8005278 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f965 	bl	800553c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f976 	bl	8005564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	f003 0308 	and.w	r3, r3, #8
 8005284:	2b00      	cmp	r3, #0
 8005286:	d020      	beq.n	80052ca <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f003 0308 	and.w	r3, r3, #8
 800528e:	2b00      	cmp	r3, #0
 8005290:	d01b      	beq.n	80052ca <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f06f 0208 	mvn.w	r2, #8
 800529a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2204      	movs	r2, #4
 80052a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	69db      	ldr	r3, [r3, #28]
 80052a8:	f003 0303 	and.w	r3, r3, #3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d003      	beq.n	80052b8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f94d 	bl	8005550 <HAL_TIM_IC_CaptureCallback>
 80052b6:	e005      	b.n	80052c4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 f93f 	bl	800553c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f950 	bl	8005564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f003 0310 	and.w	r3, r3, #16
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d020      	beq.n	8005316 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f003 0310 	and.w	r3, r3, #16
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d01b      	beq.n	8005316 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f06f 0210 	mvn.w	r2, #16
 80052e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2208      	movs	r2, #8
 80052ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 f927 	bl	8005550 <HAL_TIM_IC_CaptureCallback>
 8005302:	e005      	b.n	8005310 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 f919 	bl	800553c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f92a 	bl	8005564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00c      	beq.n	800533a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b00      	cmp	r3, #0
 8005328:	d007      	beq.n	800533a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f06f 0201 	mvn.w	r2, #1
 8005332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7fb f8db 	bl	80004f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00c      	beq.n	800535e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800534a:	2b00      	cmp	r3, #0
 800534c:	d007      	beq.n	800535e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fab5 	bl	80058c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00c      	beq.n	8005382 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800536e:	2b00      	cmp	r3, #0
 8005370:	d007      	beq.n	8005382 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800537a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f8fb 	bl	8005578 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	f003 0320 	and.w	r3, r3, #32
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00c      	beq.n	80053a6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f003 0320 	and.w	r3, r3, #32
 8005392:	2b00      	cmp	r3, #0
 8005394:	d007      	beq.n	80053a6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f06f 0220 	mvn.w	r2, #32
 800539e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fa87 	bl	80058b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053a6:	bf00      	nop
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b084      	sub	sp, #16
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d101      	bne.n	80053ca <HAL_TIM_ConfigClockSource+0x1c>
 80053c6:	2302      	movs	r3, #2
 80053c8:	e0b4      	b.n	8005534 <HAL_TIM_ConfigClockSource+0x186>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2202      	movs	r2, #2
 80053d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80053e8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053f0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005402:	d03e      	beq.n	8005482 <HAL_TIM_ConfigClockSource+0xd4>
 8005404:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005408:	f200 8087 	bhi.w	800551a <HAL_TIM_ConfigClockSource+0x16c>
 800540c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005410:	f000 8086 	beq.w	8005520 <HAL_TIM_ConfigClockSource+0x172>
 8005414:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005418:	d87f      	bhi.n	800551a <HAL_TIM_ConfigClockSource+0x16c>
 800541a:	2b70      	cmp	r3, #112	@ 0x70
 800541c:	d01a      	beq.n	8005454 <HAL_TIM_ConfigClockSource+0xa6>
 800541e:	2b70      	cmp	r3, #112	@ 0x70
 8005420:	d87b      	bhi.n	800551a <HAL_TIM_ConfigClockSource+0x16c>
 8005422:	2b60      	cmp	r3, #96	@ 0x60
 8005424:	d050      	beq.n	80054c8 <HAL_TIM_ConfigClockSource+0x11a>
 8005426:	2b60      	cmp	r3, #96	@ 0x60
 8005428:	d877      	bhi.n	800551a <HAL_TIM_ConfigClockSource+0x16c>
 800542a:	2b50      	cmp	r3, #80	@ 0x50
 800542c:	d03c      	beq.n	80054a8 <HAL_TIM_ConfigClockSource+0xfa>
 800542e:	2b50      	cmp	r3, #80	@ 0x50
 8005430:	d873      	bhi.n	800551a <HAL_TIM_ConfigClockSource+0x16c>
 8005432:	2b40      	cmp	r3, #64	@ 0x40
 8005434:	d058      	beq.n	80054e8 <HAL_TIM_ConfigClockSource+0x13a>
 8005436:	2b40      	cmp	r3, #64	@ 0x40
 8005438:	d86f      	bhi.n	800551a <HAL_TIM_ConfigClockSource+0x16c>
 800543a:	2b30      	cmp	r3, #48	@ 0x30
 800543c:	d064      	beq.n	8005508 <HAL_TIM_ConfigClockSource+0x15a>
 800543e:	2b30      	cmp	r3, #48	@ 0x30
 8005440:	d86b      	bhi.n	800551a <HAL_TIM_ConfigClockSource+0x16c>
 8005442:	2b20      	cmp	r3, #32
 8005444:	d060      	beq.n	8005508 <HAL_TIM_ConfigClockSource+0x15a>
 8005446:	2b20      	cmp	r3, #32
 8005448:	d867      	bhi.n	800551a <HAL_TIM_ConfigClockSource+0x16c>
 800544a:	2b00      	cmp	r3, #0
 800544c:	d05c      	beq.n	8005508 <HAL_TIM_ConfigClockSource+0x15a>
 800544e:	2b10      	cmp	r3, #16
 8005450:	d05a      	beq.n	8005508 <HAL_TIM_ConfigClockSource+0x15a>
 8005452:	e062      	b.n	800551a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005464:	f000 f998 	bl	8005798 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005476:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	609a      	str	r2, [r3, #8]
      break;
 8005480:	e04f      	b.n	8005522 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005492:	f000 f981 	bl	8005798 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054a4:	609a      	str	r2, [r3, #8]
      break;
 80054a6:	e03c      	b.n	8005522 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054b4:	461a      	mov	r2, r3
 80054b6:	f000 f8f5 	bl	80056a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2150      	movs	r1, #80	@ 0x50
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 f94e 	bl	8005762 <TIM_ITRx_SetConfig>
      break;
 80054c6:	e02c      	b.n	8005522 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054d4:	461a      	mov	r2, r3
 80054d6:	f000 f914 	bl	8005702 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2160      	movs	r1, #96	@ 0x60
 80054e0:	4618      	mov	r0, r3
 80054e2:	f000 f93e 	bl	8005762 <TIM_ITRx_SetConfig>
      break;
 80054e6:	e01c      	b.n	8005522 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054f4:	461a      	mov	r2, r3
 80054f6:	f000 f8d5 	bl	80056a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2140      	movs	r1, #64	@ 0x40
 8005500:	4618      	mov	r0, r3
 8005502:	f000 f92e 	bl	8005762 <TIM_ITRx_SetConfig>
      break;
 8005506:	e00c      	b.n	8005522 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4619      	mov	r1, r3
 8005512:	4610      	mov	r0, r2
 8005514:	f000 f925 	bl	8005762 <TIM_ITRx_SetConfig>
      break;
 8005518:	e003      	b.n	8005522 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	73fb      	strb	r3, [r7, #15]
      break;
 800551e:	e000      	b.n	8005522 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005520:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005532:	7bfb      	ldrb	r3, [r7, #15]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a3a      	ldr	r2, [pc, #232]	@ (8005688 <TIM_Base_SetConfig+0xfc>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d00f      	beq.n	80055c4 <TIM_Base_SetConfig+0x38>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055aa:	d00b      	beq.n	80055c4 <TIM_Base_SetConfig+0x38>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a37      	ldr	r2, [pc, #220]	@ (800568c <TIM_Base_SetConfig+0x100>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d007      	beq.n	80055c4 <TIM_Base_SetConfig+0x38>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a36      	ldr	r2, [pc, #216]	@ (8005690 <TIM_Base_SetConfig+0x104>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d003      	beq.n	80055c4 <TIM_Base_SetConfig+0x38>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a35      	ldr	r2, [pc, #212]	@ (8005694 <TIM_Base_SetConfig+0x108>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d108      	bne.n	80055d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a2b      	ldr	r2, [pc, #172]	@ (8005688 <TIM_Base_SetConfig+0xfc>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d01b      	beq.n	8005616 <TIM_Base_SetConfig+0x8a>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055e4:	d017      	beq.n	8005616 <TIM_Base_SetConfig+0x8a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a28      	ldr	r2, [pc, #160]	@ (800568c <TIM_Base_SetConfig+0x100>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d013      	beq.n	8005616 <TIM_Base_SetConfig+0x8a>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a27      	ldr	r2, [pc, #156]	@ (8005690 <TIM_Base_SetConfig+0x104>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d00f      	beq.n	8005616 <TIM_Base_SetConfig+0x8a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a26      	ldr	r2, [pc, #152]	@ (8005694 <TIM_Base_SetConfig+0x108>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d00b      	beq.n	8005616 <TIM_Base_SetConfig+0x8a>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a25      	ldr	r2, [pc, #148]	@ (8005698 <TIM_Base_SetConfig+0x10c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d007      	beq.n	8005616 <TIM_Base_SetConfig+0x8a>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a24      	ldr	r2, [pc, #144]	@ (800569c <TIM_Base_SetConfig+0x110>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d003      	beq.n	8005616 <TIM_Base_SetConfig+0x8a>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a23      	ldr	r2, [pc, #140]	@ (80056a0 <TIM_Base_SetConfig+0x114>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d108      	bne.n	8005628 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800561c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4313      	orrs	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	4313      	orrs	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a0e      	ldr	r2, [pc, #56]	@ (8005688 <TIM_Base_SetConfig+0xfc>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d103      	bne.n	800565c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	691a      	ldr	r2, [r3, #16]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b01      	cmp	r3, #1
 800566c:	d105      	bne.n	800567a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f023 0201 	bic.w	r2, r3, #1
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	611a      	str	r2, [r3, #16]
  }
}
 800567a:	bf00      	nop
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	40010000 	.word	0x40010000
 800568c:	40000400 	.word	0x40000400
 8005690:	40000800 	.word	0x40000800
 8005694:	40000c00 	.word	0x40000c00
 8005698:	40014000 	.word	0x40014000
 800569c:	40014400 	.word	0x40014400
 80056a0:	40014800 	.word	0x40014800

080056a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b087      	sub	sp, #28
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	f023 0201 	bic.w	r2, r3, #1
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	011b      	lsls	r3, r3, #4
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f023 030a 	bic.w	r3, r3, #10
 80056e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	621a      	str	r2, [r3, #32]
}
 80056f6:	bf00      	nop
 80056f8:	371c      	adds	r7, #28
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005702:	b480      	push	{r7}
 8005704:	b087      	sub	sp, #28
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	f023 0210 	bic.w	r2, r3, #16
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800572c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	031b      	lsls	r3, r3, #12
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	4313      	orrs	r3, r2
 8005736:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800573e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	4313      	orrs	r3, r2
 8005748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	621a      	str	r2, [r3, #32]
}
 8005756:	bf00      	nop
 8005758:	371c      	adds	r7, #28
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005762:	b480      	push	{r7}
 8005764:	b085      	sub	sp, #20
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005778:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4313      	orrs	r3, r2
 8005780:	f043 0307 	orr.w	r3, r3, #7
 8005784:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	609a      	str	r2, [r3, #8]
}
 800578c:	bf00      	nop
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005798:	b480      	push	{r7}
 800579a:	b087      	sub	sp, #28
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	021a      	lsls	r2, r3, #8
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	431a      	orrs	r2, r3
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	4313      	orrs	r3, r2
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	609a      	str	r2, [r3, #8]
}
 80057cc:	bf00      	nop
 80057ce:	371c      	adds	r7, #28
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d101      	bne.n	80057f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057ec:	2302      	movs	r3, #2
 80057ee:	e050      	b.n	8005892 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005816:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a1c      	ldr	r2, [pc, #112]	@ (80058a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d018      	beq.n	8005866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800583c:	d013      	beq.n	8005866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a18      	ldr	r2, [pc, #96]	@ (80058a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d00e      	beq.n	8005866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a16      	ldr	r2, [pc, #88]	@ (80058a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d009      	beq.n	8005866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a15      	ldr	r2, [pc, #84]	@ (80058ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d004      	beq.n	8005866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a13      	ldr	r2, [pc, #76]	@ (80058b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d10c      	bne.n	8005880 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800586c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	4313      	orrs	r3, r2
 8005876:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	40010000 	.word	0x40010000
 80058a4:	40000400 	.word	0x40000400
 80058a8:	40000800 	.word	0x40000800
 80058ac:	40000c00 	.word	0x40000c00
 80058b0:	40014000 	.word	0x40014000

080058b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <memset>:
 80058dc:	4402      	add	r2, r0
 80058de:	4603      	mov	r3, r0
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d100      	bne.n	80058e6 <memset+0xa>
 80058e4:	4770      	bx	lr
 80058e6:	f803 1b01 	strb.w	r1, [r3], #1
 80058ea:	e7f9      	b.n	80058e0 <memset+0x4>

080058ec <__libc_init_array>:
 80058ec:	b570      	push	{r4, r5, r6, lr}
 80058ee:	4d0d      	ldr	r5, [pc, #52]	@ (8005924 <__libc_init_array+0x38>)
 80058f0:	4c0d      	ldr	r4, [pc, #52]	@ (8005928 <__libc_init_array+0x3c>)
 80058f2:	1b64      	subs	r4, r4, r5
 80058f4:	10a4      	asrs	r4, r4, #2
 80058f6:	2600      	movs	r6, #0
 80058f8:	42a6      	cmp	r6, r4
 80058fa:	d109      	bne.n	8005910 <__libc_init_array+0x24>
 80058fc:	4d0b      	ldr	r5, [pc, #44]	@ (800592c <__libc_init_array+0x40>)
 80058fe:	4c0c      	ldr	r4, [pc, #48]	@ (8005930 <__libc_init_array+0x44>)
 8005900:	f000 f826 	bl	8005950 <_init>
 8005904:	1b64      	subs	r4, r4, r5
 8005906:	10a4      	asrs	r4, r4, #2
 8005908:	2600      	movs	r6, #0
 800590a:	42a6      	cmp	r6, r4
 800590c:	d105      	bne.n	800591a <__libc_init_array+0x2e>
 800590e:	bd70      	pop	{r4, r5, r6, pc}
 8005910:	f855 3b04 	ldr.w	r3, [r5], #4
 8005914:	4798      	blx	r3
 8005916:	3601      	adds	r6, #1
 8005918:	e7ee      	b.n	80058f8 <__libc_init_array+0xc>
 800591a:	f855 3b04 	ldr.w	r3, [r5], #4
 800591e:	4798      	blx	r3
 8005920:	3601      	adds	r6, #1
 8005922:	e7f2      	b.n	800590a <__libc_init_array+0x1e>
 8005924:	08005988 	.word	0x08005988
 8005928:	08005988 	.word	0x08005988
 800592c:	08005988 	.word	0x08005988
 8005930:	0800598c 	.word	0x0800598c

08005934 <memcpy>:
 8005934:	440a      	add	r2, r1
 8005936:	4291      	cmp	r1, r2
 8005938:	f100 33ff 	add.w	r3, r0, #4294967295
 800593c:	d100      	bne.n	8005940 <memcpy+0xc>
 800593e:	4770      	bx	lr
 8005940:	b510      	push	{r4, lr}
 8005942:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005946:	f803 4f01 	strb.w	r4, [r3, #1]!
 800594a:	4291      	cmp	r1, r2
 800594c:	d1f9      	bne.n	8005942 <memcpy+0xe>
 800594e:	bd10      	pop	{r4, pc}

08005950 <_init>:
 8005950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005952:	bf00      	nop
 8005954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005956:	bc08      	pop	{r3}
 8005958:	469e      	mov	lr, r3
 800595a:	4770      	bx	lr

0800595c <_fini>:
 800595c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595e:	bf00      	nop
 8005960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005962:	bc08      	pop	{r3}
 8005964:	469e      	mov	lr, r3
 8005966:	4770      	bx	lr
